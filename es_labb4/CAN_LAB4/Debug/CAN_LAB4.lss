
CAN_LAB4.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006bbc  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008c00  80008c00  00009000  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000748  80008e00  80008e00  00009200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000050c  00000008  80009548  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000514  80009a54  0000a114  2**0
                  ALLOC
  8 .bss          00000160  00000518  00000518  00000000  2**2
                  ALLOC
  9 .heap         0000e988  00000678  00000678  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000a114  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d00  00000000  00000000  0000a148  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000177b  00000000  00000000  0000ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001d651  00000000  00000000  0000c5c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005026  00000000  00000000  00029c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d600  00000000  00000000  0002ec3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001e88  00000000  00000000  0003c23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003d57  00000000  00000000  0003e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00009c66  00000000  00000000  00041e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0084c649  00000000  00000000  0004ba81  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00000ed8  00000000  00000000  008980d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf cd 58 	sub	pc,pc,-12968

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ed 5c 	sub	pc,pc,-4772

Disassembly of section .text:

80002008 <ClearMessages>:
80002008:	30 08       	mov	r8,0
8000200a:	b8 88       	st.b	r12[0x0],r8
 * Example:			ClearMessages(msg);
 ********************************************************************/
void ClearMessages(UINT8* Msg)
{
	Msg[0] = 0;
	Msg[1] = 0;
8000200c:	b8 98       	st.b	r12[0x1],r8
	Msg[2] = 0;
8000200e:	b8 a8       	st.b	r12[0x2],r8
	Msg[3] = 0;
80002010:	b8 b8       	st.b	r12[0x3],r8
	Msg[4] = 0;
80002012:	b8 c8       	st.b	r12[0x4],r8
	Msg[5] = 0;
80002014:	b8 d8       	st.b	r12[0x5],r8
	Msg[6] = 0;
80002016:	b8 e8       	st.b	r12[0x6],r8
	Msg[7] = 0;
80002018:	b8 f8       	st.b	r12[0x7],r8
}
8000201a:	5e fc       	retal	r12

8000201c <config_dpi204>:
 *
 * Note:            None.
 *
 * Example:         config_dpi204();
 ********************************************************************/
void config_dpi204(void){
8000201c:	eb cd 40 80 	pushm	r7,lr
80002020:	20 4d       	sub	sp,16
	.spck_delay   = 0,
	.trans_delay  = 0,
	.stay_act     = 1,
	.spi_mode     = 0,
	.modfdis      = 1
	};
80002022:	49 68       	lddpc	r8,80002078 <config_dpi204+0x5c>
80002024:	1a 97       	mov	r7,sp
80002026:	f0 ea 00 00 	ld.d	r10,r8[0]
8000202a:	fa eb 00 00 	st.d	sp[0],r10
8000202e:	f0 e8 00 08 	ld.d	r8,r8[8]
80002032:	fa e9 00 08 	st.d	sp[8],r8
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80002036:	30 4b       	mov	r11,4
80002038:	49 1c       	lddpc	r12,8000207c <config_dpi204+0x60>
8000203a:	f0 1f 00 12 	mcall	80002080 <config_dpi204+0x64>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	spi_initMaster(DIP204_SPI, &spiOptions2);
8000203e:	1a 9b       	mov	r11,sp
80002040:	fe 7c 28 00 	mov	r12,-55296
80002044:	f0 1f 00 10 	mcall	80002084 <config_dpi204+0x68>
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80002048:	30 09       	mov	r9,0
8000204a:	12 9a       	mov	r10,r9
8000204c:	12 9b       	mov	r11,r9
8000204e:	fe 7c 28 00 	mov	r12,-55296
80002052:	f0 1f 00 0e 	mcall	80002088 <config_dpi204+0x6c>
	spi_enable(DIP204_SPI);
80002056:	fe 7c 28 00 	mov	r12,-55296
8000205a:	f0 1f 00 0d 	mcall	8000208c <config_dpi204+0x70>
	spi_setupChipReg(DIP204_SPI, &spiOptions2, FOSC0);
8000205e:	e0 6a 1b 00 	mov	r10,6912
80002062:	ea 1a 00 b7 	orh	r10,0xb7
80002066:	1a 9b       	mov	r11,sp
80002068:	fe 7c 28 00 	mov	r12,-55296
8000206c:	f0 1f 00 09 	mcall	80002090 <config_dpi204+0x74>
}
80002070:	2f cd       	sub	sp,-16
80002072:	e3 cd 80 80 	ldm	sp++,r7,pc
80002076:	00 00       	add	r0,r0
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	8e 30       	ld.sh	r0,r7[0x6]
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	8e 40       	ld.sh	r0,r7[0x8]
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	2e 70       	sub	r0,-25
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	30 ce       	mov	lr,12
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	31 06       	mov	r6,16
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	32 5c       	mov	r12,37
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	31 a4       	mov	r4,26

80002094 <mASSERT_CS>:
 *
 * Overview:		See the documentation for spi_selectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mASSERT_CS(unsigned char channel){
80002094:	d4 01       	pushm	lr
	spi_selectChip(SPARE_SPI,channel);
80002096:	18 9b       	mov	r11,r12
80002098:	fe 7c 24 00 	mov	r12,-56320
8000209c:	f0 1f 00 02 	mcall	800020a4 <mASSERT_CS+0x10>
}
800020a0:	d8 02       	popm	pc
800020a2:	00 00       	add	r0,r0
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	31 32       	mov	r2,19

800020a8 <config_SPI_SPARE>:
 *
 * Note:            None.
 *
 * Example: 	    config_SPI_SPARE();
 ********************************************************************/
void config_SPI_SPARE(void){
800020a8:	eb cd 40 80 	pushm	r7,lr
800020ac:	20 4d       	sub	sp,16
.spck_delay   = 0,
.trans_delay  = 0,
.stay_act     = 0,
.spi_mode     = 0,
.modfdis      = 1
};
800020ae:	49 88       	lddpc	r8,8000210c <config_SPI_SPARE+0x64>
800020b0:	1a 97       	mov	r7,sp
800020b2:	f0 ea 00 00 	ld.d	r10,r8[0]
800020b6:	fa eb 00 00 	st.d	sp[0],r10
800020ba:	f0 e8 00 08 	ld.d	r8,r8[8]
800020be:	fa e9 00 08 	st.d	sp[8],r8

gpio_enable_module(SPARE_SPI_GPIO_MAP,
800020c2:	30 4b       	mov	r11,4
800020c4:	49 3c       	lddpc	r12,80002110 <config_SPI_SPARE+0x68>
800020c6:	f0 1f 00 14 	mcall	80002114 <config_SPI_SPARE+0x6c>
sizeof(SPARE_SPI_GPIO_MAP) / sizeof(SPARE_SPI_GPIO_MAP[0]));

spi_initMaster(SPARE_SPI,&spiOptions);
800020ca:	1a 9b       	mov	r11,sp
800020cc:	fe 7c 24 00 	mov	r12,-56320
800020d0:	f0 1f 00 12 	mcall	80002118 <config_SPI_SPARE+0x70>
spi_selectionMode(SPARE_SPI, 0, 0, 0);
800020d4:	30 09       	mov	r9,0
800020d6:	12 9a       	mov	r10,r9
800020d8:	12 9b       	mov	r11,r9
800020da:	fe 7c 24 00 	mov	r12,-56320
800020de:	f0 1f 00 10 	mcall	8000211c <config_SPI_SPARE+0x74>
spi_selectChip(SPARE_SPI,0);
800020e2:	30 0b       	mov	r11,0
800020e4:	fe 7c 24 00 	mov	r12,-56320
800020e8:	f0 1f 00 0e 	mcall	80002120 <config_SPI_SPARE+0x78>
spi_setupChipReg(SPARE_SPI, &spiOptions, FOSC0);
800020ec:	e0 6a 1b 00 	mov	r10,6912
800020f0:	ea 1a 00 b7 	orh	r10,0xb7
800020f4:	1a 9b       	mov	r11,sp
800020f6:	fe 7c 24 00 	mov	r12,-56320
800020fa:	f0 1f 00 0b 	mcall	80002124 <config_SPI_SPARE+0x7c>
spi_enable(SPARE_SPI);
800020fe:	fe 7c 24 00 	mov	r12,-56320
80002102:	f0 1f 00 0a 	mcall	80002128 <config_SPI_SPARE+0x80>
}
80002106:	2f cd       	sub	sp,-16
80002108:	e3 cd 80 80 	ldm	sp++,r7,pc
8000210c:	80 00       	ld.sh	r0,r0[0x0]
8000210e:	8e 20       	ld.sh	r0,r7[0x4]
80002110:	80 00       	ld.sh	r0,r0[0x0]
80002112:	8e 00       	ld.sh	r0,r7[0x0]
80002114:	80 00       	ld.sh	r0,r0[0x0]
80002116:	2e 70       	sub	r0,-25
80002118:	80 00       	ld.sh	r0,r0[0x0]
8000211a:	30 ce       	mov	lr,12
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	31 06       	mov	r6,16
80002120:	80 00       	ld.sh	r0,r0[0x0]
80002122:	31 32       	mov	r2,19
80002124:	80 00       	ld.sh	r0,r0[0x0]
80002126:	31 a4       	mov	r4,26
80002128:	80 00       	ld.sh	r0,r0[0x0]
8000212a:	32 5c       	mov	r12,37

8000212c <XferSPI_send>:
 *         			one data word to it. See the documentation for spi_write in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
PRIVATE UINT8 XferSPI_send( int Channel, UINT8 dat )
{
8000212c:	d4 01       	pushm	lr
	spi_write(SPARE_SPI, dat);
8000212e:	fe 7c 24 00 	mov	r12,-56320
80002132:	f0 1f 00 02 	mcall	80002138 <XferSPI_send+0xc>
	return 0;
}
80002136:	d8 0a       	popm	pc,r12=0
80002138:	80 00       	ld.sh	r0,r0[0x0]
8000213a:	32 62       	mov	r2,38

8000213c <ReadStatus2515>:
 * Overview:		Reads status from MCP2515
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 ReadStatus2515(int Channel)
{
8000213c:	d4 01       	pushm	lr
8000213e:	20 1d       	sub	sp,4
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_selectChip(SPARE_SPI,0);
80002140:	30 0b       	mov	r11,0
80002142:	fe 7c 24 00 	mov	r12,-56320
80002146:	f0 1f 00 0e 	mcall	8000217c <ReadStatus2515+0x40>

	spi_write(SPARE_SPI,CAN_RD_STATUS);
8000214a:	e0 6b 00 a0 	mov	r11,160
8000214e:	fe 7c 24 00 	mov	r12,-56320
80002152:	f0 1f 00 0c 	mcall	80002180 <ReadStatus2515+0x44>

	spi_write(SPARE_SPI,DUMMY_BYTE);
80002156:	30 0b       	mov	r11,0
80002158:	fe 7c 24 00 	mov	r12,-56320
8000215c:	f0 1f 00 09 	mcall	80002180 <ReadStatus2515+0x44>
	spi_read(SPARE_SPI,spidatareadpointer_temp);
80002160:	fa cb ff fe 	sub	r11,sp,-2
80002164:	fe 7c 24 00 	mov	r12,-56320
80002168:	f0 1f 00 07 	mcall	80002184 <ReadStatus2515+0x48>

	spi_unselectChip(SPARE_SPI,0);
8000216c:	30 0b       	mov	r11,0
8000216e:	fe 7c 24 00 	mov	r12,-56320
80002172:	f0 1f 00 06 	mcall	80002188 <ReadStatus2515+0x4c>

	return spidataread_temp;
}
80002176:	1b bc       	ld.ub	r12,sp[0x3]
80002178:	2f fd       	sub	sp,-4
8000217a:	d8 02       	popm	pc
8000217c:	80 00       	ld.sh	r0,r0[0x0]
8000217e:	31 32       	mov	r2,19
80002180:	80 00       	ld.sh	r0,r0[0x0]
80002182:	32 62       	mov	r2,38
80002184:	80 00       	ld.sh	r0,r0[0x0]
80002186:	32 86       	mov	r6,40
80002188:	80 00       	ld.sh	r0,r0[0x0]
8000218a:	31 7e       	mov	lr,23

8000218c <CANRxReady>:
 * Note:            None.
 *
 * Example:			CANRxReady(0);
 ********************************************************************/
inline Bool CANRxReady( int Channel )
{
8000218c:	d4 01       	pushm	lr
	return (ReadStatus2515(Channel)&0x3) != 0;
8000218e:	f0 1f 00 04 	mcall	8000219c <CANRxReady+0x10>
80002192:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
}
80002196:	5f 1c       	srne	r12
80002198:	d8 02       	popm	pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	21 3c       	sub	r12,19

800021a0 <mDEASSERT_CS>:
 *
 * Overview:		See the documentation for spi_unselectchip in spi.h
 *
 * Note:            spi.h has to be included.
 ********************************************************************/
void mDEASSERT_CS(unsigned char channel){
800021a0:	d4 01       	pushm	lr
	spi_unselectChip(SPARE_SPI,channel);
800021a2:	18 9b       	mov	r11,r12
800021a4:	fe 7c 24 00 	mov	r12,-56320
800021a8:	f0 1f 00 02 	mcall	800021b0 <mDEASSERT_CS+0x10>
}
800021ac:	d8 02       	popm	pc
800021ae:	00 00       	add	r0,r0
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	31 7e       	mov	lr,23

800021b4 <CAN2515ByteWrite>:
 * Note:            None.
 *
 * Example:         CANReset(0)
 ********************************************************************/
void CAN2515ByteWrite(int Channel, unsigned char addr, unsigned char value )
{
800021b4:	d4 21       	pushm	r4-r7,lr
800021b6:	18 97       	mov	r7,r12
800021b8:	16 95       	mov	r5,r11
800021ba:	14 94       	mov	r4,r10
	mASSERT_CS(Channel);
800021bc:	18 96       	mov	r6,r12
800021be:	5c 56       	castu.b	r6
800021c0:	0c 9c       	mov	r12,r6
800021c2:	f0 1f 00 0a 	mcall	800021e8 <CAN2515ByteWrite+0x34>
	XferSPI_send(Channel, CAN_WRITE);
800021c6:	30 2b       	mov	r11,2
800021c8:	0e 9c       	mov	r12,r7
800021ca:	f0 1f 00 09 	mcall	800021ec <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, addr);
800021ce:	0a 9b       	mov	r11,r5
800021d0:	0e 9c       	mov	r12,r7
800021d2:	f0 1f 00 07 	mcall	800021ec <CAN2515ByteWrite+0x38>
	XferSPI_send(Channel, value);
800021d6:	08 9b       	mov	r11,r4
800021d8:	0e 9c       	mov	r12,r7
800021da:	f0 1f 00 05 	mcall	800021ec <CAN2515ByteWrite+0x38>
	mDEASSERT_CS(Channel);
800021de:	0c 9c       	mov	r12,r6
800021e0:	f0 1f 00 04 	mcall	800021f0 <CAN2515ByteWrite+0x3c>
}
800021e4:	d8 22       	popm	r4-r7,pc
800021e6:	00 00       	add	r0,r0
800021e8:	80 00       	ld.sh	r0,r0[0x0]
800021ea:	20 94       	sub	r4,9
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	21 2c       	sub	r12,18
800021f0:	80 00       	ld.sh	r0,r0[0x0]
800021f2:	21 a0       	sub	r0,26

800021f4 <CAN2515SetRXB1Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB1Filters(Channel, 0, &Flt[2]);
 ********************************************************************/
void CAN2515SetRXB1Filters(int Channel, UINT16 Mask1, UINT16* pFlt2_5 )
{
800021f4:	eb cd 40 e0 	pushm	r5-r7,lr
800021f8:	18 97       	mov	r7,r12
800021fa:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM1SIDH, Mask1 >> 3);
800021fc:	16 96       	mov	r6,r11
800021fe:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
80002202:	32 4b       	mov	r11,36
80002204:	f0 1f 00 26 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXM1SIDL, Mask1 << 5);
80002208:	ec 0a 15 05 	lsl	r10,r6,0x5
8000220c:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002210:	32 5b       	mov	r11,37
80002212:	0e 9c       	mov	r12,r7
80002214:	f0 1f 00 22 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>

	// Set Four filters associated with RXB1

	CAN2515ByteWrite(Channel, RXF2SIDH, *pFlt2_5 >> 3);
80002218:	8a 8a       	ld.uh	r10,r5[0x0]
8000221a:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000221e:	30 8b       	mov	r11,8
80002220:	0e 9c       	mov	r12,r7
80002222:	f0 1f 00 1f 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002226:	0b 2a       	ld.uh	r10,r5++
80002228:	a5 7a       	lsl	r10,0x5
8000222a:	a3 ba       	sbr	r10,0x3
8000222c:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002230:	30 9b       	mov	r11,9
80002232:	0e 9c       	mov	r12,r7
80002234:	f0 1f 00 1a 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF3SIDH, *pFlt2_5 >> 3);
80002238:	8a 8a       	ld.uh	r10,r5[0x0]
8000223a:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000223e:	31 0b       	mov	r11,16
80002240:	0e 9c       	mov	r12,r7
80002242:	f0 1f 00 17 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002246:	0b 2a       	ld.uh	r10,r5++
80002248:	a5 7a       	lsl	r10,0x5
8000224a:	a3 ba       	sbr	r10,0x3
8000224c:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002250:	30 9b       	mov	r11,9
80002252:	0e 9c       	mov	r12,r7
80002254:	f0 1f 00 12 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF4SIDH, *pFlt2_5 >> 3);
80002258:	8a 8a       	ld.uh	r10,r5[0x0]
8000225a:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000225e:	31 4b       	mov	r11,20
80002260:	0e 9c       	mov	r12,r7
80002262:	f0 1f 00 0f 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002266:	0b 2a       	ld.uh	r10,r5++
80002268:	a5 7a       	lsl	r10,0x5
8000226a:	a3 ba       	sbr	r10,0x3
8000226c:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002270:	30 9b       	mov	r11,9
80002272:	0e 9c       	mov	r12,r7
80002274:	f0 1f 00 0a 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>

	pFlt2_5++;
	CAN2515ByteWrite(Channel, RXF5SIDH, *pFlt2_5 >> 3);
80002278:	8a 8a       	ld.uh	r10,r5[0x0]
8000227a:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
8000227e:	31 8b       	mov	r11,24
80002280:	0e 9c       	mov	r12,r7
80002282:	f0 1f 00 07 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>
	CAN2515ByteWrite(Channel, RXF2SIDL, (*pFlt2_5 << 5) |0x08 );
80002286:	8a 8a       	ld.uh	r10,r5[0x0]
80002288:	a5 7a       	lsl	r10,0x5
8000228a:	a3 ba       	sbr	r10,0x3
8000228c:	e2 1a 00 e8 	andl	r10,0xe8,COH
80002290:	30 9b       	mov	r11,9
80002292:	0e 9c       	mov	r12,r7
80002294:	f0 1f 00 02 	mcall	8000229c <CAN2515SetRXB1Filters+0xa8>
}
80002298:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000229c:	80 00       	ld.sh	r0,r0[0x0]
8000229e:	21 b4       	sub	r4,27

800022a0 <CAN2515SetRXB0Filters>:
 * Note:            None.
 *
 * Example:			CAN2515SetRXB0Filters(Channel, 0, Flt);
 ********************************************************************/
void CAN2515SetRXB0Filters(int Channel, UINT16 Mask0, UINT16* pFlt0_1 )
{
800022a0:	eb cd 40 e0 	pushm	r5-r7,lr
800022a4:	18 97       	mov	r7,r12
800022a6:	14 95       	mov	r5,r10
	CAN2515ByteWrite(Channel, RXM0SIDH, Mask0 >> 3);
800022a8:	16 96       	mov	r6,r11
800022aa:	f5 db c0 68 	bfextu	r10,r11,0x3,0x8
800022ae:	32 0b       	mov	r11,32
800022b0:	f0 1f 00 15 	mcall	80002304 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXM0SIDL, Mask0 << 5);
800022b4:	ec 0a 15 05 	lsl	r10,r6,0x5
800022b8:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022bc:	32 1b       	mov	r11,33
800022be:	0e 9c       	mov	r12,r7
800022c0:	f0 1f 00 11 	mcall	80002304 <CAN2515SetRXB0Filters+0x64>

	// Set two filters associated with RXB0

	CAN2515ByteWrite(Channel, RXF0SIDH, *pFlt0_1 >> 3);
800022c4:	8a 8a       	ld.uh	r10,r5[0x0]
800022c6:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022ca:	30 0b       	mov	r11,0
800022cc:	0e 9c       	mov	r12,r7
800022ce:	f0 1f 00 0e 	mcall	80002304 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF0SIDL, *pFlt0_1 << 5);
800022d2:	0b 1a       	ld.sh	r10,r5++
800022d4:	a5 7a       	lsl	r10,0x5
800022d6:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022da:	30 1b       	mov	r11,1
800022dc:	0e 9c       	mov	r12,r7
800022de:	f0 1f 00 0a 	mcall	80002304 <CAN2515SetRXB0Filters+0x64>


	pFlt0_1++;
	CAN2515ByteWrite(Channel, RXF1SIDH, *pFlt0_1 >> 3);
800022e2:	8a 8a       	ld.uh	r10,r5[0x0]
800022e4:	f5 da c0 68 	bfextu	r10,r10,0x3,0x8
800022e8:	30 4b       	mov	r11,4
800022ea:	0e 9c       	mov	r12,r7
800022ec:	f0 1f 00 06 	mcall	80002304 <CAN2515SetRXB0Filters+0x64>
	CAN2515ByteWrite(Channel, RXF1SIDL, *pFlt0_1 << 5);
800022f0:	0b 9a       	ld.ub	r10,r5[0x1]
800022f2:	a5 7a       	lsl	r10,0x5
800022f4:	e2 1a 00 e0 	andl	r10,0xe0,COH
800022f8:	30 5b       	mov	r11,5
800022fa:	0e 9c       	mov	r12,r7
800022fc:	f0 1f 00 02 	mcall	80002304 <CAN2515SetRXB0Filters+0x64>

}
80002300:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002304:	80 00       	ld.sh	r0,r0[0x0]
80002306:	21 b4       	sub	r4,27

80002308 <CANReset>:
 * Overview:		Sends a software reset commmand over spi port to MCP2515 chip
 *
 * Note:            None.
 ********************************************************************/
void CANReset(int Channel)
{
80002308:	eb cd 40 c0 	pushm	r6-r7,lr
8000230c:	18 96       	mov	r6,r12
	mASSERT_CS(Channel);
8000230e:	ef dc c0 08 	bfextu	r7,r12,0x0,0x8
80002312:	0e 9c       	mov	r12,r7
80002314:	f0 1f 00 06 	mcall	8000232c <CANReset+0x24>
	XferSPI_send(Channel, CAN_RESET);
80002318:	e0 6b 00 c0 	mov	r11,192
8000231c:	0c 9c       	mov	r12,r6
8000231e:	f0 1f 00 05 	mcall	80002330 <CANReset+0x28>
	mDEASSERT_CS(Channel);
80002322:	0e 9c       	mov	r12,r7
80002324:	f0 1f 00 04 	mcall	80002334 <CANReset+0x2c>
}
80002328:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000232c:	80 00       	ld.sh	r0,r0[0x0]
8000232e:	20 94       	sub	r4,9
80002330:	80 00       	ld.sh	r0,r0[0x0]
80002332:	21 2c       	sub	r12,18
80002334:	80 00       	ld.sh	r0,r0[0x0]
80002336:	21 a0       	sub	r0,26

80002338 <CAN2515ByteRead>:
 * Overview:		This function reads the value of a byte. It is used to read register values in e.g. the MCP2515 module
 *
 * Note:            None.
 ********************************************************************/
PRIVATE UINT8 CAN2515ByteRead(int Channel, unsigned char addr)
{
80002338:	eb cd 40 e0 	pushm	r5-r7,lr
8000233c:	20 1d       	sub	sp,4
8000233e:	18 97       	mov	r7,r12
80002340:	16 95       	mov	r5,r11
unsigned char tempdata;

	mASSERT_CS(Channel);
80002342:	18 96       	mov	r6,r12
80002344:	5c 56       	castu.b	r6
80002346:	0c 9c       	mov	r12,r6
80002348:	f0 1f 00 13 	mcall	80002394 <CAN2515ByteRead+0x5c>
	XferSPI_send(Channel, CAN_READ);
8000234c:	30 3b       	mov	r11,3
8000234e:	0e 9c       	mov	r12,r7
80002350:	f0 1f 00 12 	mcall	80002398 <CAN2515ByteRead+0x60>
	XferSPI_send(Channel, addr);
80002354:	0a 9b       	mov	r11,r5
80002356:	0e 9c       	mov	r12,r7
80002358:	f0 1f 00 10 	mcall	80002398 <CAN2515ByteRead+0x60>
{
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
8000235c:	30 0b       	mov	r11,0
8000235e:	fe 7c 24 00 	mov	r12,-56320
80002362:	f0 1f 00 0f 	mcall	8000239c <CAN2515ByteRead+0x64>
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
80002366:	fe 77 24 00 	mov	r7,-56320
8000236a:	c0 28       	rjmp	8000236e <CAN2515ByteRead+0x36>
		asm("NOP;");
8000236c:	d7 03       	nop
	unsigned short *spidatareadpointer_temp;
	unsigned short spidataread_temp;
	spidatareadpointer_temp=&spidataread_temp;

	spi_write(SPARE_SPI, DUMMY_BYTE);
	while(spi_readRegisterFullCheck(SPARE_SPI)==0){
8000236e:	0e 9c       	mov	r12,r7
80002370:	f0 1f 00 0c 	mcall	800023a0 <CAN2515ByteRead+0x68>
80002374:	cf c0       	breq	8000236c <CAN2515ByteRead+0x34>
		asm("NOP;");
	}
	spi_read(SPARE_SPI,spidatareadpointer_temp);
80002376:	fa cb ff fe 	sub	r11,sp,-2
8000237a:	fe 7c 24 00 	mov	r12,-56320
8000237e:	f0 1f 00 0a 	mcall	800023a4 <CAN2515ByteRead+0x6c>
	return spidataread_temp;
80002382:	1b b7       	ld.ub	r7,sp[0x3]

	mASSERT_CS(Channel);
	XferSPI_send(Channel, CAN_READ);
	XferSPI_send(Channel, addr);
	tempdata = XferSPI_receive(Channel,0);
	mDEASSERT_CS(Channel);
80002384:	0c 9c       	mov	r12,r6
80002386:	f0 1f 00 09 	mcall	800023a8 <CAN2515ByteRead+0x70>

	return tempdata;
}
8000238a:	0e 9c       	mov	r12,r7
8000238c:	2f fd       	sub	sp,-4
8000238e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002392:	00 00       	add	r0,r0
80002394:	80 00       	ld.sh	r0,r0[0x0]
80002396:	20 94       	sub	r4,9
80002398:	80 00       	ld.sh	r0,r0[0x0]
8000239a:	21 2c       	sub	r12,18
8000239c:	80 00       	ld.sh	r0,r0[0x0]
8000239e:	32 62       	mov	r2,38
800023a0:	80 00       	ld.sh	r0,r0[0x0]
800023a2:	32 7e       	mov	lr,39
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	32 86       	mov	r6,40
800023a8:	80 00       	ld.sh	r0,r0[0x0]
800023aa:	21 a0       	sub	r0,26

800023ac <CANEnable>:
 * Overview:		Sets the CAN bus speed and turns on the CAN controller.
 *
 * Note:            None.
 ********************************************************************/
void CANEnable( int Channel, int BusSpeed )
{
800023ac:	eb cd 40 80 	pushm	r7,lr
800023b0:	18 97       	mov	r7,r12
	// CNF1 -> 0x03 = 125kB. 0x01 = 250 kB, 0x00 = 500kB

	if (BusSpeed==10) // For 125 kB
800023b2:	58 ab       	cp.w	r11,10
800023b4:	c1 11       	brne	800023d6 <CANEnable+0x2a>
	{
		CAN2515ByteWrite(Channel, CNF1,0x03); //used to be: BusSpeed
800023b6:	30 3a       	mov	r10,3
800023b8:	32 ab       	mov	r11,42
800023ba:	f0 1f 00 30 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
800023be:	e0 6a 00 ac 	mov	r10,172
800023c2:	32 9b       	mov	r11,41
800023c4:	0e 9c       	mov	r12,r7
800023c6:	f0 1f 00 2d 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
800023ca:	30 7a       	mov	r10,7
800023cc:	32 8b       	mov	r11,40
800023ce:	0e 9c       	mov	r12,r7
800023d0:	f0 1f 00 2a 	mcall	80002478 <CANEnable+0xcc>
800023d4:	c3 68       	rjmp	80002440 <CANEnable+0x94>
	}
	else if (BusSpeed==7) // For 250 kB
800023d6:	58 7b       	cp.w	r11,7
800023d8:	c1 11       	brne	800023fa <CANEnable+0x4e>
	{
		CAN2515ByteWrite(Channel, CNF1,0x01); //used to be: BusSpeed
800023da:	30 1a       	mov	r10,1
800023dc:	32 ab       	mov	r11,42
800023de:	f0 1f 00 27 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
800023e2:	e0 6a 00 ac 	mov	r10,172
800023e6:	32 9b       	mov	r11,41
800023e8:	0e 9c       	mov	r12,r7
800023ea:	f0 1f 00 24 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
800023ee:	30 7a       	mov	r10,7
800023f0:	32 8b       	mov	r11,40
800023f2:	0e 9c       	mov	r12,r7
800023f4:	f0 1f 00 21 	mcall	80002478 <CANEnable+0xcc>
800023f8:	c2 48       	rjmp	80002440 <CANEnable+0x94>
	}
	else if(BusSpeed==5) // For 500 kB
800023fa:	58 5b       	cp.w	r11,5
800023fc:	c1 11       	brne	8000241e <CANEnable+0x72>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
800023fe:	30 0a       	mov	r10,0
80002400:	32 ab       	mov	r11,42
80002402:	f0 1f 00 1e 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0xac); //used to be: BusSpeed
80002406:	e0 6a 00 ac 	mov	r10,172
8000240a:	32 9b       	mov	r11,41
8000240c:	0e 9c       	mov	r12,r7
8000240e:	f0 1f 00 1b 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x07); //used to be: BusSpeed
80002412:	30 7a       	mov	r10,7
80002414:	32 8b       	mov	r11,40
80002416:	0e 9c       	mov	r12,r7
80002418:	f0 1f 00 18 	mcall	80002478 <CANEnable+0xcc>
8000241c:	c1 28       	rjmp	80002440 <CANEnable+0x94>

	}
	else if (BusSpeed==1) // For 1000 kB
8000241e:	58 1b       	cp.w	r11,1
80002420:	c1 01       	brne	80002440 <CANEnable+0x94>
	{
		CAN2515ByteWrite(Channel, CNF1,0x00); //used to be: BusSpeed
80002422:	30 0a       	mov	r10,0
80002424:	32 ab       	mov	r11,42
80002426:	f0 1f 00 15 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF2,0x91); //used to be: BusSpeed
8000242a:	e0 6a 00 91 	mov	r10,145
8000242e:	32 9b       	mov	r11,41
80002430:	0e 9c       	mov	r12,r7
80002432:	f0 1f 00 12 	mcall	80002478 <CANEnable+0xcc>
		CAN2515ByteWrite(Channel, CNF3,0x03); //used to be: BusSpeed
80002436:	30 3a       	mov	r10,3
80002438:	32 8b       	mov	r11,40
8000243a:	0e 9c       	mov	r12,r7
8000243c:	f0 1f 00 0f 	mcall	80002478 <CANEnable+0xcc>
	}

	//Interrupt on RXB0 - CANINTE
	CAN2515ByteWrite(Channel, CANINTE,0x03); // Interrupts are on
80002440:	30 3a       	mov	r10,3
80002442:	32 bb       	mov	r11,43
80002444:	0e 9c       	mov	r12,r7
80002446:	f0 1f 00 0d 	mcall	80002478 <CANEnable+0xcc>

	//Set NORMAL mode
	CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL  | CLKOUT_ENABLED);
8000244a:	30 4a       	mov	r10,4
8000244c:	30 fb       	mov	r11,15
8000244e:	0e 9c       	mov	r12,r7
80002450:	f0 1f 00 0a 	mcall	80002478 <CANEnable+0xcc>

	CAN2515ByteRead(Channel, CANSTAT); //dummy read to give 2515 time to switch to normal mode
80002454:	30 eb       	mov	r11,14
80002456:	0e 9c       	mov	r12,r7
80002458:	f0 1f 00 09 	mcall	8000247c <CANEnable+0xd0>

	if( (CAN2515ByteRead(Channel, CANSTAT) & 0xE0) != OPMODE_NORMAL )
8000245c:	30 eb       	mov	r11,14
8000245e:	0e 9c       	mov	r12,r7
80002460:	f0 1f 00 07 	mcall	8000247c <CANEnable+0xd0>
80002464:	e2 1c 00 e0 	andl	r12,0xe0,COH
80002468:	c0 60       	breq	80002474 <CANEnable+0xc8>
		CAN2515ByteWrite(Channel, CANCTRL,REQOP_NORMAL | CLKOUT_ENABLED);
8000246a:	30 4a       	mov	r10,4
8000246c:	30 fb       	mov	r11,15
8000246e:	0e 9c       	mov	r12,r7
80002470:	f0 1f 00 02 	mcall	80002478 <CANEnable+0xcc>
80002474:	e3 cd 80 80 	ldm	sp++,r7,pc
80002478:	80 00       	ld.sh	r0,r0[0x0]
8000247a:	21 b4       	sub	r4,27
8000247c:	80 00       	ld.sh	r0,r0[0x0]
8000247e:	23 38       	sub	r8,51

80002480 <InitializeCAN>:
 * Note:            None.
 *
 * Example:         InitializeCAN(0,CAN_125kbps)
 ********************************************************************/
void InitializeCAN( int Channel , int BusSpeed, UINT16 Mask, UINT16 Flt[6])
{
80002480:	d4 21       	pushm	r4-r7,lr
80002482:	18 97       	mov	r7,r12
80002484:	16 94       	mov	r4,r11
80002486:	14 96       	mov	r6,r10
80002488:	12 95       	mov	r5,r9
	CANReset(Channel);
8000248a:	f0 1f 00 0a 	mcall	800024b0 <InitializeCAN+0x30>
	CAN2515SetRXB0Filters(Channel, Mask, Flt);
8000248e:	5c 76       	castu.h	r6
80002490:	0a 9a       	mov	r10,r5
80002492:	0c 9b       	mov	r11,r6
80002494:	0e 9c       	mov	r12,r7
80002496:	f0 1f 00 08 	mcall	800024b4 <InitializeCAN+0x34>
	CAN2515SetRXB1Filters(Channel, Mask, &Flt[2]);
8000249a:	ea ca ff fc 	sub	r10,r5,-4
8000249e:	0c 9b       	mov	r11,r6
800024a0:	0e 9c       	mov	r12,r7
800024a2:	f0 1f 00 06 	mcall	800024b8 <InitializeCAN+0x38>
	CANEnable(Channel, BusSpeed);
800024a6:	08 9b       	mov	r11,r4
800024a8:	0e 9c       	mov	r12,r7
800024aa:	f0 1f 00 05 	mcall	800024bc <InitializeCAN+0x3c>
}
800024ae:	d8 22       	popm	r4-r7,pc
800024b0:	80 00       	ld.sh	r0,r0[0x0]
800024b2:	23 08       	sub	r8,48
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	22 a0       	sub	r0,42
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	21 f4       	sub	r4,31
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	23 ac       	sub	r12,58

800024c0 <CANSendMsg>:
					// Extended id
                    CANSendMsg( 0, 0x8ff, msg, 8, 0 );(no remote frame)
				    CANSendMsg( 0, 0x8ff, msg, 8, R );(remote frame)
 ********************************************************************/
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
800024c0:	eb cd 40 fe 	pushm	r1-r7,lr
800024c4:	18 96       	mov	r6,r12
800024c6:	16 93       	mov	r3,r11
800024c8:	14 94       	mov	r4,r10
800024ca:	12 92       	mov	r2,r9
800024cc:	10 91       	mov	r1,r8
800024ce:	30 07       	mov	r7,0
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
800024d0:	33 05       	mov	r5,48
800024d2:	c1 78       	rjmp	80002500 <CANSendMsg+0x40>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800024d4:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800024d8:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800024dc:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800024e0:	14 38       	cp.w	r8,r10
800024e2:	e0 88 00 08 	brls	800024f2 <CANSendMsg+0x32>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024e6:	12 38       	cp.w	r8,r9
800024e8:	fe 98 ff fa 	brls	800024dc <CANSendMsg+0x1c>
800024ec:	12 3a       	cp.w	r10,r9
800024ee:	c7 63       	brcs	800025da <CANSendMsg+0x11a>
800024f0:	cf 6b       	rjmp	800024dc <CANSendMsg+0x1c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024f2:	12 38       	cp.w	r8,r9
800024f4:	e0 8b 00 73 	brhi	800025da <CANSendMsg+0x11a>
800024f8:	12 3a       	cp.w	r10,r9
800024fa:	c7 03       	brcs	800025da <CANSendMsg+0x11a>
800024fc:	cf 0b       	rjmp	800024dc <CANSendMsg+0x1c>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
800024fe:	2f f7       	sub	r7,-1
Bool CANSendMsg( int Channel, UINT32 IdentifierS, UINT8* MsgS, UINT8 MsgSizeS, int r )
{
	int WaitCntr = 0;

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
80002500:	0a 9b       	mov	r11,r5
80002502:	0c 9c       	mov	r12,r6
80002504:	f0 1f 00 38 	mcall	800025e4 <CANSendMsg+0x124>
80002508:	e2 1c 00 08 	andl	r12,0x8,COH
8000250c:	ce 41       	brne	800024d4 <CANSendMsg+0x14>
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
			return FALSE;
	}
	if ((IdentifierS>>11)==0) // Standard id
8000250e:	e6 08 16 0b 	lsr	r8,r3,0xb
80002512:	c1 01       	brne	80002532 <CANSendMsg+0x72>
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 3) & 0xff );    //Set TXB0 SIDH
80002514:	f5 d3 c0 68 	bfextu	r10,r3,0x3,0x8
80002518:	33 1b       	mov	r11,49
8000251a:	0c 9c       	mov	r12,r6
8000251c:	f0 1f 00 33 	mcall	800025e8 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,((IdentifierS << 5) & 0xe0));    //Set TXB0 SIDL
80002520:	e6 0a 15 05 	lsl	r10,r3,0x5
80002524:	e2 1a 00 e0 	andl	r10,0xe0,COH
80002528:	33 2b       	mov	r11,50
8000252a:	0c 9c       	mov	r12,r6
8000252c:	f0 1f 00 2f 	mcall	800025e8 <CANSendMsg+0x128>
80002530:	c2 18       	rjmp	80002572 <CANSendMsg+0xb2>
	}
	else // Extended id
	{
		CAN2515ByteWrite(Channel, TXB0SIDH, (IdentifierS >> 21) & 0xff );    //Set TXB0 SIDH
80002532:	f5 d3 c2 a8 	bfextu	r10,r3,0x15,0x8
80002536:	33 1b       	mov	r11,49
80002538:	0c 9c       	mov	r12,r6
8000253a:	f0 1f 00 2c 	mcall	800025e8 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0SIDL,(((IdentifierS >> 13)& 0xe0) | ((IdentifierS>>16) & 0x03) )| 0x08 ); //Set TXB0 SIDL
8000253e:	e6 08 16 0d 	lsr	r8,r3,0xd
80002542:	f5 d3 c2 02 	bfextu	r10,r3,0x10,0x2
80002546:	e2 18 00 e0 	andl	r8,0xe0,COH
8000254a:	10 4a       	or	r10,r8
8000254c:	a3 ba       	sbr	r10,0x3
8000254e:	e2 1a 00 eb 	andl	r10,0xeb,COH
80002552:	33 2b       	mov	r11,50
80002554:	0c 9c       	mov	r12,r6
80002556:	f0 1f 00 25 	mcall	800025e8 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID8, (IdentifierS>>8) & 0xff);
8000255a:	f5 d3 c1 08 	bfextu	r10,r3,0x8,0x8
8000255e:	33 3b       	mov	r11,51
80002560:	0c 9c       	mov	r12,r6
80002562:	f0 1f 00 22 	mcall	800025e8 <CANSendMsg+0x128>
		CAN2515ByteWrite(Channel, TXB0EID0, (IdentifierS & 0xff));
80002566:	f5 d3 c0 08 	bfextu	r10,r3,0x0,0x8
8000256a:	33 4b       	mov	r11,52
8000256c:	0c 9c       	mov	r12,r6
8000256e:	f0 1f 00 1f 	mcall	800025e8 <CANSendMsg+0x128>
80002572:	30 85       	mov	r5,8
80002574:	ea 02 18 00 	cp.b	r2,r5
80002578:	e4 05 17 80 	movls	r5,r2
8000257c:	f9 b5 0b 08 	movhi	r5,8
	}

	if( MsgSizeS > 8 )
		MsgSizeS = 8;

	if( r==82) //Remote frame
80002580:	e0 41 00 52 	cp.w	r1,82
80002584:	c1 01       	brne	800025a4 <CANSendMsg+0xe4>
		{
			CAN2515ByteWrite(Channel, TXB0DLC, (MsgSizeS |=0x40));  //Set DLC
80002586:	a7 a5       	sbr	r5,0x6
80002588:	5c 55       	castu.b	r5
8000258a:	0a 9a       	mov	r10,r5
8000258c:	33 5b       	mov	r11,53
8000258e:	0c 9c       	mov	r12,r6
80002590:	f0 1f 00 16 	mcall	800025e8 <CANSendMsg+0x128>
			dip204_set_cursor_position(17,4);
80002594:	30 4b       	mov	r11,4
80002596:	31 1c       	mov	r12,17
80002598:	f0 1f 00 15 	mcall	800025ec <CANSendMsg+0x12c>
			dip204_printf_string("Re F");
8000259c:	49 5c       	lddpc	r12,800025f0 <CANSendMsg+0x130>
8000259e:	f0 1f 00 16 	mcall	800025f4 <CANSendMsg+0x134>
800025a2:	c0 68       	rjmp	800025ae <CANSendMsg+0xee>
		}
	else // No remote frame
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
800025a4:	0a 9a       	mov	r10,r5
800025a6:	33 5b       	mov	r11,53
800025a8:	0c 9c       	mov	r12,r6
800025aa:	f0 1f 00 10 	mcall	800025e8 <CANSendMsg+0x128>
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
800025ae:	58 05       	cp.w	r5,0
800025b0:	e0 8a 00 0e 	brle	800025cc <CANSendMsg+0x10c>
800025b4:	30 07       	mov	r7,0
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );
800025b6:	0e 9b       	mov	r11,r7
800025b8:	2c ab       	sub	r11,-54
800025ba:	e8 07 07 0a 	ld.ub	r10,r4[r7]
800025be:	5c 5b       	castu.b	r11
800025c0:	0c 9c       	mov	r12,r6
800025c2:	f0 1f 00 0a 	mcall	800025e8 <CANSendMsg+0x128>
		{
		CAN2515ByteWrite(Channel, TXB0DLC, MsgSizeS);  //Set DLC
		}

	int temp;
	for( temp = 0; temp < MsgSizeS; temp++ )
800025c6:	2f f7       	sub	r7,-1
800025c8:	0a 37       	cp.w	r7,r5
800025ca:	cf 65       	brlt	800025b6 <CANSendMsg+0xf6>
	  CAN2515ByteWrite( Channel, TXB0D0+temp, MsgS[temp] );

	CAN2515ByteWrite( Channel, TXB0CTRL, 0x08 ); //Start Transmission.
800025cc:	30 8a       	mov	r10,8
800025ce:	33 0b       	mov	r11,48
800025d0:	0c 9c       	mov	r12,r6
800025d2:	f0 1f 00 06 	mcall	800025e8 <CANSendMsg+0x128>
800025d6:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1

	// wait for TXB0 to get ready.  If not ready within XMIT_TIMEOUT ms,then return false
	while( CAN2515ByteRead( Channel, TXB0CTRL ) & 0x08 ) //TXREQ == 1
	{
		delay_ms( 1 );
		if( WaitCntr++ >= XMIT_TIMEOUT )
800025da:	e0 47 00 64 	cp.w	r7,100
800025de:	c9 01       	brne	800024fe <CANSendMsg+0x3e>
800025e0:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
800025e4:	80 00       	ld.sh	r0,r0[0x0]
800025e6:	23 38       	sub	r8,51
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	21 b4       	sub	r4,27
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	2b 0c       	sub	r12,-80
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	8e 74       	ld.sh	r4,r7[0xe]
800025f4:	80 00       	ld.sh	r0,r0[0x0]
800025f6:	2a 74       	sub	r4,-89

800025f8 <CANGetMsg>:
 * Note:            None.
 *
 * Example:         CANGetMsg(0, &Ident, msg, &mSize );
 ********************************************************************/
Bool CANGetMsg( int Channel, UINT32* pIdentifier, UINT8* Msg, UINT8* pMsgSize )
{
800025f8:	d4 31       	pushm	r0-r7,lr
800025fa:	18 95       	mov	r5,r12
800025fc:	16 92       	mov	r2,r11
800025fe:	14 93       	mov	r3,r10
80002600:	12 94       	mov	r4,r9
        int temp;
        UINT8 loc, S1, S2, S3, S4;

        temp = ReadStatus2515(Channel);
80002602:	f0 1f 00 55 	mcall	80002754 <CANGetMsg+0x15c>

        if( (temp & 3) == 0 )
80002606:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8000260a:	e0 80 00 a3 	breq	80002750 <CANGetMsg+0x158>
            return FALSE;
        temp&=0x03;
        if(temp==1){
8000260e:	58 1c       	cp.w	r12,1
80002610:	c0 31       	brne	80002616 <CANGetMsg+0x1e>
80002612:	36 16       	mov	r6,97
80002614:	c0 58       	rjmp	8000261e <CANGetMsg+0x26>
            loc=0x61;
        }
        else if (temp==2){
80002616:	58 2c       	cp.w	r12,2
80002618:	e0 81 00 9c 	brne	80002750 <CANGetMsg+0x158>
8000261c:	37 16       	mov	r6,113
        }
        else{
            return FALSE;
        }

        S1=CAN2515ByteRead(Channel, loc);
8000261e:	0c 9b       	mov	r11,r6
80002620:	0a 9c       	mov	r12,r5
80002622:	f0 1f 00 4e 	mcall	80002758 <CANGetMsg+0x160>
80002626:	18 91       	mov	r1,r12
        S2=CAN2515ByteRead(Channel, loc+1);
80002628:	ec cb ff ff 	sub	r11,r6,-1
8000262c:	5c 5b       	castu.b	r11
8000262e:	0a 9c       	mov	r12,r5
80002630:	f0 1f 00 4a 	mcall	80002758 <CANGetMsg+0x160>
80002634:	18 97       	mov	r7,r12
        S3=CAN2515ByteRead(Channel, loc+2);
80002636:	ec cb ff fe 	sub	r11,r6,-2
8000263a:	5c 5b       	castu.b	r11
8000263c:	0a 9c       	mov	r12,r5
8000263e:	f0 1f 00 47 	mcall	80002758 <CANGetMsg+0x160>
80002642:	18 90       	mov	r0,r12
        S4=CAN2515ByteRead(Channel, loc+3);
80002644:	ec cb ff fd 	sub	r11,r6,-3
80002648:	5c 5b       	castu.b	r11
8000264a:	0a 9c       	mov	r12,r5
8000264c:	f0 1f 00 43 	mcall	80002758 <CANGetMsg+0x160>

        if (((S2>>3)&0x01)==0) //format the 11 bit identifier
80002650:	f1 d7 c0 68 	bfextu	r8,r7,0x3,0x8
80002654:	f3 d8 c0 01 	bfextu	r9,r8,0x0,0x1
80002658:	c0 d1       	brne	80002672 <CANGetMsg+0x7a>
        {
            *pIdentifier = S1<<3 | S2>>5;
8000265a:	ef d7 c0 a8 	bfextu	r7,r7,0x5,0x8
8000265e:	ef e1 10 31 	or	r1,r7,r1<<0x3
80002662:	85 01       	st.w	r2[0x0],r1
            LED_On(LED0);
80002664:	30 1c       	mov	r12,1
80002666:	f0 1f 00 3e 	mcall	8000275c <CANGetMsg+0x164>
            LED_Off(LED1);
8000266a:	30 2c       	mov	r12,2
8000266c:	f0 1f 00 3d 	mcall	80002760 <CANGetMsg+0x168>
80002670:	c1 48       	rjmp	80002698 <CANGetMsg+0xa0>

        }
        else if (((S2>>3)&0x01)==1) //format the 29 bit identifier
        {
            *pIdentifier =  (S1<<21 |((S2>>3 & 0x1c)|(S2&0x03))<<16 | S3 <<8 |  S4);
80002672:	a9 60       	lsl	r0,0x8
80002674:	e1 e1 11 51 	or	r1,r0,r1<<0x15
80002678:	e3 ec 10 0c 	or	r12,r1,r12
8000267c:	e2 18 00 1c 	andl	r8,0x1c,COH
80002680:	ef d7 c0 02 	bfextu	r7,r7,0x0,0x2
80002684:	0e 48       	or	r8,r7
80002686:	f9 e8 11 0c 	or	r12,r12,r8<<0x10
8000268a:	85 0c       	st.w	r2[0x0],r12
            LED_On(LED1);
8000268c:	30 2c       	mov	r12,2
8000268e:	f0 1f 00 34 	mcall	8000275c <CANGetMsg+0x164>
            LED_Off(LED0);
80002692:	30 1c       	mov	r12,1
80002694:	f0 1f 00 33 	mcall	80002760 <CANGetMsg+0x168>
        }

        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length
80002698:	ec cb ff fc 	sub	r11,r6,-4
8000269c:	5c 5b       	castu.b	r11
8000269e:	0a 9c       	mov	r12,r5
800026a0:	f0 1f 00 2e 	mcall	80002758 <CANGetMsg+0x160>
800026a4:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
800026a8:	a8 8c       	st.b	r4[0x0],r12

        if(*pMsgSize>8)
800026aa:	30 88       	mov	r8,8
800026ac:	f0 0c 18 00 	cp.b	r12,r8
800026b0:	e0 88 00 07 	brls	800026be <CANGetMsg+0xc6>
            *pMsgSize = 8;
800026b4:	a8 88       	st.b	r4[0x0],r8
800026b6:	2f b6       	sub	r6,-5
800026b8:	5c 56       	castu.b	r6
800026ba:	30 07       	mov	r7,0
800026bc:	c0 58       	rjmp	800026c6 <CANGetMsg+0xce>

        for( temp = 0; temp < *pMsgSize; temp++ ){
800026be:	58 0c       	cp.w	r12,0
800026c0:	fe 99 ff fb 	brgt	800026b6 <CANGetMsg+0xbe>
800026c4:	c0 e8       	rjmp	800026e0 <CANGetMsg+0xe8>
            Msg[temp] = CAN2515ByteRead(Channel, loc+5+temp);
800026c6:	0c 9b       	mov	r11,r6
800026c8:	0a 9c       	mov	r12,r5
800026ca:	f0 1f 00 24 	mcall	80002758 <CANGetMsg+0x160>
800026ce:	e6 07 0b 0c 	st.b	r3[r7],r12
        *pMsgSize = CAN2515ByteRead(Channel, loc+4) & 0x0F; //Data Length

        if(*pMsgSize>8)
            *pMsgSize = 8;

        for( temp = 0; temp < *pMsgSize; temp++ ){
800026d2:	2f f7       	sub	r7,-1
800026d4:	2f f6       	sub	r6,-1
800026d6:	5c 56       	castu.b	r6
800026d8:	09 88       	ld.ub	r8,r4[0x0]
800026da:	0e 38       	cp.w	r8,r7
800026dc:	fe 99 ff f5 	brgt	800026c6 <CANGetMsg+0xce>

        // Here the RXRTR bit is check to see if a remote frame was received.
        // Here is the identifier of the remote frame being set. When a remote frame messages with the same identifier as defined here the
        //node will respond with a user predefined message.
        //UINT8 RemoteFrameId=User defined;
        LED_Off(LED2);
800026e0:	30 4c       	mov	r12,4
800026e2:	f0 1f 00 20 	mcall	80002760 <CANGetMsg+0x168>
        if ( ((CAN2515ByteRead( Channel, RXB0CTRL ) & 0x08) || (CAN2515ByteRead( Channel, RXB1CTRL ) & 0x08)) && *pIdentifier==RemoteFrameId)
800026e6:	36 0b       	mov	r11,96
800026e8:	0a 9c       	mov	r12,r5
800026ea:	f0 1f 00 1c 	mcall	80002758 <CANGetMsg+0x160>
800026ee:	e2 1c 00 08 	andl	r12,0x8,COH
800026f2:	c0 81       	brne	80002702 <CANGetMsg+0x10a>
800026f4:	37 0b       	mov	r11,112
800026f6:	0a 9c       	mov	r12,r5
800026f8:	f0 1f 00 18 	mcall	80002758 <CANGetMsg+0x160>
800026fc:	e2 1c 00 08 	andl	r12,0x8,COH
80002700:	c1 d0       	breq	8000273a <CANGetMsg+0x142>
80002702:	64 08       	ld.w	r8,r2[0x0]
80002704:	58 18       	cp.w	r8,1
80002706:	c1 a1       	brne	8000273a <CANGetMsg+0x142>
                    {
                    Msg[0] = 0;
80002708:	30 08       	mov	r8,0
8000270a:	a6 88       	st.b	r3[0x0],r8
                    Msg[1] = 1;
8000270c:	30 18       	mov	r8,1
8000270e:	a6 98       	st.b	r3[0x1],r8
                    Msg[2] = 2;
80002710:	30 28       	mov	r8,2
80002712:	a6 a8       	st.b	r3[0x2],r8
                    Msg[3] = 3;
80002714:	30 38       	mov	r8,3
80002716:	a6 b8       	st.b	r3[0x3],r8

                    CANSendMsg( Channel,*pIdentifier, Msg, 4, 0 );
80002718:	30 08       	mov	r8,0
8000271a:	30 49       	mov	r9,4
8000271c:	06 9a       	mov	r10,r3
8000271e:	64 0b       	ld.w	r11,r2[0x0]
80002720:	0a 9c       	mov	r12,r5
80002722:	f0 1f 00 11 	mcall	80002764 <CANGetMsg+0x16c>
                    dip204_set_cursor_position(17,4);
80002726:	30 4b       	mov	r11,4
80002728:	31 1c       	mov	r12,17
8000272a:	f0 1f 00 10 	mcall	80002768 <CANGetMsg+0x170>
                    dip204_printf_string("Re F");
8000272e:	49 0c       	lddpc	r12,8000276c <CANGetMsg+0x174>
80002730:	f0 1f 00 10 	mcall	80002770 <CANGetMsg+0x178>
                    LED_On(LED2);
80002734:	30 4c       	mov	r12,4
80002736:	f0 1f 00 0a 	mcall	8000275c <CANGetMsg+0x164>
                }

        //clear CANINTF RX01F_RESET=0x00. To be able to receive new messages
        CAN2515ByteWrite(0,CANINTF,RX0IF_RESET);
8000273a:	30 0a       	mov	r10,0
8000273c:	32 cb       	mov	r11,44
8000273e:	14 9c       	mov	r12,r10
80002740:	f0 1f 00 0d 	mcall	80002774 <CANGetMsg+0x17c>
        CAN2515ByteWrite(0,CANINTF,RX1IF_RESET);
80002744:	30 0a       	mov	r10,0
80002746:	32 cb       	mov	r11,44
80002748:	14 9c       	mov	r12,r10
8000274a:	f0 1f 00 0b 	mcall	80002774 <CANGetMsg+0x17c>
8000274e:	da 3a       	popm	r0-r7,pc,r12=1

    return TRUE;
80002750:	d8 3a       	popm	r0-r7,pc,r12=0
80002752:	00 00       	add	r0,r0
80002754:	80 00       	ld.sh	r0,r0[0x0]
80002756:	21 3c       	sub	r12,19
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	23 38       	sub	r8,51
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	28 e0       	sub	r0,-114
80002760:	80 00       	ld.sh	r0,r0[0x0]
80002762:	29 30       	sub	r0,-109
80002764:	80 00       	ld.sh	r0,r0[0x0]
80002766:	24 c0       	sub	r0,76
80002768:	80 00       	ld.sh	r0,r0[0x0]
8000276a:	2b 0c       	sub	r12,-80
8000276c:	80 00       	ld.sh	r0,r0[0x0]
8000276e:	8e 74       	ld.sh	r4,r7[0xe]
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	2a 74       	sub	r4,-89
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	21 b4       	sub	r4,27

80002778 <main>:
#define CAN_125kbps 10

UINT32 Ident;
UINT8 msg[8], mSize;

int main(void) {
80002778:	d4 31       	pushm	r0-r7,lr
8000277a:	20 3d       	sub	sp,12
	//spidatareadpointer=&spidataread;
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);
8000277c:	30 3a       	mov	r10,3
8000277e:	e0 6b 1b 00 	mov	r11,6912
80002782:	ea 1b 00 b7 	orh	r11,0xb7
80002786:	fe 7c 0c 00 	mov	r12,-62464
8000278a:	f0 1f 00 40 	mcall	80002888 <main+0x110>
	
	// Configures the MCP2515 SPI communication.
	config_SPI_SPARE();
8000278e:	f0 1f 00 40 	mcall	8000288c <main+0x114>

	// Enables receive interrupts.
	Disable_global_interrupt();
80002792:	d3 03       	ssrf	0x10
	INTC_init_interrupts();
80002794:	f0 1f 00 3f 	mcall	80002890 <main+0x118>
	Enable_global_interrupt();
80002798:	d5 03       	csrf	0x10
	
	// Delay to let the Oscillator get started
	delay_init( FOSC0 );
	
	// Initializes the display
	config_dpi204();
8000279a:	f0 1f 00 3f 	mcall	80002894 <main+0x11c>
	dip204_init(100,1);
8000279e:	30 1b       	mov	r11,1
800027a0:	36 4c       	mov	r12,100
800027a2:	f0 1f 00 3e 	mcall	80002898 <main+0x120>
	dip204_clear_display();
800027a6:	f0 1f 00 3e 	mcall	8000289c <main+0x124>
	
	UINT16 Mask = 0; 
	UINT16 flt = 0;
	UINT16 Flt[] = {flt,flt,flt,flt,flt,flt};
800027aa:	30 08       	mov	r8,0
800027ac:	ba 08       	st.h	sp[0x0],r8
800027ae:	ba 18       	st.h	sp[0x2],r8
800027b0:	ba 28       	st.h	sp[0x4],r8
800027b2:	ba 38       	st.h	sp[0x6],r8
800027b4:	ba 48       	st.h	sp[0x8],r8
800027b6:	ba 58       	st.h	sp[0xa],r8
	InitializeCAN(0, CAN_250kbps, Mask, Flt);
800027b8:	1a 99       	mov	r9,sp
800027ba:	30 0a       	mov	r10,0
800027bc:	30 7b       	mov	r11,7
800027be:	14 9c       	mov	r12,r10
800027c0:	f0 1f 00 38 	mcall	800028a0 <main+0x128>
	


	while(1){
		//Clear memory contents
		ClearMessages(msg);
800027c4:	4b 87       	lddpc	r7,800028a4 <main+0x12c>
		//Read any message available
		if(CANRxReady(0)){
800027c6:	30 06       	mov	r6,0
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
800027c8:	4b 84       	lddpc	r4,800028a8 <main+0x130>
800027ca:	4b 95       	lddpc	r5,800028ac <main+0x134>
			{	

				if( Ident == 0x00001000)
				{
					dip204_clear_display();
					dip204_set_cursor_position(1, 1);
800027cc:	30 13       	mov	r3,1
					dip204_printf_string("Rx ID:");
					dip204_set_cursor_position(1,2);
800027ce:	30 21       	mov	r1,2
					dip204_printf_string("Temp:");
					dip204_set_cursor_position(1, 3);
800027d0:	30 30       	mov	r0,3
	


	while(1){
		//Clear memory contents
		ClearMessages(msg);
800027d2:	0e 9c       	mov	r12,r7
800027d4:	f0 1f 00 37 	mcall	800028b0 <main+0x138>
		//Read any message available
		if(CANRxReady(0)){
800027d8:	0c 9c       	mov	r12,r6
800027da:	f0 1f 00 37 	mcall	800028b4 <main+0x13c>
800027de:	cf a0       	breq	800027d2 <main+0x5a>
			if( CANGetMsg(0, &Ident, msg, &mSize )) // Gets message and returns //TRUE if message received.
800027e0:	08 99       	mov	r9,r4
800027e2:	0e 9a       	mov	r10,r7
800027e4:	0a 9b       	mov	r11,r5
800027e6:	0c 9c       	mov	r12,r6
800027e8:	f0 1f 00 34 	mcall	800028b8 <main+0x140>
800027ec:	cf 30       	breq	800027d2 <main+0x5a>
			{	

				if( Ident == 0x00001000)
800027ee:	6a 08       	ld.w	r8,r5[0x0]
800027f0:	e0 48 10 00 	cp.w	r8,4096
800027f4:	ce f1       	brne	800027d2 <main+0x5a>
				{
					dip204_clear_display();
800027f6:	f0 1f 00 2a 	mcall	8000289c <main+0x124>
					dip204_set_cursor_position(1, 1);
800027fa:	06 9b       	mov	r11,r3
800027fc:	06 9c       	mov	r12,r3
800027fe:	f0 1f 00 30 	mcall	800028bc <main+0x144>
					dip204_printf_string("Rx ID:");
80002802:	4b 0c       	lddpc	r12,800028c0 <main+0x148>
80002804:	f0 1f 00 30 	mcall	800028c4 <main+0x14c>
					dip204_set_cursor_position(1,2);
80002808:	02 9b       	mov	r11,r1
8000280a:	06 9c       	mov	r12,r3
8000280c:	f0 1f 00 2c 	mcall	800028bc <main+0x144>
					dip204_printf_string("Temp:");
80002810:	4a ec       	lddpc	r12,800028c8 <main+0x150>
80002812:	f0 1f 00 2d 	mcall	800028c4 <main+0x14c>
					dip204_set_cursor_position(1, 3);
80002816:	00 9b       	mov	r11,r0
80002818:	06 9c       	mov	r12,r3
8000281a:	f0 1f 00 29 	mcall	800028bc <main+0x144>
					dip204_printf_string("Light:");
8000281e:	4a cc       	lddpc	r12,800028cc <main+0x154>
80002820:	f0 1f 00 29 	mcall	800028c4 <main+0x14c>
					dip204_set_cursor_position(1, 4);
80002824:	30 4b       	mov	r11,4
80002826:	06 9c       	mov	r12,r3
80002828:	f0 1f 00 25 	mcall	800028bc <main+0x144>
					dip204_printf_string("Pot:");
8000282c:	4a 9c       	lddpc	r12,800028d0 <main+0x158>
8000282e:	f0 1f 00 26 	mcall	800028c4 <main+0x14c>
					dip204_hide_cursor();
80002832:	f0 1f 00 29 	mcall	800028d4 <main+0x15c>
					dip204_set_cursor_position(9, 1);
80002836:	06 9b       	mov	r11,r3
80002838:	30 9c       	mov	r12,9
8000283a:	f0 1f 00 21 	mcall	800028bc <main+0x144>
					dip204_printf_string("%x", Ident);
8000283e:	6a 08       	ld.w	r8,r5[0x0]
80002840:	1a d8       	st.w	--sp,r8
80002842:	4a 6c       	lddpc	r12,800028d8 <main+0x160>
80002844:	f0 1f 00 20 	mcall	800028c4 <main+0x14c>
					dip204_set_cursor_position(9, 2);
80002848:	02 9b       	mov	r11,r1
8000284a:	30 9c       	mov	r12,9
8000284c:	f0 1f 00 1c 	mcall	800028bc <main+0x144>
					dip204_printf_string("%d", msg[1]);
80002850:	4a 32       	lddpc	r2,800028dc <main+0x164>
80002852:	0f 98       	ld.ub	r8,r7[0x1]
80002854:	1a d8       	st.w	--sp,r8
80002856:	04 9c       	mov	r12,r2
80002858:	f0 1f 00 1b 	mcall	800028c4 <main+0x14c>
					dip204_set_cursor_position(9, 3);
8000285c:	00 9b       	mov	r11,r0
8000285e:	30 9c       	mov	r12,9
80002860:	f0 1f 00 17 	mcall	800028bc <main+0x144>
					dip204_printf_string("%d", msg[3]);
80002864:	0f b8       	ld.ub	r8,r7[0x3]
80002866:	1a d8       	st.w	--sp,r8
80002868:	04 9c       	mov	r12,r2
8000286a:	f0 1f 00 17 	mcall	800028c4 <main+0x14c>
					dip204_set_cursor_position(9, 4);
8000286e:	30 4b       	mov	r11,4
80002870:	30 9c       	mov	r12,9
80002872:	f0 1f 00 13 	mcall	800028bc <main+0x144>
					dip204_printf_string("%d", msg[4]);
80002876:	0f c8       	ld.ub	r8,r7[0x4]
80002878:	1a d8       	st.w	--sp,r8
8000287a:	04 9c       	mov	r12,r2
8000287c:	f0 1f 00 12 	mcall	800028c4 <main+0x14c>
					dip204_hide_cursor();
80002880:	f0 1f 00 15 	mcall	800028d4 <main+0x15c>
80002884:	2f cd       	sub	sp,-16
80002886:	ca 6b       	rjmp	800027d2 <main+0x5a>
80002888:	80 00       	ld.sh	r0,r0[0x0]
8000288a:	2f f4       	sub	r4,-1
8000288c:	80 00       	ld.sh	r0,r0[0x0]
8000288e:	20 a8       	sub	r8,10
80002890:	80 00       	ld.sh	r0,r0[0x0]
80002892:	2e dc       	sub	r12,-19
80002894:	80 00       	ld.sh	r0,r0[0x0]
80002896:	20 1c       	sub	r12,1
80002898:	80 00       	ld.sh	r0,r0[0x0]
8000289a:	2b f4       	sub	r4,-65
8000289c:	80 00       	ld.sh	r0,r0[0x0]
8000289e:	2b 98       	sub	r8,-71
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	24 80       	sub	r0,72
800028a4:	00 00       	add	r0,r0
800028a6:	06 60       	and	r0,r3
800028a8:	00 00       	add	r0,r0
800028aa:	06 68       	and	r8,r3
800028ac:	00 00       	add	r0,r0
800028ae:	06 6c       	and	r12,r3
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	20 08       	sub	r8,0
800028b4:	80 00       	ld.sh	r0,r0[0x0]
800028b6:	21 8c       	sub	r12,24
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	25 f8       	sub	r8,95
800028bc:	80 00       	ld.sh	r0,r0[0x0]
800028be:	2b 0c       	sub	r12,-80
800028c0:	80 00       	ld.sh	r0,r0[0x0]
800028c2:	8e 7c       	ld.sh	r12,r7[0xe]
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	2a 74       	sub	r4,-89
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	8e 84       	ld.uh	r4,r7[0x0]
800028cc:	80 00       	ld.sh	r0,r0[0x0]
800028ce:	8e 8c       	ld.uh	r12,r7[0x0]
800028d0:	80 00       	ld.sh	r0,r0[0x0]
800028d2:	8e 94       	ld.uh	r4,r7[0x2]
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	2b 68       	sub	r8,-74
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	8e 60       	ld.sh	r0,r7[0xc]
800028dc:	80 00       	ld.sh	r0,r0[0x0]
800028de:	8e 9c       	ld.uh	r12,r7[0x2]

800028e0 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800028e0:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
800028e4:	49 18       	lddpc	r8,80002928 <LED_On+0x48>
800028e6:	70 09       	ld.w	r9,r8[0x0]
800028e8:	f9 e9 10 09 	or	r9,r12,r9
800028ec:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800028ee:	58 0c       	cp.w	r12,0
800028f0:	5e 0c       	reteq	r12
800028f2:	48 f8       	lddpc	r8,8000292c <LED_On+0x4c>
800028f4:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
800028f6:	18 9a       	mov	r10,r12
800028f8:	5c 9a       	brev	r10
800028fa:	f4 0a 12 00 	clz	r10,r10
800028fe:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002900:	f4 09 15 04 	lsl	r9,r10,0x4
80002904:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002906:	70 09       	ld.w	r9,r8[0x0]
80002908:	a9 69       	lsl	r9,0x8
8000290a:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000290e:	70 1b       	ld.w	r11,r8[0x4]
80002910:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002914:	70 1b       	ld.w	r11,r8[0x4]
80002916:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000291a:	70 1b       	ld.w	r11,r8[0x4]
8000291c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000291e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002922:	ce a1       	brne	800028f6 <LED_On+0x16>
80002924:	5e fc       	retal	r12
80002926:	00 00       	add	r0,r0
80002928:	00 00       	add	r0,r0
8000292a:	00 08       	add	r8,r0
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	8e a0       	ld.uh	r0,r7[0x4]

80002930 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80002930:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002934:	49 28       	lddpc	r8,8000297c <LED_Off+0x4c>
80002936:	70 09       	ld.w	r9,r8[0x0]
80002938:	f8 0a 11 ff 	rsub	r10,r12,-1
8000293c:	f5 e9 00 09 	and	r9,r10,r9
80002940:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002942:	58 0c       	cp.w	r12,0
80002944:	5e 0c       	reteq	r12
80002946:	48 f8       	lddpc	r8,80002980 <LED_Off+0x50>
80002948:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000294a:	18 9a       	mov	r10,r12
8000294c:	5c 9a       	brev	r10
8000294e:	f4 0a 12 00 	clz	r10,r10
80002952:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002954:	f4 09 15 04 	lsl	r9,r10,0x4
80002958:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000295a:	70 09       	ld.w	r9,r8[0x0]
8000295c:	a9 69       	lsl	r9,0x8
8000295e:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002962:	70 1b       	ld.w	r11,r8[0x4]
80002964:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002968:	70 1b       	ld.w	r11,r8[0x4]
8000296a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000296e:	70 1b       	ld.w	r11,r8[0x4]
80002970:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002972:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002976:	ce a1       	brne	8000294a <LED_Off+0x1a>
80002978:	5e fc       	retal	r12
8000297a:	00 00       	add	r0,r0
8000297c:	00 00       	add	r0,r0
8000297e:	00 08       	add	r8,r0
80002980:	80 00       	ld.sh	r0,r0[0x0]
80002982:	8e a0       	ld.uh	r0,r7[0x4]

80002984 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002984:	d4 01       	pushm	lr
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002986:	30 2b       	mov	r11,2
80002988:	fe 7c 28 00 	mov	r12,-55296
8000298c:	f0 1f 00 02 	mcall	80002994 <dip204_select+0x10>
}
80002990:	d8 02       	popm	pc
80002992:	00 00       	add	r0,r0
80002994:	80 00       	ld.sh	r0,r0[0x0]
80002996:	31 32       	mov	r2,19

80002998 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002998:	eb cd 40 80 	pushm	r7,lr
  unsigned char reverse;

  switch (byte)
8000299c:	f8 c8 ff f8 	sub	r8,r12,-8
800029a0:	30 69       	mov	r9,6
800029a2:	f2 08 18 00 	cp.b	r8,r9
800029a6:	e0 8b 00 0f 	brhi	800029c4 <dip204_write_byte+0x2c>
800029aa:	30 19       	mov	r9,1
800029ac:	f2 08 09 48 	lsl	r8,r9,r8
800029b0:	e2 18 00 55 	andl	r8,0x55,COH
800029b4:	c0 80       	breq	800029c4 <dip204_write_byte+0x2c>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
800029b6:	18 9b       	mov	r11,r12
800029b8:	fe 7c 28 00 	mov	r12,-55296
800029bc:	f0 1f 00 0c 	mcall	800029ec <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      break;
800029c0:	e3 cd 80 80 	ldm	sp++,r7,pc
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
800029c4:	5c 9c       	brev	r12
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
800029c6:	f8 07 16 18 	lsr	r7,r12,0x18
800029ca:	0e 9b       	mov	r11,r7
800029cc:	e2 1b 00 f0 	andl	r11,0xf0,COH
800029d0:	fe 7c 28 00 	mov	r12,-55296
800029d4:	f0 1f 00 06 	mcall	800029ec <dip204_write_byte+0x54>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
800029d8:	ee 0b 15 04 	lsl	r11,r7,0x4
800029dc:	e2 1b 00 f0 	andl	r11,0xf0,COH
800029e0:	fe 7c 28 00 	mov	r12,-55296
800029e4:	f0 1f 00 02 	mcall	800029ec <dip204_write_byte+0x54>
800029e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800029ec:	80 00       	ld.sh	r0,r0[0x0]
800029ee:	32 62       	mov	r2,38

800029f0 <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
800029f0:	eb cd 40 c0 	pushm	r6-r7,lr
800029f4:	20 1d       	sub	sp,4
800029f6:	18 96       	mov	r6,r12
  unsigned short reverse = 0x00;
800029f8:	fa c7 ff fc 	sub	r7,sp,-4
800029fc:	30 08       	mov	r8,0
800029fe:	0e e8       	st.h	--r7,r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002a00:	30 0b       	mov	r11,0
80002a02:	fe 7c 28 00 	mov	r12,-55296
80002a06:	f0 1f 00 08 	mcall	80002a24 <dip204_read_byte+0x34>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002a0a:	0e 9b       	mov	r11,r7
80002a0c:	fe 7c 28 00 	mov	r12,-55296
80002a10:	f0 1f 00 06 	mcall	80002a28 <dip204_read_byte+0x38>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002a14:	1b b8       	ld.ub	r8,sp[0x3]
80002a16:	5c 98       	brev	r8
80002a18:	b9 88       	lsr	r8,0x18
80002a1a:	ac 88       	st.b	r6[0x0],r8
}
80002a1c:	2f fd       	sub	sp,-4
80002a1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a22:	00 00       	add	r0,r0
80002a24:	80 00       	ld.sh	r0,r0[0x0]
80002a26:	32 62       	mov	r2,38
80002a28:	80 00       	ld.sh	r0,r0[0x0]
80002a2a:	32 86       	mov	r6,40

80002a2c <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002a2c:	eb cd 40 c0 	pushm	r6-r7,lr
80002a30:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002a32:	fa c7 ff fc 	sub	r7,sp,-4
80002a36:	30 08       	mov	r8,0
80002a38:	0e f8       	st.b	--r7,r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002a3a:	e0 6c 00 fc 	mov	r12,252
80002a3e:	f0 1f 00 07 	mcall	80002a58 <dip204_wait_busy+0x2c>
  /* read next byte */
  do {
  dip204_read_byte(&status);
  /* keep D7 to know status */
  }while (status & 0x80);
80002a42:	30 06       	mov	r6,0

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002a44:	0e 9c       	mov	r12,r7
80002a46:	f0 1f 00 06 	mcall	80002a5c <dip204_wait_busy+0x30>
  /* keep D7 to know status */
  }while (status & 0x80);
80002a4a:	1b b8       	ld.ub	r8,sp[0x3]
80002a4c:	ec 08 18 00 	cp.b	r8,r6
80002a50:	cf a5       	brlt	80002a44 <dip204_wait_busy+0x18>
}
80002a52:	2f fd       	sub	sp,-4
80002a54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002a58:	80 00       	ld.sh	r0,r0[0x0]
80002a5a:	29 98       	sub	r8,-103
80002a5c:	80 00       	ld.sh	r0,r0[0x0]
80002a5e:	29 f0       	sub	r0,-97

80002a60 <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002a60:	d4 01       	pushm	lr
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002a62:	30 2b       	mov	r11,2
80002a64:	fe 7c 28 00 	mov	r12,-55296
80002a68:	f0 1f 00 02 	mcall	80002a70 <dip204_unselect+0x10>
  Assert( SPI_OK==spi_status );
}
80002a6c:	d8 02       	popm	pc
80002a6e:	00 00       	add	r0,r0
80002a70:	80 00       	ld.sh	r0,r0[0x0]
80002a72:	31 7e       	mov	lr,23

80002a74 <dip204_printf_string>:
  dip204_unselect();
}


void dip204_printf_string(const char *format, ...)
{
80002a74:	d4 21       	pushm	r4-r7,lr
80002a76:	20 6d       	sub	sp,24
  va_list arg;
  char string[21];
  unsigned char i=0;

  va_start(arg, format);
  i = vsprintf(string, format, arg);
80002a78:	fa ca ff d4 	sub	r10,sp,-44
80002a7c:	18 9b       	mov	r11,r12
80002a7e:	1a 9c       	mov	r12,sp
80002a80:	f0 1f 00 1e 	mcall	80002af8 <dip204_printf_string+0x84>
80002a84:	5c 5c       	castu.b	r12
  while (i < sizeof(string) - 1) string[i++] = '\0';
80002a86:	31 38       	mov	r8,19
80002a88:	f0 0c 18 00 	cp.b	r12,r8
80002a8c:	e0 8b 00 0e 	brhi	80002aa8 <dip204_printf_string+0x34>
80002a90:	30 0a       	mov	r10,0
80002a92:	31 49       	mov	r9,20
80002a94:	fa c8 ff e8 	sub	r8,sp,-24
80002a98:	18 08       	add	r8,r12
80002a9a:	f1 6a ff e8 	st.b	r8[-24],r10
80002a9e:	2f fc       	sub	r12,-1
80002aa0:	5c 5c       	castu.b	r12
80002aa2:	f2 0c 18 00 	cp.b	r12,r9
80002aa6:	cf 71       	brne	80002a94 <dip204_printf_string+0x20>
  va_end(arg);
  dip204_select();
80002aa8:	f0 1f 00 15 	mcall	80002afc <dip204_printf_string+0x88>
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002aac:	30 08       	mov	r8,0
80002aae:	1b 89       	ld.ub	r9,sp[0x0]
80002ab0:	f0 09 18 00 	cp.b	r9,r8
80002ab4:	c1 e0       	breq	80002af0 <dip204_printf_string+0x7c>
80002ab6:	30 06       	mov	r6,0
80002ab8:	0c 97       	mov	r7,r6
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002aba:	e0 64 00 fa 	mov	r4,250
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002abe:	10 95       	mov	r5,r8
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002ac0:	08 9c       	mov	r12,r4
80002ac2:	f0 1f 00 10 	mcall	80002b00 <dip204_printf_string+0x8c>
    /* Send byte */
    dip204_write_byte(string[i]);
80002ac6:	fa c8 ff e8 	sub	r8,sp,-24
80002aca:	f0 06 00 06 	add	r6,r8,r6
80002ace:	ed 3c ff e8 	ld.ub	r12,r6[-24]
80002ad2:	f0 1f 00 0c 	mcall	80002b00 <dip204_printf_string+0x8c>
    /* go to next char */
    i++;
80002ad6:	2f f7       	sub	r7,-1
80002ad8:	5c 57       	castu.b	r7
    dip204_wait_busy();
80002ada:	f0 1f 00 0b 	mcall	80002b04 <dip204_printf_string+0x90>
  while (i < sizeof(string) - 1) string[i++] = '\0';
  va_end(arg);
  dip204_select();
  /* for all chars in string */
  i = 0;
  while(string[i]!='\0')
80002ade:	0e 96       	mov	r6,r7
80002ae0:	fa c8 ff e8 	sub	r8,sp,-24
80002ae4:	0e 08       	add	r8,r7
80002ae6:	f1 38 ff e8 	ld.ub	r8,r8[-24]
80002aea:	ea 08 18 00 	cp.b	r8,r5
80002aee:	ce 91       	brne	80002ac0 <dip204_printf_string+0x4c>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002af0:	f0 1f 00 06 	mcall	80002b08 <dip204_printf_string+0x94>
}
80002af4:	2f ad       	sub	sp,-24
80002af6:	d8 22       	popm	r4-r7,pc
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	34 5c       	mov	r12,69
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	29 84       	sub	r4,-104
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	29 98       	sub	r8,-103
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	2a 2c       	sub	r12,-94
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	2a 60       	sub	r0,-90

80002b0c <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002b0c:	eb cd 40 c0 	pushm	r6-r7,lr
80002b10:	18 96       	mov	r6,r12
80002b12:	16 97       	mov	r7,r11
  unsigned char address = 0;

  dip204_select();
80002b14:	f0 1f 00 11 	mcall	80002b58 <dip204_set_cursor_position+0x4c>
  if ((column <= 20) && (line <= 4))
80002b18:	31 48       	mov	r8,20
80002b1a:	f0 06 18 00 	cp.b	r6,r8
80002b1e:	5f 89       	srls	r9
80002b20:	30 48       	mov	r8,4
80002b22:	f0 07 18 00 	cp.b	r7,r8
80002b26:	5f 88       	srls	r8
80002b28:	f3 e8 00 08 	and	r8,r9,r8
80002b2c:	c0 31       	brne	80002b32 <dip204_set_cursor_position+0x26>
80002b2e:	30 06       	mov	r6,0
80002b30:	c0 68       	rjmp	80002b3c <dip204_set_cursor_position+0x30>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002b32:	28 16       	sub	r6,-127
80002b34:	20 17       	sub	r7,1
80002b36:	a5 77       	lsl	r7,0x5
80002b38:	0e 06       	add	r6,r7
80002b3a:	5c 56       	castu.b	r6
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b3c:	e0 6c 00 f8 	mov	r12,248
80002b40:	f0 1f 00 07 	mcall	80002b5c <dip204_set_cursor_position+0x50>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002b44:	0c 9c       	mov	r12,r6
80002b46:	f0 1f 00 06 	mcall	80002b5c <dip204_set_cursor_position+0x50>
  dip204_wait_busy();
80002b4a:	f0 1f 00 06 	mcall	80002b60 <dip204_set_cursor_position+0x54>
  dip204_unselect();
80002b4e:	f0 1f 00 06 	mcall	80002b64 <dip204_set_cursor_position+0x58>
}
80002b52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002b56:	00 00       	add	r0,r0
80002b58:	80 00       	ld.sh	r0,r0[0x0]
80002b5a:	29 84       	sub	r4,-104
80002b5c:	80 00       	ld.sh	r0,r0[0x0]
80002b5e:	29 98       	sub	r8,-103
80002b60:	80 00       	ld.sh	r0,r0[0x0]
80002b62:	2a 2c       	sub	r12,-94
80002b64:	80 00       	ld.sh	r0,r0[0x0]
80002b66:	2a 60       	sub	r0,-90

80002b68 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002b68:	d4 01       	pushm	lr
  /* select the LCD chip */
  dip204_select();
80002b6a:	f0 1f 00 08 	mcall	80002b88 <dip204_hide_cursor+0x20>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b6e:	e0 6c 00 f8 	mov	r12,248
80002b72:	f0 1f 00 07 	mcall	80002b8c <dip204_hide_cursor+0x24>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002b76:	30 cc       	mov	r12,12
80002b78:	f0 1f 00 05 	mcall	80002b8c <dip204_hide_cursor+0x24>
  dip204_wait_busy();
80002b7c:	f0 1f 00 05 	mcall	80002b90 <dip204_hide_cursor+0x28>
  /* unselect chip */
  dip204_unselect();
80002b80:	f0 1f 00 05 	mcall	80002b94 <dip204_hide_cursor+0x2c>
}
80002b84:	d8 02       	popm	pc
80002b86:	00 00       	add	r0,r0
80002b88:	80 00       	ld.sh	r0,r0[0x0]
80002b8a:	29 84       	sub	r4,-104
80002b8c:	80 00       	ld.sh	r0,r0[0x0]
80002b8e:	29 98       	sub	r8,-103
80002b90:	80 00       	ld.sh	r0,r0[0x0]
80002b92:	2a 2c       	sub	r12,-94
80002b94:	80 00       	ld.sh	r0,r0[0x0]
80002b96:	2a 60       	sub	r0,-90

80002b98 <dip204_clear_display>:
  dip204_unselect();
}


void dip204_clear_display(void)
{
80002b98:	d4 01       	pushm	lr
  dip204_select();
80002b9a:	f0 1f 00 13 	mcall	80002be4 <dip204_clear_display+0x4c>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b9e:	e0 6c 00 f8 	mov	r12,248
80002ba2:	f0 1f 00 12 	mcall	80002be8 <dip204_clear_display+0x50>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002ba6:	30 1c       	mov	r12,1
80002ba8:	f0 1f 00 10 	mcall	80002be8 <dip204_clear_display+0x50>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002bac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002bb0:	e0 69 bb 80 	mov	r9,48000
80002bb4:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002bb8:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002bbc:	14 38       	cp.w	r8,r10
80002bbe:	e0 88 00 08 	brls	80002bce <dip204_clear_display+0x36>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002bc2:	12 38       	cp.w	r8,r9
80002bc4:	fe 98 ff fa 	brls	80002bb8 <dip204_clear_display+0x20>
80002bc8:	12 3a       	cp.w	r10,r9
80002bca:	c0 73       	brcs	80002bd8 <dip204_clear_display+0x40>
80002bcc:	cf 6b       	rjmp	80002bb8 <dip204_clear_display+0x20>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002bce:	12 38       	cp.w	r8,r9
80002bd0:	e0 8b 00 04 	brhi	80002bd8 <dip204_clear_display+0x40>
80002bd4:	12 3a       	cp.w	r10,r9
80002bd6:	cf 12       	brcc	80002bb8 <dip204_clear_display+0x20>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002bd8:	f0 1f 00 05 	mcall	80002bec <dip204_clear_display+0x54>
  dip204_unselect();
80002bdc:	f0 1f 00 05 	mcall	80002bf0 <dip204_clear_display+0x58>
}
80002be0:	d8 02       	popm	pc
80002be2:	00 00       	add	r0,r0
80002be4:	80 00       	ld.sh	r0,r0[0x0]
80002be6:	29 84       	sub	r4,-104
80002be8:	80 00       	ld.sh	r0,r0[0x0]
80002bea:	29 98       	sub	r8,-103
80002bec:	80 00       	ld.sh	r0,r0[0x0]
80002bee:	2a 2c       	sub	r12,-94
80002bf0:	80 00       	ld.sh	r0,r0[0x0]
80002bf2:	2a 60       	sub	r0,-90

80002bf4 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002bf4:	eb cd 40 80 	pushm	r7,lr
80002bf8:	20 4d       	sub	sp,16
80002bfa:	16 97       	mov	r7,r11
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002bfc:	58 1c       	cp.w	r12,1
80002bfe:	c3 01       	brne	80002c5e <dip204_init+0x6a>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002c00:	30 69       	mov	r9,6
80002c02:	4f a8       	lddpc	r8,80002de8 <dip204_init+0x1f4>
80002c04:	91 09       	st.w	r8[0x0],r9
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002c06:	30 2b       	mov	r11,2
80002c08:	33 2c       	mov	r12,50
80002c0a:	f0 1f 00 79 	mcall	80002dec <dip204_init+0x1f8>

    // PWM controller configuration
    pwm_opt.diva=0;
80002c0e:	30 08       	mov	r8,0
80002c10:	50 18       	stdsp	sp[0x4],r8
    pwm_opt.divb=0;
80002c12:	50 08       	stdsp	sp[0x0],r8
    pwm_opt.prea=0;
80002c14:	50 38       	stdsp	sp[0xc],r8
    pwm_opt.preb=0;
80002c16:	50 28       	stdsp	sp[0x8],r8

    pwm_init(&pwm_opt);
80002c18:	1a 9c       	mov	r12,sp
80002c1a:	f0 1f 00 76 	mcall	80002df0 <dip204_init+0x1fc>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002c1e:	58 07       	cp.w	r7,0
80002c20:	f9 b7 01 31 	movne	r7,49
80002c24:	f9 b7 00 01 	moveq	r7,1
80002c28:	4f 38       	lddpc	r8,80002df4 <dip204_init+0x200>
80002c2a:	b0 07       	st.h	r8[0x0],r7
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002c2c:	4f 3b       	lddpc	r11,80002df8 <dip204_init+0x204>
80002c2e:	76 08       	ld.w	r8,r11[0x0]
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
80002c30:	e0 18 fc ff 	andl	r8,0xfcff
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002c34:	ab a8       	sbr	r8,0xa
80002c36:	30 89       	mov	r9,8
80002c38:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
80002c3c:	97 08       	st.w	r11[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
80002c3e:	97 17       	st.w	r11[0x4],r7
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
80002c40:	33 28       	mov	r8,50
80002c42:	97 28       	st.w	r11[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
80002c44:	30 08       	mov	r8,0
80002c46:	97 48       	st.w	r11[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
80002c48:	4e 87       	lddpc	r7,80002de8 <dip204_init+0x1f4>
80002c4a:	6e 0c       	ld.w	r12,r7[0x0]
80002c4c:	f0 1f 00 6c 	mcall	80002dfc <dip204_init+0x208>
    // start PWM
    pwm_start_channels(1 << channel_id);
80002c50:	6e 08       	ld.w	r8,r7[0x0]
80002c52:	30 1c       	mov	r12,1
80002c54:	f8 08 09 4c 	lsl	r12,r12,r8
80002c58:	f0 1f 00 6a 	mcall	80002e00 <dip204_init+0x20c>
80002c5c:	c0 a8       	rjmp	80002c70 <dip204_init+0x7c>
  }
  else
  {
    if (backlight_on)
80002c5e:	58 0b       	cp.w	r11,0
80002c60:	c0 50       	breq	80002c6a <dip204_init+0x76>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
80002c62:	33 2c       	mov	r12,50
80002c64:	f0 1f 00 68 	mcall	80002e04 <dip204_init+0x210>
80002c68:	c0 48       	rjmp	80002c70 <dip204_init+0x7c>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002c6a:	33 2c       	mov	r12,50
80002c6c:	f0 1f 00 67 	mcall	80002e08 <dip204_init+0x214>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c70:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c74:	e2 79 a9 80 	mov	r9,240000
80002c78:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c7c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c80:	14 38       	cp.w	r8,r10
80002c82:	e0 88 00 08 	brls	80002c92 <dip204_init+0x9e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002c86:	12 38       	cp.w	r8,r9
80002c88:	fe 98 ff fa 	brls	80002c7c <dip204_init+0x88>
80002c8c:	12 3a       	cp.w	r10,r9
80002c8e:	c6 e3       	brcs	80002d6a <dip204_init+0x176>
80002c90:	cf 6b       	rjmp	80002c7c <dip204_init+0x88>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002c92:	12 38       	cp.w	r8,r9
80002c94:	e0 8b 00 6b 	brhi	80002d6a <dip204_init+0x176>
80002c98:	12 3a       	cp.w	r10,r9
80002c9a:	c6 83       	brcs	80002d6a <dip204_init+0x176>
80002c9c:	cf 0b       	rjmp	80002c7c <dip204_init+0x88>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c9e:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ca2:	14 38       	cp.w	r8,r10
80002ca4:	e0 88 00 08 	brls	80002cb4 <dip204_init+0xc0>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ca8:	12 38       	cp.w	r8,r9
80002caa:	fe 98 ff fa 	brls	80002c9e <dip204_init+0xaa>
80002cae:	12 3a       	cp.w	r10,r9
80002cb0:	c6 b3       	brcs	80002d86 <dip204_init+0x192>
80002cb2:	cf 6b       	rjmp	80002c9e <dip204_init+0xaa>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cb4:	12 38       	cp.w	r8,r9
80002cb6:	e0 8b 00 68 	brhi	80002d86 <dip204_init+0x192>
80002cba:	12 3a       	cp.w	r10,r9
80002cbc:	c6 53       	brcs	80002d86 <dip204_init+0x192>
80002cbe:	cf 0b       	rjmp	80002c9e <dip204_init+0xaa>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002cc0:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002cc4:	14 38       	cp.w	r8,r10
80002cc6:	e0 88 00 08 	brls	80002cd6 <dip204_init+0xe2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cca:	12 38       	cp.w	r8,r9
80002ccc:	fe 98 ff fa 	brls	80002cc0 <dip204_init+0xcc>
80002cd0:	12 3a       	cp.w	r10,r9
80002cd2:	c6 23       	brcs	80002d96 <dip204_init+0x1a2>
80002cd4:	cf 6b       	rjmp	80002cc0 <dip204_init+0xcc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cd6:	12 38       	cp.w	r8,r9
80002cd8:	e0 8b 00 5f 	brhi	80002d96 <dip204_init+0x1a2>
80002cdc:	12 3a       	cp.w	r10,r9
80002cde:	c5 c3       	brcs	80002d96 <dip204_init+0x1a2>
80002ce0:	cf 0b       	rjmp	80002cc0 <dip204_init+0xcc>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002ce2:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ce6:	14 38       	cp.w	r8,r10
80002ce8:	e0 88 00 08 	brls	80002cf8 <dip204_init+0x104>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cec:	12 38       	cp.w	r8,r9
80002cee:	fe 98 ff fa 	brls	80002ce2 <dip204_init+0xee>
80002cf2:	12 3a       	cp.w	r10,r9
80002cf4:	c5 93       	brcs	80002da6 <dip204_init+0x1b2>
80002cf6:	cf 6b       	rjmp	80002ce2 <dip204_init+0xee>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cf8:	12 38       	cp.w	r8,r9
80002cfa:	e0 8b 00 56 	brhi	80002da6 <dip204_init+0x1b2>
80002cfe:	12 3a       	cp.w	r10,r9
80002d00:	c5 33       	brcs	80002da6 <dip204_init+0x1b2>
80002d02:	cf 0b       	rjmp	80002ce2 <dip204_init+0xee>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d04:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d08:	14 38       	cp.w	r8,r10
80002d0a:	e0 88 00 08 	brls	80002d1a <dip204_init+0x126>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d0e:	12 38       	cp.w	r8,r9
80002d10:	fe 98 ff fa 	brls	80002d04 <dip204_init+0x110>
80002d14:	12 3a       	cp.w	r10,r9
80002d16:	c5 03       	brcs	80002db6 <dip204_init+0x1c2>
80002d18:	cf 6b       	rjmp	80002d04 <dip204_init+0x110>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d1a:	12 38       	cp.w	r8,r9
80002d1c:	e0 8b 00 4d 	brhi	80002db6 <dip204_init+0x1c2>
80002d20:	12 3a       	cp.w	r10,r9
80002d22:	c4 a3       	brcs	80002db6 <dip204_init+0x1c2>
80002d24:	cf 0b       	rjmp	80002d04 <dip204_init+0x110>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d26:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d2a:	14 38       	cp.w	r8,r10
80002d2c:	e0 88 00 08 	brls	80002d3c <dip204_init+0x148>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d30:	12 38       	cp.w	r8,r9
80002d32:	fe 98 ff fa 	brls	80002d26 <dip204_init+0x132>
80002d36:	12 3a       	cp.w	r10,r9
80002d38:	c4 93       	brcs	80002dca <dip204_init+0x1d6>
80002d3a:	cf 6b       	rjmp	80002d26 <dip204_init+0x132>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d3c:	12 38       	cp.w	r8,r9
80002d3e:	e0 8b 00 46 	brhi	80002dca <dip204_init+0x1d6>
80002d42:	12 3a       	cp.w	r10,r9
80002d44:	c4 33       	brcs	80002dca <dip204_init+0x1d6>
80002d46:	cf 0b       	rjmp	80002d26 <dip204_init+0x132>
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002d48:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002d4c:	14 38       	cp.w	r8,r10
80002d4e:	e0 88 00 08 	brls	80002d5e <dip204_init+0x16a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002d52:	12 38       	cp.w	r8,r9
80002d54:	fe 98 ff fa 	brls	80002d48 <dip204_init+0x154>
80002d58:	12 3a       	cp.w	r10,r9
80002d5a:	c4 03       	brcs	80002dda <dip204_init+0x1e6>
80002d5c:	cf 6b       	rjmp	80002d48 <dip204_init+0x154>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002d5e:	12 38       	cp.w	r8,r9
80002d60:	e0 8b 00 3d 	brhi	80002dda <dip204_init+0x1e6>
80002d64:	12 3a       	cp.w	r10,r9
80002d66:	c3 a3       	brcs	80002dda <dip204_init+0x1e6>
80002d68:	cf 0b       	rjmp	80002d48 <dip204_init+0x154>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
80002d6a:	f0 1f 00 29 	mcall	80002e0c <dip204_init+0x218>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002d6e:	e0 6c 00 f8 	mov	r12,248
80002d72:	f0 1f 00 28 	mcall	80002e10 <dip204_init+0x21c>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002d76:	33 4c       	mov	r12,52
80002d78:	f0 1f 00 26 	mcall	80002e10 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d7c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d80:	f0 ca d1 20 	sub	r10,r8,-12000
80002d84:	c8 db       	rjmp	80002c9e <dip204_init+0xaa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
80002d86:	30 9c       	mov	r12,9
80002d88:	f0 1f 00 22 	mcall	80002e10 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d8c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002d90:	f0 ca d1 20 	sub	r10,r8,-12000
80002d94:	c9 6b       	rjmp	80002cc0 <dip204_init+0xcc>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002d96:	33 0c       	mov	r12,48
80002d98:	f0 1f 00 1e 	mcall	80002e10 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002d9c:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002da0:	f0 ca d1 20 	sub	r10,r8,-12000
80002da4:	c9 fb       	rjmp	80002ce2 <dip204_init+0xee>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002da6:	30 fc       	mov	r12,15
80002da8:	f0 1f 00 1a 	mcall	80002e10 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002dac:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002db0:	f0 ca d1 20 	sub	r10,r8,-12000
80002db4:	ca 8b       	rjmp	80002d04 <dip204_init+0x110>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
80002db6:	30 1c       	mov	r12,1
80002db8:	f0 1f 00 16 	mcall	80002e10 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002dbc:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002dc0:	e0 69 ea 60 	mov	r9,60000
80002dc4:	f0 09 00 0a 	add	r10,r8,r9
80002dc8:	ca fb       	rjmp	80002d26 <dip204_init+0x132>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002dca:	30 6c       	mov	r12,6
80002dcc:	f0 1f 00 11 	mcall	80002e10 <dip204_init+0x21c>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002dd0:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002dd4:	f0 ca d1 20 	sub	r10,r8,-12000
80002dd8:	cb 8b       	rjmp	80002d48 <dip204_init+0x154>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002dda:	f0 1f 00 0f 	mcall	80002e14 <dip204_init+0x220>
  // unselect chip
  dip204_unselect();
80002dde:	f0 1f 00 0f 	mcall	80002e18 <dip204_init+0x224>
}
80002de2:	2f cd       	sub	sp,-16
80002de4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002de8:	00 00       	add	r0,r0
80002dea:	00 0c       	add	r12,r0
80002dec:	80 00       	ld.sh	r0,r0[0x0]
80002dee:	2e 1c       	sub	r12,-31
80002df0:	80 00       	ld.sh	r0,r0[0x0]
80002df2:	30 68       	mov	r8,6
80002df4:	00 00       	add	r0,r0
80002df6:	05 38       	ld.ub	r8,r2++
80002df8:	00 00       	add	r0,r0
80002dfa:	05 18       	ld.sh	r8,r2++
80002dfc:	80 00       	ld.sh	r0,r0[0x0]
80002dfe:	30 20       	mov	r0,2
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	30 56       	mov	r6,5
80002e04:	80 00       	ld.sh	r0,r0[0x0]
80002e06:	2e bc       	sub	r12,-21
80002e08:	80 00       	ld.sh	r0,r0[0x0]
80002e0a:	2e a0       	sub	r0,-22
80002e0c:	80 00       	ld.sh	r0,r0[0x0]
80002e0e:	29 84       	sub	r4,-104
80002e10:	80 00       	ld.sh	r0,r0[0x0]
80002e12:	29 98       	sub	r8,-103
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	2a 2c       	sub	r12,-94
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	2a 60       	sub	r0,-90

80002e1c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002e1c:	f8 08 16 05 	lsr	r8,r12,0x5
80002e20:	a9 68       	lsl	r8,0x8
80002e22:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002e26:	58 1b       	cp.w	r11,1
80002e28:	c0 d0       	breq	80002e42 <gpio_enable_module_pin+0x26>
80002e2a:	c0 63       	brcs	80002e36 <gpio_enable_module_pin+0x1a>
80002e2c:	58 2b       	cp.w	r11,2
80002e2e:	c1 00       	breq	80002e4e <gpio_enable_module_pin+0x32>
80002e30:	58 3b       	cp.w	r11,3
80002e32:	c1 40       	breq	80002e5a <gpio_enable_module_pin+0x3e>
80002e34:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e36:	30 19       	mov	r9,1
80002e38:	f2 0c 09 49 	lsl	r9,r9,r12
80002e3c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e3e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002e40:	c1 28       	rjmp	80002e64 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e42:	30 19       	mov	r9,1
80002e44:	f2 0c 09 49 	lsl	r9,r9,r12
80002e48:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e4a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002e4c:	c0 c8       	rjmp	80002e64 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e4e:	30 19       	mov	r9,1
80002e50:	f2 0c 09 49 	lsl	r9,r9,r12
80002e54:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e56:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002e58:	c0 68       	rjmp	80002e64 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e5a:	30 19       	mov	r9,1
80002e5c:	f2 0c 09 49 	lsl	r9,r9,r12
80002e60:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e62:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002e64:	30 19       	mov	r9,1
80002e66:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e6a:	91 2c       	st.w	r8[0x8],r12
80002e6c:	5e fd       	retal	0
80002e6e:	d7 03       	nop

80002e70 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002e70:	d4 21       	pushm	r4-r7,lr
80002e72:	18 97       	mov	r7,r12
80002e74:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002e76:	58 0b       	cp.w	r11,0
80002e78:	c0 31       	brne	80002e7e <gpio_enable_module+0xe>
80002e7a:	30 05       	mov	r5,0
80002e7c:	c0 d8       	rjmp	80002e96 <gpio_enable_module+0x26>
80002e7e:	30 06       	mov	r6,0
80002e80:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002e82:	6e 1b       	ld.w	r11,r7[0x4]
80002e84:	6e 0c       	ld.w	r12,r7[0x0]
80002e86:	f0 1f 00 06 	mcall	80002e9c <gpio_enable_module+0x2c>
80002e8a:	18 45       	or	r5,r12
		gpiomap++;
80002e8c:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002e8e:	2f f6       	sub	r6,-1
80002e90:	0c 34       	cp.w	r4,r6
80002e92:	fe 9b ff f8 	brhi	80002e82 <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80002e96:	0a 9c       	mov	r12,r5
80002e98:	d8 22       	popm	r4-r7,pc
80002e9a:	00 00       	add	r0,r0
80002e9c:	80 00       	ld.sh	r0,r0[0x0]
80002e9e:	2e 1c       	sub	r12,-31

80002ea0 <gpio_set_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002ea0:	f8 08 16 05 	lsr	r8,r12,0x5
80002ea4:	a9 68       	lsl	r8,0x8
80002ea6:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80002eaa:	30 19       	mov	r9,1
80002eac:	f2 0c 09 4c 	lsl	r12,r9,r12
80002eb0:	f1 4c 00 54 	st.w	r8[84],r12
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80002eb4:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002eb8:	91 1c       	st.w	r8[0x4],r12
}
80002eba:	5e fc       	retal	r12

80002ebc <gpio_clr_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002ebc:	f8 08 16 05 	lsr	r8,r12,0x5
80002ec0:	a9 68       	lsl	r8,0x8
80002ec2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80002ec6:	30 19       	mov	r9,1
80002ec8:	f2 0c 09 4c 	lsl	r12,r9,r12
80002ecc:	f1 4c 00 58 	st.w	r8[88],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80002ed0:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002ed4:	91 1c       	st.w	r8[0x4],r12
}
80002ed6:	5e fc       	retal	r12

80002ed8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002ed8:	c0 08       	rjmp	80002ed8 <_unhandled_interrupt>
80002eda:	d7 03       	nop

80002edc <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80002edc:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002ede:	49 18       	lddpc	r8,80002f20 <INTC_init_interrupts+0x44>
80002ee0:	e3 b8 00 01 	mtsr	0x4,r8
80002ee4:	49 0e       	lddpc	lr,80002f24 <INTC_init_interrupts+0x48>
80002ee6:	30 07       	mov	r7,0
80002ee8:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002eea:	49 0c       	lddpc	r12,80002f28 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002eec:	49 05       	lddpc	r5,80002f2c <INTC_init_interrupts+0x50>
80002eee:	10 15       	sub	r5,r8
80002ef0:	fe 76 08 00 	mov	r6,-63488
80002ef4:	c1 08       	rjmp	80002f14 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002ef6:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002ef8:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002efa:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002efc:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80002f00:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002f02:	10 3a       	cp.w	r10,r8
80002f04:	fe 9b ff fc 	brhi	80002efc <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002f08:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002f0c:	2f f7       	sub	r7,-1
80002f0e:	2f 8e       	sub	lr,-8
80002f10:	59 47       	cp.w	r7,20
80002f12:	c0 50       	breq	80002f1c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002f14:	7c 08       	ld.w	r8,lr[0x0]
80002f16:	58 08       	cp.w	r8,0
80002f18:	ce f1       	brne	80002ef6 <INTC_init_interrupts+0x1a>
80002f1a:	cf 7b       	rjmp	80002f08 <INTC_init_interrupts+0x2c>
80002f1c:	d8 22       	popm	r4-r7,pc
80002f1e:	00 00       	add	r0,r0
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	8c 00       	ld.sh	r0,r6[0x0]
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	8f 20       	st.w	r7[0x8],r0
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	2e d8       	sub	r8,-19
80002f2c:	80 00       	ld.sh	r0,r0[0x0]
80002f2e:	8d 04       	st.w	r6[0x0],r4

80002f30 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002f30:	fe 78 08 00 	mov	r8,-63488
80002f34:	e0 69 00 83 	mov	r9,131
80002f38:	f2 0c 01 0c 	sub	r12,r9,r12
80002f3c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80002f40:	f2 ca ff c0 	sub	r10,r9,-64
80002f44:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002f48:	58 08       	cp.w	r8,0
80002f4a:	c0 21       	brne	80002f4e <_get_interrupt_handler+0x1e>
80002f4c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002f4e:	f0 08 12 00 	clz	r8,r8
80002f52:	48 5a       	lddpc	r10,80002f64 <_get_interrupt_handler+0x34>
80002f54:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002f58:	f0 08 11 1f 	rsub	r8,r8,31
80002f5c:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002f5e:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80002f62:	5e fc       	retal	r12
80002f64:	80 00       	ld.sh	r0,r0[0x0]
80002f66:	8f 20       	st.w	r7[0x8],r0

80002f68 <pm_set_osc0_mode>:
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002f68:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002f6a:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002f6e:	99 a8       	st.w	r12[0x28],r8
}
80002f70:	5e fc       	retal	r12
80002f72:	d7 03       	nop

80002f74 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002f74:	d4 01       	pushm	lr
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002f76:	ec 5b bb 9f 	cp.w	r11,899999
80002f7a:	e0 8b 00 04 	brhi	80002f82 <pm_enable_osc0_crystal+0xe>
80002f7e:	30 4b       	mov	r11,4
80002f80:	c1 38       	rjmp	80002fa6 <pm_enable_osc0_crystal+0x32>
80002f82:	e0 68 c6 bf 	mov	r8,50879
80002f86:	ea 18 00 2d 	orh	r8,0x2d
80002f8a:	10 3b       	cp.w	r11,r8
80002f8c:	e0 8b 00 04 	brhi	80002f94 <pm_enable_osc0_crystal+0x20>
80002f90:	30 5b       	mov	r11,5
80002f92:	c0 a8       	rjmp	80002fa6 <pm_enable_osc0_crystal+0x32>
80002f94:	e0 68 12 00 	mov	r8,4608
80002f98:	ea 18 00 7a 	orh	r8,0x7a
80002f9c:	10 3b       	cp.w	r11,r8
80002f9e:	f9 bb 03 06 	movlo	r11,6
80002fa2:	f9 bb 02 07 	movhs	r11,7
80002fa6:	f0 1f 00 02 	mcall	80002fac <pm_enable_osc0_crystal+0x38>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002faa:	d8 02       	popm	pc
80002fac:	80 00       	ld.sh	r0,r0[0x0]
80002fae:	2f 68       	sub	r8,-10

80002fb0 <pm_enable_clk0_no_wait>:


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002fb0:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002fb2:	f1 db d1 03 	bfins	r8,r11,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002fb6:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002fb8:	78 08       	ld.w	r8,r12[0x0]
80002fba:	a3 a8       	sbr	r8,0x2
80002fbc:	99 08       	st.w	r12[0x0],r8
}
80002fbe:	5e fc       	retal	r12

80002fc0 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002fc0:	79 58       	ld.w	r8,r12[0x54]
80002fc2:	e2 18 00 80 	andl	r8,0x80,COH
80002fc6:	cf d0       	breq	80002fc0 <pm_wait_for_clk0_ready>
}
80002fc8:	5e fc       	retal	r12
80002fca:	d7 03       	nop

80002fcc <pm_enable_clk0>:
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002fcc:	eb cd 40 80 	pushm	r7,lr
80002fd0:	18 97       	mov	r7,r12
  pm_enable_clk0_no_wait(pm, startup);
80002fd2:	f0 1f 00 04 	mcall	80002fe0 <pm_enable_clk0+0x14>
  pm_wait_for_clk0_ready(pm);
80002fd6:	0e 9c       	mov	r12,r7
80002fd8:	f0 1f 00 03 	mcall	80002fe4 <pm_enable_clk0+0x18>
}
80002fdc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fe0:	80 00       	ld.sh	r0,r0[0x0]
80002fe2:	2f b0       	sub	r0,-5
80002fe4:	80 00       	ld.sh	r0,r0[0x0]
80002fe6:	2f c0       	sub	r0,-4

80002fe8 <pm_switch_to_clock>:


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002fe8:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002fea:	f1 db d0 02 	bfins	r8,r11,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002fee:	99 08       	st.w	r12[0x0],r8
}
80002ff0:	5e fc       	retal	r12
80002ff2:	d7 03       	nop

80002ff4 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002ff4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ff8:	18 97       	mov	r7,r12
80002ffa:	14 96       	mov	r6,r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002ffc:	f0 1f 00 06 	mcall	80003014 <pm_switch_to_osc0+0x20>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80003000:	0c 9b       	mov	r11,r6
80003002:	0e 9c       	mov	r12,r7
80003004:	f0 1f 00 05 	mcall	80003018 <pm_switch_to_osc0+0x24>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80003008:	30 1b       	mov	r11,1
8000300a:	0e 9c       	mov	r12,r7
8000300c:	f0 1f 00 04 	mcall	8000301c <pm_switch_to_osc0+0x28>
}
80003010:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003014:	80 00       	ld.sh	r0,r0[0x0]
80003016:	2f 74       	sub	r4,-9
80003018:	80 00       	ld.sh	r0,r0[0x0]
8000301a:	2f cc       	sub	r12,-4
8000301c:	80 00       	ld.sh	r0,r0[0x0]
8000301e:	2f e8       	sub	r8,-2

80003020 <pwm_channel_init>:

int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;

  if (pwm_channel == 0) // Null pointer.
80003020:	58 0b       	cp.w	r11,0
80003022:	c1 90       	breq	80003054 <pwm_channel_init+0x34>
    return PWM_INVALID_ARGUMENT;
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003024:	58 6c       	cp.w	r12,6
80003026:	e0 8b 00 17 	brhi	80003054 <pwm_channel_init+0x34>
    return PWM_INVALID_INPUT;

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
8000302a:	76 0a       	ld.w	r10,r11[0x0]
8000302c:	fe 78 30 00 	mov	r8,-53248
80003030:	f8 c9 ff f0 	sub	r9,r12,-16
80003034:	a5 79       	lsl	r9,0x5
80003036:	f0 09 00 09 	add	r9,r8,r9
8000303a:	93 0a       	st.w	r9[0x0],r10
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
8000303c:	76 19       	ld.w	r9,r11[0x4]
8000303e:	a5 7c       	lsl	r12,0x5
80003040:	f0 0c 00 0c 	add	r12,r8,r12
80003044:	f8 c8 fd fc 	sub	r8,r12,-516
80003048:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
8000304a:	76 28       	ld.w	r8,r11[0x8]
8000304c:	f8 cc fd f8 	sub	r12,r12,-520
80003050:	99 08       	st.w	r12[0x0],r8
80003052:	5e fd       	retal	0

  return PWM_SUCCESS;
80003054:	5e ff       	retal	1

80003056 <pwm_start_channels>:
}


int pwm_start_channels(unsigned long channels_bitmask)
{
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003056:	18 98       	mov	r8,r12
80003058:	e0 18 ff 80 	andl	r8,0xff80
8000305c:	c0 20       	breq	80003060 <pwm_start_channels+0xa>
8000305e:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80003060:	fe 78 30 00 	mov	r8,-53248
80003064:	91 1c       	st.w	r8[0x4],r12
80003066:	5e fd       	retal	0

80003068 <pwm_init>:


int pwm_init(const pwm_opt_t *opt)
{
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003068:	e1 b8 00 00 	mfsr	r8,0x0

  if (opt == 0 ) // Null pointer.
8000306c:	58 0c       	cp.w	r12,0
8000306e:	c0 21       	brne	80003072 <pwm_init+0xa>
80003070:	5e ff       	retal	1
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003072:	e6 18 00 01 	andh	r8,0x1,COH
80003076:	c0 91       	brne	80003088 <pwm_init+0x20>
80003078:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000307a:	fe 78 30 00 	mov	r8,-53248
8000307e:	37 f9       	mov	r9,127
80003080:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003082:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003084:	d5 03       	csrf	0x10
80003086:	c0 68       	rjmp	80003092 <pwm_init+0x2a>
  if (opt == 0 ) // Null pointer.
    return PWM_INVALID_INPUT;

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003088:	fe 78 30 00 	mov	r8,-53248
8000308c:	37 f9       	mov	r9,127
8000308e:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003090:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003092:	78 08       	ld.w	r8,r12[0x0]
80003094:	78 39       	ld.w	r9,r12[0xc]
80003096:	a9 69       	lsl	r9,0x8
80003098:	f3 e8 11 09 	or	r9,r9,r8<<0x10
8000309c:	78 18       	ld.w	r8,r12[0x4]
8000309e:	10 49       	or	r9,r8
800030a0:	78 28       	ld.w	r8,r12[0x8]
800030a2:	f3 e8 11 89 	or	r9,r9,r8<<0x18
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
800030a6:	fe 78 30 00 	mov	r8,-53248
800030aa:	91 09       	st.w	r8[0x0],r9
800030ac:	5e fd       	retal	0

800030ae <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
800030ae:	f8 c8 00 01 	sub	r8,r12,1
800030b2:	f0 0b 00 0b 	add	r11,r8,r11
800030b6:	f6 0c 0d 0a 	divu	r10,r11,r12
800030ba:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
800030bc:	f4 c8 00 01 	sub	r8,r10,1
800030c0:	e0 48 00 fe 	cp.w	r8,254
800030c4:	e0 88 00 03 	brls	800030ca <getBaudDiv+0x1c>
800030c8:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
800030ca:	5c 8c       	casts.h	r12
}
800030cc:	5e fc       	retal	r12

800030ce <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800030ce:	f7 39 00 0d 	ld.ub	r9,r11[13]
800030d2:	30 18       	mov	r8,1
800030d4:	f0 09 18 00 	cp.b	r9,r8
800030d8:	e0 88 00 04 	brls	800030e0 <spi_initMaster+0x12>
800030dc:	30 2c       	mov	r12,2
800030de:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800030e0:	e0 68 00 80 	mov	r8,128
800030e4:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800030e6:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
800030e8:	30 19       	mov	r9,1
800030ea:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800030ee:	f7 39 00 0d 	ld.ub	r9,r11[13]
800030f2:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
800030f6:	30 09       	mov	r9,0
800030f8:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800030fc:	30 fa       	mov	r10,15
800030fe:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80003102:	99 18       	st.w	r12[0x4],r8
80003104:	5e f9       	retal	r9

80003106 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003106:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003108:	30 18       	mov	r8,1
8000310a:	f0 0b 18 00 	cp.b	r11,r8
8000310e:	5f be       	srhi	lr
80003110:	f0 0a 18 00 	cp.b	r10,r8
80003114:	5f b8       	srhi	r8
80003116:	fd e8 10 08 	or	r8,lr,r8
8000311a:	c0 30       	breq	80003120 <spi_selectionMode+0x1a>
8000311c:	30 2c       	mov	r12,2
8000311e:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
80003120:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
80003122:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003126:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
8000312a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
8000312e:	99 18       	st.w	r12[0x4],r8
80003130:	d8 0a       	popm	pc,r12=0

80003132 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003132:	78 18       	ld.w	r8,r12[0x4]
80003134:	ea 18 00 0f 	orh	r8,0xf
80003138:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000313a:	78 18       	ld.w	r8,r12[0x4]
8000313c:	e2 18 00 04 	andl	r8,0x4,COH
80003140:	c0 f0       	breq	8000315e <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80003142:	30 e8       	mov	r8,14
80003144:	f0 0b 18 00 	cp.b	r11,r8
80003148:	e0 8b 00 19 	brhi	8000317a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
8000314c:	78 18       	ld.w	r8,r12[0x4]
8000314e:	b1 6b       	lsl	r11,0x10
80003150:	ea 1b ff f0 	orh	r11,0xfff0
80003154:	e8 1b ff ff 	orl	r11,0xffff
80003158:	10 6b       	and	r11,r8
8000315a:	99 1b       	st.w	r12[0x4],r11
8000315c:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
8000315e:	30 38       	mov	r8,3
80003160:	f0 0b 18 00 	cp.b	r11,r8
80003164:	e0 8b 00 0b 	brhi	8000317a <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003168:	78 18       	ld.w	r8,r12[0x4]
8000316a:	2f 0b       	sub	r11,-16
8000316c:	30 19       	mov	r9,1
8000316e:	f2 0b 09 4b 	lsl	r11,r9,r11
80003172:	5c db       	com	r11
80003174:	10 6b       	and	r11,r8
80003176:	99 1b       	st.w	r12[0x4],r11
80003178:	5e fd       	retal	0
8000317a:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000317c:	5e fc       	retal	r12

8000317e <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000317e:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003182:	c0 58       	rjmp	8000318c <spi_unselectChip+0xe>
		if (!timeout--) {
80003184:	58 08       	cp.w	r8,0
80003186:	c0 21       	brne	8000318a <spi_unselectChip+0xc>
80003188:	5e ff       	retal	1
8000318a:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000318c:	78 49       	ld.w	r9,r12[0x10]
8000318e:	e2 19 02 00 	andl	r9,0x200,COH
80003192:	cf 90       	breq	80003184 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003194:	78 18       	ld.w	r8,r12[0x4]
80003196:	ea 18 00 0f 	orh	r8,0xf
8000319a:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000319c:	fc 18 01 00 	movh	r8,0x100
800031a0:	99 08       	st.w	r12[0x0],r8
800031a2:	5e fd       	retal	0

800031a4 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800031a4:	eb cd 40 f8 	pushm	r3-r7,lr
800031a8:	18 95       	mov	r5,r12
800031aa:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800031ac:	f7 36 00 0c 	ld.ub	r6,r11[12]
800031b0:	30 38       	mov	r8,3
800031b2:	f0 06 18 00 	cp.b	r6,r8
800031b6:	e0 8b 00 4d 	brhi	80003250 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
800031ba:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800031be:	30 18       	mov	r8,1
800031c0:	f0 04 18 00 	cp.b	r4,r8
800031c4:	e0 8b 00 46 	brhi	80003250 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800031c8:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800031cc:	30 78       	mov	r8,7
800031ce:	f0 03 18 00 	cp.b	r3,r8
800031d2:	e0 88 00 3f 	brls	80003250 <spi_setupChipReg+0xac>
800031d6:	31 08       	mov	r8,16
800031d8:	f0 03 18 00 	cp.b	r3,r8
800031dc:	e0 8b 00 3a 	brhi	80003250 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800031e0:	14 9b       	mov	r11,r10
800031e2:	6e 1c       	ld.w	r12,r7[0x4]
800031e4:	f0 1f 00 1d 	mcall	80003258 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
800031e8:	c3 45       	brlt	80003250 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
800031ea:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800031ec:	ec 09 16 01 	lsr	r9,r6,0x1
800031f0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800031f4:	ec 16 00 01 	eorl	r6,0x1
800031f8:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
800031fc:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003200:	20 83       	sub	r3,8
80003202:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003206:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000320a:	ef 39 00 09 	ld.ub	r9,r7[9]
8000320e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003212:	ef 39 00 0a 	ld.ub	r9,r7[10]
80003216:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
8000321a:	0f 89       	ld.ub	r9,r7[0x0]
8000321c:	30 1a       	mov	r10,1
8000321e:	f4 09 18 00 	cp.b	r9,r10
80003222:	c0 e0       	breq	8000323e <spi_setupChipReg+0x9a>
80003224:	c0 a3       	brcs	80003238 <spi_setupChipReg+0x94>
80003226:	30 2a       	mov	r10,2
80003228:	f4 09 18 00 	cp.b	r9,r10
8000322c:	c0 c0       	breq	80003244 <spi_setupChipReg+0xa0>
8000322e:	30 3a       	mov	r10,3
80003230:	f4 09 18 00 	cp.b	r9,r10
80003234:	c0 e1       	brne	80003250 <spi_setupChipReg+0xac>
80003236:	c0 a8       	rjmp	8000324a <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003238:	8b c8       	st.w	r5[0x30],r8
8000323a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
8000323e:	8b d8       	st.w	r5[0x34],r8
80003240:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003244:	8b e8       	st.w	r5[0x38],r8
80003246:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000324a:	8b f8       	st.w	r5[0x3c],r8
8000324c:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
80003250:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
80003252:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80003256:	00 00       	add	r0,r0
80003258:	80 00       	ld.sh	r0,r0[0x0]
8000325a:	30 ae       	mov	lr,10

8000325c <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000325c:	30 18       	mov	r8,1
8000325e:	99 08       	st.w	r12[0x0],r8
}
80003260:	5e fc       	retal	r12

80003262 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003262:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003266:	c0 58       	rjmp	80003270 <spi_write+0xe>
		if (!timeout--) {
80003268:	58 08       	cp.w	r8,0
8000326a:	c0 21       	brne	8000326e <spi_write+0xc>
8000326c:	5e ff       	retal	1
8000326e:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003270:	78 49       	ld.w	r9,r12[0x10]
80003272:	e2 19 00 02 	andl	r9,0x2,COH
80003276:	cf 90       	breq	80003268 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003278:	5c 7b       	castu.h	r11
8000327a:	99 3b       	st.w	r12[0xc],r11
8000327c:	5e fd       	retal	0

8000327e <spi_readRegisterFullCheck>:
	return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
}

uint8_t spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
8000327e:	78 4c       	ld.w	r12,r12[0x10]
}
80003280:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80003284:	5e fc       	retal	r12

80003286 <spi_read>:

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003286:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000328a:	c0 58       	rjmp	80003294 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
8000328c:	58 08       	cp.w	r8,0
8000328e:	c0 21       	brne	80003292 <spi_read+0xc>
80003290:	5e ff       	retal	1
80003292:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003294:	78 49       	ld.w	r9,r12[0x10]
80003296:	e2 19 02 01 	andl	r9,0x201,COH
8000329a:	e0 49 02 01 	cp.w	r9,513
8000329e:	cf 71       	brne	8000328c <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800032a0:	78 28       	ld.w	r8,r12[0x8]
800032a2:	b6 08       	st.h	r11[0x0],r8
800032a4:	5e fd       	retal	0
800032a6:	d7 03       	nop

800032a8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800032a8:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800032ac:	fe c0 a6 ac 	sub	r0,pc,-22868

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800032b0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800032b4:	d5 53       	csrf	0x15
  cp      r0, r1
800032b6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800032b8:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800032bc:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800032be:	c0 72       	brcc	800032cc <idata_load_loop_end>
  cp      r0, r1
800032c0:	fe c2 9d 78 	sub	r2,pc,-25224

800032c4 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800032c4:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800032c6:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800032c8:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800032ca:	cf d3       	brcs	800032c4 <idata_load_loop>

800032cc <idata_load_loop_end>:
  mov     r2, 0
800032cc:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800032d0:	e0 61 06 78 	mov	r1,1656
  cp      r0, r1
  brlo    udata_clear_loop
800032d4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800032d6:	c0 62       	brcc	800032e2 <udata_clear_loop_end>
800032d8:	30 02       	mov	r2,0
800032da:	30 03       	mov	r3,0

800032dc <udata_clear_loop>:
800032dc:	a1 22       	st.d	r0++,r2
800032de:	02 30       	cp.w	r0,r1
800032e0:	cf e3       	brcs	800032dc <udata_clear_loop>

800032e2 <udata_clear_loop_end>:
800032e2:	fe cf 0b 6a 	sub	pc,pc,2922
800032e6:	d7 03       	nop

800032e8 <memcpy>:
800032e8:	58 8a       	cp.w	r10,8
800032ea:	c2 f5       	brlt	80003348 <memcpy+0x60>
800032ec:	f9 eb 10 09 	or	r9,r12,r11
800032f0:	e2 19 00 03 	andl	r9,0x3,COH
800032f4:	e0 81 00 97 	brne	80003422 <memcpy+0x13a>
800032f8:	e0 4a 00 20 	cp.w	r10,32
800032fc:	c3 b4       	brge	80003372 <memcpy+0x8a>
800032fe:	f4 08 14 02 	asr	r8,r10,0x2
80003302:	f0 09 11 08 	rsub	r9,r8,8
80003306:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000330a:	76 69       	ld.w	r9,r11[0x18]
8000330c:	99 69       	st.w	r12[0x18],r9
8000330e:	76 59       	ld.w	r9,r11[0x14]
80003310:	99 59       	st.w	r12[0x14],r9
80003312:	76 49       	ld.w	r9,r11[0x10]
80003314:	99 49       	st.w	r12[0x10],r9
80003316:	76 39       	ld.w	r9,r11[0xc]
80003318:	99 39       	st.w	r12[0xc],r9
8000331a:	76 29       	ld.w	r9,r11[0x8]
8000331c:	99 29       	st.w	r12[0x8],r9
8000331e:	76 19       	ld.w	r9,r11[0x4]
80003320:	99 19       	st.w	r12[0x4],r9
80003322:	76 09       	ld.w	r9,r11[0x0]
80003324:	99 09       	st.w	r12[0x0],r9
80003326:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000332a:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000332e:	e0 1a 00 03 	andl	r10,0x3
80003332:	f4 0a 11 04 	rsub	r10,r10,4
80003336:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000333a:	17 a9       	ld.ub	r9,r11[0x2]
8000333c:	b0 a9       	st.b	r8[0x2],r9
8000333e:	17 99       	ld.ub	r9,r11[0x1]
80003340:	b0 99       	st.b	r8[0x1],r9
80003342:	17 89       	ld.ub	r9,r11[0x0]
80003344:	b0 89       	st.b	r8[0x0],r9
80003346:	5e fc       	retal	r12
80003348:	f4 0a 11 09 	rsub	r10,r10,9
8000334c:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80003350:	17 f9       	ld.ub	r9,r11[0x7]
80003352:	b8 f9       	st.b	r12[0x7],r9
80003354:	17 e9       	ld.ub	r9,r11[0x6]
80003356:	b8 e9       	st.b	r12[0x6],r9
80003358:	17 d9       	ld.ub	r9,r11[0x5]
8000335a:	b8 d9       	st.b	r12[0x5],r9
8000335c:	17 c9       	ld.ub	r9,r11[0x4]
8000335e:	b8 c9       	st.b	r12[0x4],r9
80003360:	17 b9       	ld.ub	r9,r11[0x3]
80003362:	b8 b9       	st.b	r12[0x3],r9
80003364:	17 a9       	ld.ub	r9,r11[0x2]
80003366:	b8 a9       	st.b	r12[0x2],r9
80003368:	17 99       	ld.ub	r9,r11[0x1]
8000336a:	b8 99       	st.b	r12[0x1],r9
8000336c:	17 89       	ld.ub	r9,r11[0x0]
8000336e:	b8 89       	st.b	r12[0x0],r9
80003370:	5e fc       	retal	r12
80003372:	eb cd 40 c0 	pushm	r6-r7,lr
80003376:	18 99       	mov	r9,r12
80003378:	22 0a       	sub	r10,32
8000337a:	b7 07       	ld.d	r6,r11++
8000337c:	b3 26       	st.d	r9++,r6
8000337e:	b7 07       	ld.d	r6,r11++
80003380:	b3 26       	st.d	r9++,r6
80003382:	b7 07       	ld.d	r6,r11++
80003384:	b3 26       	st.d	r9++,r6
80003386:	b7 07       	ld.d	r6,r11++
80003388:	b3 26       	st.d	r9++,r6
8000338a:	22 0a       	sub	r10,32
8000338c:	cf 74       	brge	8000337a <memcpy+0x92>
8000338e:	2f 0a       	sub	r10,-16
80003390:	c0 65       	brlt	8000339c <memcpy+0xb4>
80003392:	b7 07       	ld.d	r6,r11++
80003394:	b3 26       	st.d	r9++,r6
80003396:	b7 07       	ld.d	r6,r11++
80003398:	b3 26       	st.d	r9++,r6
8000339a:	21 0a       	sub	r10,16
8000339c:	5c 3a       	neg	r10
8000339e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800033a2:	d7 03       	nop
800033a4:	d7 03       	nop
800033a6:	f7 36 00 0e 	ld.ub	r6,r11[14]
800033aa:	f3 66 00 0e 	st.b	r9[14],r6
800033ae:	f7 36 00 0d 	ld.ub	r6,r11[13]
800033b2:	f3 66 00 0d 	st.b	r9[13],r6
800033b6:	f7 36 00 0c 	ld.ub	r6,r11[12]
800033ba:	f3 66 00 0c 	st.b	r9[12],r6
800033be:	f7 36 00 0b 	ld.ub	r6,r11[11]
800033c2:	f3 66 00 0b 	st.b	r9[11],r6
800033c6:	f7 36 00 0a 	ld.ub	r6,r11[10]
800033ca:	f3 66 00 0a 	st.b	r9[10],r6
800033ce:	f7 36 00 09 	ld.ub	r6,r11[9]
800033d2:	f3 66 00 09 	st.b	r9[9],r6
800033d6:	f7 36 00 08 	ld.ub	r6,r11[8]
800033da:	f3 66 00 08 	st.b	r9[8],r6
800033de:	f7 36 00 07 	ld.ub	r6,r11[7]
800033e2:	f3 66 00 07 	st.b	r9[7],r6
800033e6:	f7 36 00 06 	ld.ub	r6,r11[6]
800033ea:	f3 66 00 06 	st.b	r9[6],r6
800033ee:	f7 36 00 05 	ld.ub	r6,r11[5]
800033f2:	f3 66 00 05 	st.b	r9[5],r6
800033f6:	f7 36 00 04 	ld.ub	r6,r11[4]
800033fa:	f3 66 00 04 	st.b	r9[4],r6
800033fe:	f7 36 00 03 	ld.ub	r6,r11[3]
80003402:	f3 66 00 03 	st.b	r9[3],r6
80003406:	f7 36 00 02 	ld.ub	r6,r11[2]
8000340a:	f3 66 00 02 	st.b	r9[2],r6
8000340e:	f7 36 00 01 	ld.ub	r6,r11[1]
80003412:	f3 66 00 01 	st.b	r9[1],r6
80003416:	f7 36 00 00 	ld.ub	r6,r11[0]
8000341a:	f3 66 00 00 	st.b	r9[0],r6
8000341e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003422:	20 1a       	sub	r10,1
80003424:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80003428:	f8 0a 0b 09 	st.b	r12[r10],r9
8000342c:	cf b1       	brne	80003422 <memcpy+0x13a>
8000342e:	5e fc       	retal	r12

80003430 <_vsprintf_r>:
80003430:	d4 01       	pushm	lr
80003432:	21 7d       	sub	sp,92
80003434:	e0 68 ff ff 	mov	r8,65535
80003438:	ea 18 7f ff 	orh	r8,0x7fff
8000343c:	50 58       	stdsp	sp[0x14],r8
8000343e:	50 28       	stdsp	sp[0x8],r8
80003440:	e0 68 02 08 	mov	r8,520
80003444:	ba 68       	st.h	sp[0xc],r8
80003446:	3f f8       	mov	r8,-1
80003448:	50 4b       	stdsp	sp[0x10],r11
8000344a:	50 0b       	stdsp	sp[0x0],r11
8000344c:	ba 78       	st.h	sp[0xe],r8
8000344e:	1a 9b       	mov	r11,sp
80003450:	ca 8d       	rcall	800037a0 <_vfprintf_r>
80003452:	30 09       	mov	r9,0
80003454:	40 08       	lddsp	r8,sp[0x0]
80003456:	b0 89       	st.b	r8[0x0],r9
80003458:	2e 9d       	sub	sp,-92
8000345a:	d8 02       	popm	pc

8000345c <vsprintf>:
8000345c:	d4 01       	pushm	lr
8000345e:	e0 68 01 00 	mov	r8,256
80003462:	14 99       	mov	r9,r10
80003464:	16 9a       	mov	r10,r11
80003466:	18 9b       	mov	r11,r12
80003468:	70 0c       	ld.w	r12,r8[0x0]
8000346a:	ce 3f       	rcall	80003430 <_vsprintf_r>
8000346c:	d8 02       	popm	pc
8000346e:	d7 03       	nop

80003470 <get_arg>:
80003470:	d4 31       	pushm	r0-r7,lr
80003472:	20 8d       	sub	sp,32
80003474:	fa c4 ff bc 	sub	r4,sp,-68
80003478:	50 4b       	stdsp	sp[0x10],r11
8000347a:	68 2e       	ld.w	lr,r4[0x8]
8000347c:	50 58       	stdsp	sp[0x14],r8
8000347e:	12 96       	mov	r6,r9
80003480:	7c 0b       	ld.w	r11,lr[0x0]
80003482:	70 05       	ld.w	r5,r8[0x0]
80003484:	50 6e       	stdsp	sp[0x18],lr
80003486:	58 0b       	cp.w	r11,0
80003488:	f4 0b 17 00 	moveq	r11,r10
8000348c:	68 03       	ld.w	r3,r4[0x0]
8000348e:	68 11       	ld.w	r1,r4[0x4]
80003490:	40 49       	lddsp	r9,sp[0x10]
80003492:	30 08       	mov	r8,0
80003494:	c2 89       	rjmp	800036e4 <get_arg+0x274>
80003496:	2f fb       	sub	r11,-1
80003498:	32 5c       	mov	r12,37
8000349a:	17 8a       	ld.ub	r10,r11[0x0]
8000349c:	f8 0a 18 00 	cp.b	r10,r12
800034a0:	5f 1e       	srne	lr
800034a2:	f0 0a 18 00 	cp.b	r10,r8
800034a6:	5f 1c       	srne	r12
800034a8:	fd ec 00 0c 	and	r12,lr,r12
800034ac:	f0 0c 18 00 	cp.b	r12,r8
800034b0:	cf 31       	brne	80003496 <get_arg+0x26>
800034b2:	58 0a       	cp.w	r10,0
800034b4:	e0 80 01 25 	breq	800036fe <get_arg+0x28e>
800034b8:	30 0c       	mov	r12,0
800034ba:	3f fa       	mov	r10,-1
800034bc:	18 90       	mov	r0,r12
800034be:	50 3a       	stdsp	sp[0xc],r10
800034c0:	18 94       	mov	r4,r12
800034c2:	18 92       	mov	r2,r12
800034c4:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
800034c8:	16 97       	mov	r7,r11
800034ca:	50 7c       	stdsp	sp[0x1c],r12
800034cc:	fe cc a2 30 	sub	r12,pc,-24016
800034d0:	0f 3a       	ld.ub	r10,r7++
800034d2:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
800034d6:	40 7c       	lddsp	r12,sp[0x1c]
800034d8:	1c 0c       	add	r12,lr
800034da:	fe ce a3 06 	sub	lr,pc,-23802
800034de:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
800034e2:	20 1e       	sub	lr,1
800034e4:	50 0e       	stdsp	sp[0x0],lr
800034e6:	fe ce a3 7e 	sub	lr,pc,-23682
800034ea:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
800034ee:	50 7c       	stdsp	sp[0x1c],r12
800034f0:	40 0c       	lddsp	r12,sp[0x0]
800034f2:	58 7c       	cp.w	r12,7
800034f4:	e0 8b 00 f1 	brhi	800036d6 <get_arg+0x266>
800034f8:	fe ce a5 30 	sub	lr,pc,-23248
800034fc:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80003500:	36 8b       	mov	r11,104
80003502:	f6 0a 18 00 	cp.b	r10,r11
80003506:	e0 80 00 e8 	breq	800036d6 <get_arg+0x266>
8000350a:	37 1b       	mov	r11,113
8000350c:	f6 0a 18 00 	cp.b	r10,r11
80003510:	c0 70       	breq	8000351e <get_arg+0xae>
80003512:	34 cb       	mov	r11,76
80003514:	f6 0a 18 00 	cp.b	r10,r11
80003518:	c0 51       	brne	80003522 <get_arg+0xb2>
8000351a:	a3 b4       	sbr	r4,0x3
8000351c:	cd d8       	rjmp	800036d6 <get_arg+0x266>
8000351e:	a5 b4       	sbr	r4,0x5
80003520:	cd b8       	rjmp	800036d6 <get_arg+0x266>
80003522:	08 9a       	mov	r10,r4
80003524:	0e 9b       	mov	r11,r7
80003526:	a5 aa       	sbr	r10,0x4
80003528:	17 3c       	ld.ub	r12,r11++
8000352a:	a5 b4       	sbr	r4,0x5
8000352c:	36 ce       	mov	lr,108
8000352e:	fc 0c 18 00 	cp.b	r12,lr
80003532:	e0 80 00 d3 	breq	800036d8 <get_arg+0x268>
80003536:	14 94       	mov	r4,r10
80003538:	cc f8       	rjmp	800036d6 <get_arg+0x266>
8000353a:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000353e:	36 7c       	mov	r12,103
80003540:	f8 0a 18 00 	cp.b	r10,r12
80003544:	e0 8b 00 27 	brhi	80003592 <get_arg+0x122>
80003548:	36 5b       	mov	r11,101
8000354a:	f6 0a 18 00 	cp.b	r10,r11
8000354e:	c4 82       	brcc	800035de <get_arg+0x16e>
80003550:	34 fb       	mov	r11,79
80003552:	f6 0a 18 00 	cp.b	r10,r11
80003556:	c4 80       	breq	800035e6 <get_arg+0x176>
80003558:	e0 8b 00 0c 	brhi	80003570 <get_arg+0x100>
8000355c:	34 5b       	mov	r11,69
8000355e:	f6 0a 18 00 	cp.b	r10,r11
80003562:	c3 e0       	breq	800035de <get_arg+0x16e>
80003564:	34 7b       	mov	r11,71
80003566:	f6 0a 18 00 	cp.b	r10,r11
8000356a:	c3 a0       	breq	800035de <get_arg+0x16e>
8000356c:	34 4b       	mov	r11,68
8000356e:	c0 88       	rjmp	8000357e <get_arg+0x10e>
80003570:	35 8b       	mov	r11,88
80003572:	f6 0a 18 00 	cp.b	r10,r11
80003576:	c2 c0       	breq	800035ce <get_arg+0x15e>
80003578:	e0 8b 00 07 	brhi	80003586 <get_arg+0x116>
8000357c:	35 5b       	mov	r11,85
8000357e:	f6 0a 18 00 	cp.b	r10,r11
80003582:	c3 51       	brne	800035ec <get_arg+0x17c>
80003584:	c3 18       	rjmp	800035e6 <get_arg+0x176>
80003586:	36 3b       	mov	r11,99
80003588:	f6 0a 18 00 	cp.b	r10,r11
8000358c:	c2 f0       	breq	800035ea <get_arg+0x17a>
8000358e:	36 4b       	mov	r11,100
80003590:	c0 e8       	rjmp	800035ac <get_arg+0x13c>
80003592:	37 0b       	mov	r11,112
80003594:	f6 0a 18 00 	cp.b	r10,r11
80003598:	c2 50       	breq	800035e2 <get_arg+0x172>
8000359a:	e0 8b 00 0d 	brhi	800035b4 <get_arg+0x144>
8000359e:	36 eb       	mov	r11,110
800035a0:	f6 0a 18 00 	cp.b	r10,r11
800035a4:	c1 f0       	breq	800035e2 <get_arg+0x172>
800035a6:	e0 8b 00 14 	brhi	800035ce <get_arg+0x15e>
800035aa:	36 9b       	mov	r11,105
800035ac:	f6 0a 18 00 	cp.b	r10,r11
800035b0:	c1 e1       	brne	800035ec <get_arg+0x17c>
800035b2:	c0 e8       	rjmp	800035ce <get_arg+0x15e>
800035b4:	37 5b       	mov	r11,117
800035b6:	f6 0a 18 00 	cp.b	r10,r11
800035ba:	c0 a0       	breq	800035ce <get_arg+0x15e>
800035bc:	37 8b       	mov	r11,120
800035be:	f6 0a 18 00 	cp.b	r10,r11
800035c2:	c0 60       	breq	800035ce <get_arg+0x15e>
800035c4:	37 3b       	mov	r11,115
800035c6:	f6 0a 18 00 	cp.b	r10,r11
800035ca:	c1 11       	brne	800035ec <get_arg+0x17c>
800035cc:	c0 b8       	rjmp	800035e2 <get_arg+0x172>
800035ce:	ed b4 00 04 	bld	r4,0x4
800035d2:	c0 a0       	breq	800035e6 <get_arg+0x176>
800035d4:	ed b4 00 05 	bld	r4,0x5
800035d8:	c0 91       	brne	800035ea <get_arg+0x17a>
800035da:	30 20       	mov	r0,2
800035dc:	c0 88       	rjmp	800035ec <get_arg+0x17c>
800035de:	30 40       	mov	r0,4
800035e0:	c0 68       	rjmp	800035ec <get_arg+0x17c>
800035e2:	30 30       	mov	r0,3
800035e4:	c0 48       	rjmp	800035ec <get_arg+0x17c>
800035e6:	30 10       	mov	r0,1
800035e8:	c0 28       	rjmp	800035ec <get_arg+0x17c>
800035ea:	30 00       	mov	r0,0
800035ec:	40 3b       	lddsp	r11,sp[0xc]
800035ee:	5b fb       	cp.w	r11,-1
800035f0:	c0 40       	breq	800035f8 <get_arg+0x188>
800035f2:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
800035f6:	c7 08       	rjmp	800036d6 <get_arg+0x266>
800035f8:	58 60       	cp.w	r0,6
800035fa:	e0 8b 00 6e 	brhi	800036d6 <get_arg+0x266>
800035fe:	6c 0a       	ld.w	r10,r6[0x0]
80003600:	ea cc ff ff 	sub	r12,r5,-1
80003604:	fe ce a6 1c 	sub	lr,pc,-23012
80003608:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000360c:	f4 cb ff f8 	sub	r11,r10,-8
80003610:	8d 0b       	st.w	r6[0x0],r11
80003612:	f4 ea 00 00 	ld.d	r10,r10[0]
80003616:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000361a:	c0 f8       	rjmp	80003638 <get_arg+0x1c8>
8000361c:	f4 cb ff fc 	sub	r11,r10,-4
80003620:	8d 0b       	st.w	r6[0x0],r11
80003622:	74 0a       	ld.w	r10,r10[0x0]
80003624:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80003628:	c0 88       	rjmp	80003638 <get_arg+0x1c8>
8000362a:	f4 cb ff f8 	sub	r11,r10,-8
8000362e:	8d 0b       	st.w	r6[0x0],r11
80003630:	f4 ea 00 00 	ld.d	r10,r10[0]
80003634:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80003638:	0e 9b       	mov	r11,r7
8000363a:	18 95       	mov	r5,r12
8000363c:	c4 e8       	rjmp	800036d8 <get_arg+0x268>
8000363e:	62 0a       	ld.w	r10,r1[0x0]
80003640:	5b fa       	cp.w	r10,-1
80003642:	c0 b1       	brne	80003658 <get_arg+0x1e8>
80003644:	50 19       	stdsp	sp[0x4],r9
80003646:	50 28       	stdsp	sp[0x8],r8
80003648:	e0 6a 00 80 	mov	r10,128
8000364c:	30 0b       	mov	r11,0
8000364e:	02 9c       	mov	r12,r1
80003650:	e0 a0 1d 78 	rcall	80007140 <memset>
80003654:	40 28       	lddsp	r8,sp[0x8]
80003656:	40 19       	lddsp	r9,sp[0x4]
80003658:	e4 cc 00 01 	sub	r12,r2,1
8000365c:	0e 9b       	mov	r11,r7
8000365e:	50 3c       	stdsp	sp[0xc],r12
80003660:	f2 0c 0c 49 	max	r9,r9,r12
80003664:	c3 a8       	rjmp	800036d8 <get_arg+0x268>
80003666:	62 0a       	ld.w	r10,r1[0x0]
80003668:	5b fa       	cp.w	r10,-1
8000366a:	c0 b1       	brne	80003680 <get_arg+0x210>
8000366c:	50 19       	stdsp	sp[0x4],r9
8000366e:	50 28       	stdsp	sp[0x8],r8
80003670:	e0 6a 00 80 	mov	r10,128
80003674:	30 0b       	mov	r11,0
80003676:	02 9c       	mov	r12,r1
80003678:	e0 a0 1d 64 	rcall	80007140 <memset>
8000367c:	40 28       	lddsp	r8,sp[0x8]
8000367e:	40 19       	lddsp	r9,sp[0x4]
80003680:	20 12       	sub	r2,1
80003682:	30 0a       	mov	r10,0
80003684:	0e 9b       	mov	r11,r7
80003686:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000368a:	f2 02 0c 49 	max	r9,r9,r2
8000368e:	c2 58       	rjmp	800036d8 <get_arg+0x268>
80003690:	16 97       	mov	r7,r11
80003692:	6c 0a       	ld.w	r10,r6[0x0]
80003694:	f4 cb ff fc 	sub	r11,r10,-4
80003698:	8d 0b       	st.w	r6[0x0],r11
8000369a:	74 0a       	ld.w	r10,r10[0x0]
8000369c:	0e 9b       	mov	r11,r7
8000369e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800036a2:	2f f5       	sub	r5,-1
800036a4:	c1 a8       	rjmp	800036d8 <get_arg+0x268>
800036a6:	f4 c2 00 30 	sub	r2,r10,48
800036aa:	c0 68       	rjmp	800036b6 <get_arg+0x246>
800036ac:	e4 02 00 22 	add	r2,r2,r2<<0x2
800036b0:	2f f7       	sub	r7,-1
800036b2:	f4 02 00 12 	add	r2,r10,r2<<0x1
800036b6:	0f 8a       	ld.ub	r10,r7[0x0]
800036b8:	58 0a       	cp.w	r10,0
800036ba:	c0 e0       	breq	800036d6 <get_arg+0x266>
800036bc:	23 0a       	sub	r10,48
800036be:	58 9a       	cp.w	r10,9
800036c0:	fe 98 ff f6 	brls	800036ac <get_arg+0x23c>
800036c4:	c0 98       	rjmp	800036d6 <get_arg+0x266>
800036c6:	2f f7       	sub	r7,-1
800036c8:	0f 8a       	ld.ub	r10,r7[0x0]
800036ca:	58 0a       	cp.w	r10,0
800036cc:	c0 50       	breq	800036d6 <get_arg+0x266>
800036ce:	23 0a       	sub	r10,48
800036d0:	58 9a       	cp.w	r10,9
800036d2:	fe 98 ff fa 	brls	800036c6 <get_arg+0x256>
800036d6:	0e 9b       	mov	r11,r7
800036d8:	40 7c       	lddsp	r12,sp[0x1c]
800036da:	30 ba       	mov	r10,11
800036dc:	f4 0c 18 00 	cp.b	r12,r10
800036e0:	fe 91 fe f2 	brne	800034c4 <get_arg+0x54>
800036e4:	40 42       	lddsp	r2,sp[0x10]
800036e6:	17 8c       	ld.ub	r12,r11[0x0]
800036e8:	0a 32       	cp.w	r2,r5
800036ea:	5f 4a       	srge	r10
800036ec:	f0 0c 18 00 	cp.b	r12,r8
800036f0:	5f 1c       	srne	r12
800036f2:	f9 ea 00 0a 	and	r10,r12,r10
800036f6:	f0 0a 18 00 	cp.b	r10,r8
800036fa:	fe 91 fe cf 	brne	80003498 <get_arg+0x28>
800036fe:	30 08       	mov	r8,0
80003700:	40 4e       	lddsp	lr,sp[0x10]
80003702:	17 8a       	ld.ub	r10,r11[0x0]
80003704:	e2 05 00 21 	add	r1,r1,r5<<0x2
80003708:	f0 0a 18 00 	cp.b	r10,r8
8000370c:	fc 09 17 10 	movne	r9,lr
80003710:	e6 05 00 38 	add	r8,r3,r5<<0x3
80003714:	06 9e       	mov	lr,r3
80003716:	c2 a8       	rjmp	8000376a <get_arg+0x2fa>
80003718:	62 0a       	ld.w	r10,r1[0x0]
8000371a:	58 3a       	cp.w	r10,3
8000371c:	c1 e0       	breq	80003758 <get_arg+0x2e8>
8000371e:	e0 89 00 07 	brgt	8000372c <get_arg+0x2bc>
80003722:	58 1a       	cp.w	r10,1
80003724:	c1 a0       	breq	80003758 <get_arg+0x2e8>
80003726:	58 2a       	cp.w	r10,2
80003728:	c1 81       	brne	80003758 <get_arg+0x2e8>
8000372a:	c0 58       	rjmp	80003734 <get_arg+0x2c4>
8000372c:	58 5a       	cp.w	r10,5
8000372e:	c0 c0       	breq	80003746 <get_arg+0x2d6>
80003730:	c0 b5       	brlt	80003746 <get_arg+0x2d6>
80003732:	c1 38       	rjmp	80003758 <get_arg+0x2e8>
80003734:	6c 0a       	ld.w	r10,r6[0x0]
80003736:	f4 cc ff f8 	sub	r12,r10,-8
8000373a:	8d 0c       	st.w	r6[0x0],r12
8000373c:	f4 e2 00 00 	ld.d	r2,r10[0]
80003740:	f0 e3 00 00 	st.d	r8[0],r2
80003744:	c1 08       	rjmp	80003764 <get_arg+0x2f4>
80003746:	6c 0a       	ld.w	r10,r6[0x0]
80003748:	f4 cc ff f8 	sub	r12,r10,-8
8000374c:	8d 0c       	st.w	r6[0x0],r12
8000374e:	f4 e2 00 00 	ld.d	r2,r10[0]
80003752:	f0 e3 00 00 	st.d	r8[0],r2
80003756:	c0 78       	rjmp	80003764 <get_arg+0x2f4>
80003758:	6c 0a       	ld.w	r10,r6[0x0]
8000375a:	f4 cc ff fc 	sub	r12,r10,-4
8000375e:	8d 0c       	st.w	r6[0x0],r12
80003760:	74 0a       	ld.w	r10,r10[0x0]
80003762:	91 0a       	st.w	r8[0x0],r10
80003764:	2f f5       	sub	r5,-1
80003766:	2f 88       	sub	r8,-8
80003768:	2f c1       	sub	r1,-4
8000376a:	12 35       	cp.w	r5,r9
8000376c:	fe 9a ff d6 	brle	80003718 <get_arg+0x2a8>
80003770:	1c 93       	mov	r3,lr
80003772:	40 52       	lddsp	r2,sp[0x14]
80003774:	40 6e       	lddsp	lr,sp[0x18]
80003776:	85 05       	st.w	r2[0x0],r5
80003778:	9d 0b       	st.w	lr[0x0],r11
8000377a:	40 4b       	lddsp	r11,sp[0x10]
8000377c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80003780:	2f 8d       	sub	sp,-32
80003782:	d8 32       	popm	r0-r7,pc

80003784 <__sprint_r>:
80003784:	d4 21       	pushm	r4-r7,lr
80003786:	14 97       	mov	r7,r10
80003788:	74 28       	ld.w	r8,r10[0x8]
8000378a:	58 08       	cp.w	r8,0
8000378c:	c0 41       	brne	80003794 <__sprint_r+0x10>
8000378e:	95 18       	st.w	r10[0x4],r8
80003790:	10 9c       	mov	r12,r8
80003792:	d8 22       	popm	r4-r7,pc
80003794:	e0 a0 18 b4 	rcall	800068fc <__sfvwrite_r>
80003798:	30 08       	mov	r8,0
8000379a:	8f 18       	st.w	r7[0x4],r8
8000379c:	8f 28       	st.w	r7[0x8],r8
8000379e:	d8 22       	popm	r4-r7,pc

800037a0 <_vfprintf_r>:
800037a0:	d4 31       	pushm	r0-r7,lr
800037a2:	fa cd 06 bc 	sub	sp,sp,1724
800037a6:	51 09       	stdsp	sp[0x40],r9
800037a8:	16 91       	mov	r1,r11
800037aa:	14 97       	mov	r7,r10
800037ac:	18 95       	mov	r5,r12
800037ae:	e0 a0 1a 1d 	rcall	80006be8 <_localeconv_r>
800037b2:	78 0c       	ld.w	r12,r12[0x0]
800037b4:	50 cc       	stdsp	sp[0x30],r12
800037b6:	58 05       	cp.w	r5,0
800037b8:	c0 70       	breq	800037c6 <_vfprintf_r+0x26>
800037ba:	6a 68       	ld.w	r8,r5[0x18]
800037bc:	58 08       	cp.w	r8,0
800037be:	c0 41       	brne	800037c6 <_vfprintf_r+0x26>
800037c0:	0a 9c       	mov	r12,r5
800037c2:	e0 a0 17 3d 	rcall	8000663c <__sinit>
800037c6:	fe c8 a4 1a 	sub	r8,pc,-23526
800037ca:	10 31       	cp.w	r1,r8
800037cc:	c0 31       	brne	800037d2 <_vfprintf_r+0x32>
800037ce:	6a 01       	ld.w	r1,r5[0x0]
800037d0:	c0 c8       	rjmp	800037e8 <_vfprintf_r+0x48>
800037d2:	fe c8 a4 06 	sub	r8,pc,-23546
800037d6:	10 31       	cp.w	r1,r8
800037d8:	c0 31       	brne	800037de <_vfprintf_r+0x3e>
800037da:	6a 11       	ld.w	r1,r5[0x4]
800037dc:	c0 68       	rjmp	800037e8 <_vfprintf_r+0x48>
800037de:	fe c8 a3 f2 	sub	r8,pc,-23566
800037e2:	10 31       	cp.w	r1,r8
800037e4:	eb f1 00 02 	ld.weq	r1,r5[0x8]
800037e8:	82 68       	ld.sh	r8,r1[0xc]
800037ea:	ed b8 00 03 	bld	r8,0x3
800037ee:	c0 41       	brne	800037f6 <_vfprintf_r+0x56>
800037f0:	62 48       	ld.w	r8,r1[0x10]
800037f2:	58 08       	cp.w	r8,0
800037f4:	c0 71       	brne	80003802 <_vfprintf_r+0x62>
800037f6:	02 9b       	mov	r11,r1
800037f8:	0a 9c       	mov	r12,r5
800037fa:	e0 a0 0f 5d 	rcall	800056b4 <__swsetup_r>
800037fe:	e0 81 0f 54 	brne	800056a6 <_vfprintf_r+0x1f06>
80003802:	82 68       	ld.sh	r8,r1[0xc]
80003804:	10 99       	mov	r9,r8
80003806:	e2 19 00 1a 	andl	r9,0x1a,COH
8000380a:	58 a9       	cp.w	r9,10
8000380c:	c3 c1       	brne	80003884 <_vfprintf_r+0xe4>
8000380e:	82 79       	ld.sh	r9,r1[0xe]
80003810:	30 0a       	mov	r10,0
80003812:	f4 09 19 00 	cp.h	r9,r10
80003816:	c3 75       	brlt	80003884 <_vfprintf_r+0xe4>
80003818:	a1 d8       	cbr	r8,0x1
8000381a:	fb 58 05 d0 	st.h	sp[1488],r8
8000381e:	62 88       	ld.w	r8,r1[0x20]
80003820:	fb 48 05 e4 	st.w	sp[1508],r8
80003824:	62 a8       	ld.w	r8,r1[0x28]
80003826:	fb 48 05 ec 	st.w	sp[1516],r8
8000382a:	fa c8 ff bc 	sub	r8,sp,-68
8000382e:	fb 48 05 d4 	st.w	sp[1492],r8
80003832:	fb 48 05 c4 	st.w	sp[1476],r8
80003836:	e0 68 04 00 	mov	r8,1024
8000383a:	fb 48 05 d8 	st.w	sp[1496],r8
8000383e:	fb 48 05 cc 	st.w	sp[1484],r8
80003842:	30 08       	mov	r8,0
80003844:	fb 59 05 d2 	st.h	sp[1490],r9
80003848:	0e 9a       	mov	r10,r7
8000384a:	41 09       	lddsp	r9,sp[0x40]
8000384c:	fa c7 fa 3c 	sub	r7,sp,-1476
80003850:	fb 48 05 dc 	st.w	sp[1500],r8
80003854:	0a 9c       	mov	r12,r5
80003856:	0e 9b       	mov	r11,r7
80003858:	ca 4f       	rcall	800037a0 <_vfprintf_r>
8000385a:	50 bc       	stdsp	sp[0x2c],r12
8000385c:	c0 95       	brlt	8000386e <_vfprintf_r+0xce>
8000385e:	0e 9b       	mov	r11,r7
80003860:	0a 9c       	mov	r12,r5
80003862:	e0 a0 16 15 	rcall	8000648c <_fflush_r>
80003866:	40 be       	lddsp	lr,sp[0x2c]
80003868:	f9 be 01 ff 	movne	lr,-1
8000386c:	50 be       	stdsp	sp[0x2c],lr
8000386e:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80003872:	ed b8 00 06 	bld	r8,0x6
80003876:	e0 81 0f 1a 	brne	800056aa <_vfprintf_r+0x1f0a>
8000387a:	82 68       	ld.sh	r8,r1[0xc]
8000387c:	a7 a8       	sbr	r8,0x6
8000387e:	a2 68       	st.h	r1[0xc],r8
80003880:	e0 8f 0f 15 	bral	800056aa <_vfprintf_r+0x1f0a>
80003884:	30 08       	mov	r8,0
80003886:	fb 48 06 b4 	st.w	sp[1716],r8
8000388a:	fb 48 06 90 	st.w	sp[1680],r8
8000388e:	fb 48 06 8c 	st.w	sp[1676],r8
80003892:	fb 48 06 b0 	st.w	sp[1712],r8
80003896:	30 08       	mov	r8,0
80003898:	30 09       	mov	r9,0
8000389a:	50 a7       	stdsp	sp[0x28],r7
8000389c:	50 78       	stdsp	sp[0x1c],r8
8000389e:	fa c3 f9 e0 	sub	r3,sp,-1568
800038a2:	3f f8       	mov	r8,-1
800038a4:	50 59       	stdsp	sp[0x14],r9
800038a6:	fb 43 06 88 	st.w	sp[1672],r3
800038aa:	fb 48 05 44 	st.w	sp[1348],r8
800038ae:	12 9c       	mov	r12,r9
800038b0:	50 69       	stdsp	sp[0x18],r9
800038b2:	50 d9       	stdsp	sp[0x34],r9
800038b4:	50 e9       	stdsp	sp[0x38],r9
800038b6:	50 b9       	stdsp	sp[0x2c],r9
800038b8:	12 97       	mov	r7,r9
800038ba:	0a 94       	mov	r4,r5
800038bc:	40 a2       	lddsp	r2,sp[0x28]
800038be:	32 5a       	mov	r10,37
800038c0:	30 08       	mov	r8,0
800038c2:	c0 28       	rjmp	800038c6 <_vfprintf_r+0x126>
800038c4:	2f f2       	sub	r2,-1
800038c6:	05 89       	ld.ub	r9,r2[0x0]
800038c8:	f0 09 18 00 	cp.b	r9,r8
800038cc:	5f 1b       	srne	r11
800038ce:	f4 09 18 00 	cp.b	r9,r10
800038d2:	5f 19       	srne	r9
800038d4:	f3 eb 00 0b 	and	r11,r9,r11
800038d8:	f0 0b 18 00 	cp.b	r11,r8
800038dc:	cf 41       	brne	800038c4 <_vfprintf_r+0x124>
800038de:	40 ab       	lddsp	r11,sp[0x28]
800038e0:	e4 0b 01 06 	sub	r6,r2,r11
800038e4:	c1 e0       	breq	80003920 <_vfprintf_r+0x180>
800038e6:	fa f8 06 90 	ld.w	r8,sp[1680]
800038ea:	0c 08       	add	r8,r6
800038ec:	87 0b       	st.w	r3[0x0],r11
800038ee:	fb 48 06 90 	st.w	sp[1680],r8
800038f2:	87 16       	st.w	r3[0x4],r6
800038f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800038f8:	2f f8       	sub	r8,-1
800038fa:	fb 48 06 8c 	st.w	sp[1676],r8
800038fe:	58 78       	cp.w	r8,7
80003900:	e0 89 00 04 	brgt	80003908 <_vfprintf_r+0x168>
80003904:	2f 83       	sub	r3,-8
80003906:	c0 a8       	rjmp	8000391a <_vfprintf_r+0x17a>
80003908:	fa ca f9 78 	sub	r10,sp,-1672
8000390c:	02 9b       	mov	r11,r1
8000390e:	08 9c       	mov	r12,r4
80003910:	c3 af       	rcall	80003784 <__sprint_r>
80003912:	e0 81 0e c6 	brne	8000569e <_vfprintf_r+0x1efe>
80003916:	fa c3 f9 e0 	sub	r3,sp,-1568
8000391a:	40 ba       	lddsp	r10,sp[0x2c]
8000391c:	0c 0a       	add	r10,r6
8000391e:	50 ba       	stdsp	sp[0x2c],r10
80003920:	05 89       	ld.ub	r9,r2[0x0]
80003922:	30 08       	mov	r8,0
80003924:	f0 09 18 00 	cp.b	r9,r8
80003928:	e0 80 0e aa 	breq	8000567c <_vfprintf_r+0x1edc>
8000392c:	30 09       	mov	r9,0
8000392e:	fb 68 06 bb 	st.b	sp[1723],r8
80003932:	0e 96       	mov	r6,r7
80003934:	e4 c8 ff ff 	sub	r8,r2,-1
80003938:	3f fe       	mov	lr,-1
8000393a:	50 93       	stdsp	sp[0x24],r3
8000393c:	50 41       	stdsp	sp[0x10],r1
8000393e:	0e 93       	mov	r3,r7
80003940:	04 91       	mov	r1,r2
80003942:	50 89       	stdsp	sp[0x20],r9
80003944:	50 a8       	stdsp	sp[0x28],r8
80003946:	50 2e       	stdsp	sp[0x8],lr
80003948:	50 39       	stdsp	sp[0xc],r9
8000394a:	12 95       	mov	r5,r9
8000394c:	12 90       	mov	r0,r9
8000394e:	10 97       	mov	r7,r8
80003950:	08 92       	mov	r2,r4
80003952:	c0 78       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003954:	3f fc       	mov	r12,-1
80003956:	08 97       	mov	r7,r4
80003958:	50 2c       	stdsp	sp[0x8],r12
8000395a:	c0 38       	rjmp	80003960 <_vfprintf_r+0x1c0>
8000395c:	30 0b       	mov	r11,0
8000395e:	50 3b       	stdsp	sp[0xc],r11
80003960:	0f 38       	ld.ub	r8,r7++
80003962:	c0 28       	rjmp	80003966 <_vfprintf_r+0x1c6>
80003964:	12 90       	mov	r0,r9
80003966:	f0 c9 00 20 	sub	r9,r8,32
8000396a:	e0 49 00 58 	cp.w	r9,88
8000396e:	e0 8b 0a 30 	brhi	80004dce <_vfprintf_r+0x162e>
80003972:	fe ca a9 6e 	sub	r10,pc,-22162
80003976:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000397a:	50 a7       	stdsp	sp[0x28],r7
8000397c:	50 80       	stdsp	sp[0x20],r0
8000397e:	0c 97       	mov	r7,r6
80003980:	04 94       	mov	r4,r2
80003982:	06 96       	mov	r6,r3
80003984:	02 92       	mov	r2,r1
80003986:	fe c9 a7 46 	sub	r9,pc,-22714
8000398a:	40 93       	lddsp	r3,sp[0x24]
8000398c:	10 90       	mov	r0,r8
8000398e:	40 41       	lddsp	r1,sp[0x10]
80003990:	50 d9       	stdsp	sp[0x34],r9
80003992:	e0 8f 08 8e 	bral	80004aae <_vfprintf_r+0x130e>
80003996:	30 08       	mov	r8,0
80003998:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000399c:	f0 09 18 00 	cp.b	r9,r8
800039a0:	ce 01       	brne	80003960 <_vfprintf_r+0x1c0>
800039a2:	32 08       	mov	r8,32
800039a4:	c6 e8       	rjmp	80003a80 <_vfprintf_r+0x2e0>
800039a6:	a1 a5       	sbr	r5,0x0
800039a8:	cd cb       	rjmp	80003960 <_vfprintf_r+0x1c0>
800039aa:	0f 89       	ld.ub	r9,r7[0x0]
800039ac:	f2 c8 00 30 	sub	r8,r9,48
800039b0:	58 98       	cp.w	r8,9
800039b2:	e0 8b 00 1d 	brhi	800039ec <_vfprintf_r+0x24c>
800039b6:	ee c8 ff ff 	sub	r8,r7,-1
800039ba:	30 0b       	mov	r11,0
800039bc:	23 09       	sub	r9,48
800039be:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
800039c2:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
800039c6:	11 39       	ld.ub	r9,r8++
800039c8:	f2 ca 00 30 	sub	r10,r9,48
800039cc:	58 9a       	cp.w	r10,9
800039ce:	fe 98 ff f7 	brls	800039bc <_vfprintf_r+0x21c>
800039d2:	e0 49 00 24 	cp.w	r9,36
800039d6:	cc 31       	brne	8000395c <_vfprintf_r+0x1bc>
800039d8:	e0 4b 00 20 	cp.w	r11,32
800039dc:	e0 89 0e 60 	brgt	8000569c <_vfprintf_r+0x1efc>
800039e0:	20 1b       	sub	r11,1
800039e2:	fa f9 06 b4 	ld.w	r9,sp[1716]
800039e6:	12 3b       	cp.w	r11,r9
800039e8:	c0 95       	brlt	800039fa <_vfprintf_r+0x25a>
800039ea:	c1 08       	rjmp	80003a0a <_vfprintf_r+0x26a>
800039ec:	fa f9 06 b4 	ld.w	r9,sp[1716]
800039f0:	ec ca ff ff 	sub	r10,r6,-1
800039f4:	12 36       	cp.w	r6,r9
800039f6:	c1 f5       	brlt	80003a34 <_vfprintf_r+0x294>
800039f8:	c2 68       	rjmp	80003a44 <_vfprintf_r+0x2a4>
800039fa:	fa ce f9 44 	sub	lr,sp,-1724
800039fe:	10 97       	mov	r7,r8
80003a00:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80003a04:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80003a08:	c3 58       	rjmp	80003a72 <_vfprintf_r+0x2d2>
80003a0a:	10 97       	mov	r7,r8
80003a0c:	fa c8 f9 50 	sub	r8,sp,-1712
80003a10:	1a d8       	st.w	--sp,r8
80003a12:	fa c8 fa b8 	sub	r8,sp,-1352
80003a16:	1a d8       	st.w	--sp,r8
80003a18:	fa c8 fb b4 	sub	r8,sp,-1100
80003a1c:	02 9a       	mov	r10,r1
80003a1e:	1a d8       	st.w	--sp,r8
80003a20:	04 9c       	mov	r12,r2
80003a22:	fa c8 f9 40 	sub	r8,sp,-1728
80003a26:	fa c9 ff b4 	sub	r9,sp,-76
80003a2a:	fe b0 fd 23 	rcall	80003470 <get_arg>
80003a2e:	2f dd       	sub	sp,-12
80003a30:	78 00       	ld.w	r0,r12[0x0]
80003a32:	c2 08       	rjmp	80003a72 <_vfprintf_r+0x2d2>
80003a34:	fa cc f9 44 	sub	r12,sp,-1724
80003a38:	14 96       	mov	r6,r10
80003a3a:	f8 03 00 38 	add	r8,r12,r3<<0x3
80003a3e:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80003a42:	c1 88       	rjmp	80003a72 <_vfprintf_r+0x2d2>
80003a44:	41 08       	lddsp	r8,sp[0x40]
80003a46:	59 f9       	cp.w	r9,31
80003a48:	e0 89 00 11 	brgt	80003a6a <_vfprintf_r+0x2ca>
80003a4c:	f0 cb ff fc 	sub	r11,r8,-4
80003a50:	51 0b       	stdsp	sp[0x40],r11
80003a52:	70 00       	ld.w	r0,r8[0x0]
80003a54:	fa cb f9 44 	sub	r11,sp,-1724
80003a58:	f6 09 00 38 	add	r8,r11,r9<<0x3
80003a5c:	f1 40 fd 88 	st.w	r8[-632],r0
80003a60:	2f f9       	sub	r9,-1
80003a62:	14 96       	mov	r6,r10
80003a64:	fb 49 06 b4 	st.w	sp[1716],r9
80003a68:	c0 58       	rjmp	80003a72 <_vfprintf_r+0x2d2>
80003a6a:	70 00       	ld.w	r0,r8[0x0]
80003a6c:	14 96       	mov	r6,r10
80003a6e:	2f c8       	sub	r8,-4
80003a70:	51 08       	stdsp	sp[0x40],r8
80003a72:	58 00       	cp.w	r0,0
80003a74:	fe 94 ff 76 	brge	80003960 <_vfprintf_r+0x1c0>
80003a78:	5c 30       	neg	r0
80003a7a:	a3 a5       	sbr	r5,0x2
80003a7c:	c7 2b       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003a7e:	32 b8       	mov	r8,43
80003a80:	fb 68 06 bb 	st.b	sp[1723],r8
80003a84:	c6 eb       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003a86:	0f 38       	ld.ub	r8,r7++
80003a88:	e0 48 00 2a 	cp.w	r8,42
80003a8c:	c0 30       	breq	80003a92 <_vfprintf_r+0x2f2>
80003a8e:	30 09       	mov	r9,0
80003a90:	c7 98       	rjmp	80003b82 <_vfprintf_r+0x3e2>
80003a92:	0f 88       	ld.ub	r8,r7[0x0]
80003a94:	f0 c9 00 30 	sub	r9,r8,48
80003a98:	58 99       	cp.w	r9,9
80003a9a:	e0 8b 00 1f 	brhi	80003ad8 <_vfprintf_r+0x338>
80003a9e:	ee c4 ff ff 	sub	r4,r7,-1
80003aa2:	30 0b       	mov	r11,0
80003aa4:	23 08       	sub	r8,48
80003aa6:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80003aaa:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80003aae:	09 38       	ld.ub	r8,r4++
80003ab0:	f0 c9 00 30 	sub	r9,r8,48
80003ab4:	58 99       	cp.w	r9,9
80003ab6:	fe 98 ff f7 	brls	80003aa4 <_vfprintf_r+0x304>
80003aba:	e0 48 00 24 	cp.w	r8,36
80003abe:	fe 91 ff 4f 	brne	8000395c <_vfprintf_r+0x1bc>
80003ac2:	e0 4b 00 20 	cp.w	r11,32
80003ac6:	e0 89 0d eb 	brgt	8000569c <_vfprintf_r+0x1efc>
80003aca:	20 1b       	sub	r11,1
80003acc:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003ad0:	10 3b       	cp.w	r11,r8
80003ad2:	c0 a5       	brlt	80003ae6 <_vfprintf_r+0x346>
80003ad4:	c1 18       	rjmp	80003af6 <_vfprintf_r+0x356>
80003ad6:	d7 03       	nop
80003ad8:	fa fa 06 b4 	ld.w	r10,sp[1716]
80003adc:	ec c9 ff ff 	sub	r9,r6,-1
80003ae0:	14 36       	cp.w	r6,r10
80003ae2:	c1 f5       	brlt	80003b20 <_vfprintf_r+0x380>
80003ae4:	c2 88       	rjmp	80003b34 <_vfprintf_r+0x394>
80003ae6:	fa ca f9 44 	sub	r10,sp,-1724
80003aea:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80003aee:	f6 fb fd 88 	ld.w	r11,r11[-632]
80003af2:	50 2b       	stdsp	sp[0x8],r11
80003af4:	c3 c8       	rjmp	80003b6c <_vfprintf_r+0x3cc>
80003af6:	fa c8 f9 50 	sub	r8,sp,-1712
80003afa:	1a d8       	st.w	--sp,r8
80003afc:	fa c8 fa b8 	sub	r8,sp,-1352
80003b00:	1a d8       	st.w	--sp,r8
80003b02:	fa c8 fb b4 	sub	r8,sp,-1100
80003b06:	02 9a       	mov	r10,r1
80003b08:	1a d8       	st.w	--sp,r8
80003b0a:	04 9c       	mov	r12,r2
80003b0c:	fa c8 f9 40 	sub	r8,sp,-1728
80003b10:	fa c9 ff b4 	sub	r9,sp,-76
80003b14:	fe b0 fc ae 	rcall	80003470 <get_arg>
80003b18:	2f dd       	sub	sp,-12
80003b1a:	78 0c       	ld.w	r12,r12[0x0]
80003b1c:	50 2c       	stdsp	sp[0x8],r12
80003b1e:	c2 78       	rjmp	80003b6c <_vfprintf_r+0x3cc>
80003b20:	12 96       	mov	r6,r9
80003b22:	0e 94       	mov	r4,r7
80003b24:	fa c9 f9 44 	sub	r9,sp,-1724
80003b28:	f2 03 00 38 	add	r8,r9,r3<<0x3
80003b2c:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80003b30:	50 28       	stdsp	sp[0x8],r8
80003b32:	c1 d8       	rjmp	80003b6c <_vfprintf_r+0x3cc>
80003b34:	41 08       	lddsp	r8,sp[0x40]
80003b36:	59 fa       	cp.w	r10,31
80003b38:	e0 89 00 14 	brgt	80003b60 <_vfprintf_r+0x3c0>
80003b3c:	f0 cb ff fc 	sub	r11,r8,-4
80003b40:	70 08       	ld.w	r8,r8[0x0]
80003b42:	51 0b       	stdsp	sp[0x40],r11
80003b44:	50 28       	stdsp	sp[0x8],r8
80003b46:	fa c6 f9 44 	sub	r6,sp,-1724
80003b4a:	40 2e       	lddsp	lr,sp[0x8]
80003b4c:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80003b50:	f1 4e fd 88 	st.w	r8[-632],lr
80003b54:	2f fa       	sub	r10,-1
80003b56:	0e 94       	mov	r4,r7
80003b58:	fb 4a 06 b4 	st.w	sp[1716],r10
80003b5c:	12 96       	mov	r6,r9
80003b5e:	c0 78       	rjmp	80003b6c <_vfprintf_r+0x3cc>
80003b60:	70 0c       	ld.w	r12,r8[0x0]
80003b62:	0e 94       	mov	r4,r7
80003b64:	2f c8       	sub	r8,-4
80003b66:	50 2c       	stdsp	sp[0x8],r12
80003b68:	12 96       	mov	r6,r9
80003b6a:	51 08       	stdsp	sp[0x40],r8
80003b6c:	40 2b       	lddsp	r11,sp[0x8]
80003b6e:	58 0b       	cp.w	r11,0
80003b70:	fe 95 fe f2 	brlt	80003954 <_vfprintf_r+0x1b4>
80003b74:	08 97       	mov	r7,r4
80003b76:	cf 5a       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003b78:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003b7c:	0f 38       	ld.ub	r8,r7++
80003b7e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80003b82:	f0 ca 00 30 	sub	r10,r8,48
80003b86:	58 9a       	cp.w	r10,9
80003b88:	fe 98 ff f8 	brls	80003b78 <_vfprintf_r+0x3d8>
80003b8c:	3f fa       	mov	r10,-1
80003b8e:	f2 0a 0c 49 	max	r9,r9,r10
80003b92:	50 29       	stdsp	sp[0x8],r9
80003b94:	ce 9a       	rjmp	80003966 <_vfprintf_r+0x1c6>
80003b96:	a7 b5       	sbr	r5,0x7
80003b98:	ce 4a       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003b9a:	30 09       	mov	r9,0
80003b9c:	23 08       	sub	r8,48
80003b9e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003ba2:	f0 09 00 19 	add	r9,r8,r9<<0x1
80003ba6:	0f 38       	ld.ub	r8,r7++
80003ba8:	f0 ca 00 30 	sub	r10,r8,48
80003bac:	58 9a       	cp.w	r10,9
80003bae:	fe 98 ff f7 	brls	80003b9c <_vfprintf_r+0x3fc>
80003bb2:	e0 48 00 24 	cp.w	r8,36
80003bb6:	fe 91 fe d7 	brne	80003964 <_vfprintf_r+0x1c4>
80003bba:	e0 49 00 20 	cp.w	r9,32
80003bbe:	e0 89 0d 6f 	brgt	8000569c <_vfprintf_r+0x1efc>
80003bc2:	f2 c3 00 01 	sub	r3,r9,1
80003bc6:	30 19       	mov	r9,1
80003bc8:	50 39       	stdsp	sp[0xc],r9
80003bca:	cc ba       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003bcc:	a3 b5       	sbr	r5,0x3
80003bce:	cc 9a       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003bd0:	a7 a5       	sbr	r5,0x6
80003bd2:	cc 7a       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003bd4:	0a 98       	mov	r8,r5
80003bd6:	a5 b5       	sbr	r5,0x5
80003bd8:	a5 a8       	sbr	r8,0x4
80003bda:	0f 89       	ld.ub	r9,r7[0x0]
80003bdc:	36 ce       	mov	lr,108
80003bde:	fc 09 18 00 	cp.b	r9,lr
80003be2:	f7 b7 00 ff 	subeq	r7,-1
80003be6:	f0 05 17 10 	movne	r5,r8
80003bea:	cb ba       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003bec:	a5 b5       	sbr	r5,0x5
80003bee:	cb 9a       	rjmp	80003960 <_vfprintf_r+0x1c0>
80003bf0:	50 a7       	stdsp	sp[0x28],r7
80003bf2:	50 80       	stdsp	sp[0x20],r0
80003bf4:	0c 97       	mov	r7,r6
80003bf6:	10 90       	mov	r0,r8
80003bf8:	06 96       	mov	r6,r3
80003bfa:	04 94       	mov	r4,r2
80003bfc:	40 93       	lddsp	r3,sp[0x24]
80003bfe:	02 92       	mov	r2,r1
80003c00:	0e 99       	mov	r9,r7
80003c02:	40 41       	lddsp	r1,sp[0x10]
80003c04:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003c08:	40 3c       	lddsp	r12,sp[0xc]
80003c0a:	58 0c       	cp.w	r12,0
80003c0c:	c1 d0       	breq	80003c46 <_vfprintf_r+0x4a6>
80003c0e:	10 36       	cp.w	r6,r8
80003c10:	c0 64       	brge	80003c1c <_vfprintf_r+0x47c>
80003c12:	fa cb f9 44 	sub	r11,sp,-1724
80003c16:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003c1a:	c1 d8       	rjmp	80003c54 <_vfprintf_r+0x4b4>
80003c1c:	fa c8 f9 50 	sub	r8,sp,-1712
80003c20:	1a d8       	st.w	--sp,r8
80003c22:	fa c8 fa b8 	sub	r8,sp,-1352
80003c26:	1a d8       	st.w	--sp,r8
80003c28:	fa c8 fb b4 	sub	r8,sp,-1100
80003c2c:	1a d8       	st.w	--sp,r8
80003c2e:	fa c8 f9 40 	sub	r8,sp,-1728
80003c32:	fa c9 ff b4 	sub	r9,sp,-76
80003c36:	04 9a       	mov	r10,r2
80003c38:	0c 9b       	mov	r11,r6
80003c3a:	08 9c       	mov	r12,r4
80003c3c:	fe b0 fc 1a 	rcall	80003470 <get_arg>
80003c40:	2f dd       	sub	sp,-12
80003c42:	19 b8       	ld.ub	r8,r12[0x3]
80003c44:	c2 28       	rjmp	80003c88 <_vfprintf_r+0x4e8>
80003c46:	2f f7       	sub	r7,-1
80003c48:	10 39       	cp.w	r9,r8
80003c4a:	c0 84       	brge	80003c5a <_vfprintf_r+0x4ba>
80003c4c:	fa ca f9 44 	sub	r10,sp,-1724
80003c50:	f4 06 00 36 	add	r6,r10,r6<<0x3
80003c54:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80003c58:	c1 88       	rjmp	80003c88 <_vfprintf_r+0x4e8>
80003c5a:	41 09       	lddsp	r9,sp[0x40]
80003c5c:	59 f8       	cp.w	r8,31
80003c5e:	e0 89 00 12 	brgt	80003c82 <_vfprintf_r+0x4e2>
80003c62:	f2 ca ff fc 	sub	r10,r9,-4
80003c66:	51 0a       	stdsp	sp[0x40],r10
80003c68:	72 09       	ld.w	r9,r9[0x0]
80003c6a:	fa c6 f9 44 	sub	r6,sp,-1724
80003c6e:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80003c72:	2f f8       	sub	r8,-1
80003c74:	f5 49 fd 88 	st.w	r10[-632],r9
80003c78:	fb 48 06 b4 	st.w	sp[1716],r8
80003c7c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80003c80:	c0 48       	rjmp	80003c88 <_vfprintf_r+0x4e8>
80003c82:	13 b8       	ld.ub	r8,r9[0x3]
80003c84:	2f c9       	sub	r9,-4
80003c86:	51 09       	stdsp	sp[0x40],r9
80003c88:	fb 68 06 60 	st.b	sp[1632],r8
80003c8c:	30 0e       	mov	lr,0
80003c8e:	30 08       	mov	r8,0
80003c90:	30 12       	mov	r2,1
80003c92:	fb 68 06 bb 	st.b	sp[1723],r8
80003c96:	50 2e       	stdsp	sp[0x8],lr
80003c98:	e0 8f 08 ad 	bral	80004df2 <_vfprintf_r+0x1652>
80003c9c:	50 a7       	stdsp	sp[0x28],r7
80003c9e:	50 80       	stdsp	sp[0x20],r0
80003ca0:	0c 97       	mov	r7,r6
80003ca2:	04 94       	mov	r4,r2
80003ca4:	06 96       	mov	r6,r3
80003ca6:	02 92       	mov	r2,r1
80003ca8:	40 93       	lddsp	r3,sp[0x24]
80003caa:	10 90       	mov	r0,r8
80003cac:	40 41       	lddsp	r1,sp[0x10]
80003cae:	a5 a5       	sbr	r5,0x4
80003cb0:	c0 a8       	rjmp	80003cc4 <_vfprintf_r+0x524>
80003cb2:	50 a7       	stdsp	sp[0x28],r7
80003cb4:	50 80       	stdsp	sp[0x20],r0
80003cb6:	0c 97       	mov	r7,r6
80003cb8:	04 94       	mov	r4,r2
80003cba:	06 96       	mov	r6,r3
80003cbc:	02 92       	mov	r2,r1
80003cbe:	40 93       	lddsp	r3,sp[0x24]
80003cc0:	10 90       	mov	r0,r8
80003cc2:	40 41       	lddsp	r1,sp[0x10]
80003cc4:	ed b5 00 05 	bld	r5,0x5
80003cc8:	c5 11       	brne	80003d6a <_vfprintf_r+0x5ca>
80003cca:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003cce:	40 3c       	lddsp	r12,sp[0xc]
80003cd0:	58 0c       	cp.w	r12,0
80003cd2:	c1 e0       	breq	80003d0e <_vfprintf_r+0x56e>
80003cd4:	10 36       	cp.w	r6,r8
80003cd6:	c0 64       	brge	80003ce2 <_vfprintf_r+0x542>
80003cd8:	fa cb f9 44 	sub	r11,sp,-1724
80003cdc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003ce0:	c2 08       	rjmp	80003d20 <_vfprintf_r+0x580>
80003ce2:	fa c8 f9 50 	sub	r8,sp,-1712
80003ce6:	1a d8       	st.w	--sp,r8
80003ce8:	fa c8 fa b8 	sub	r8,sp,-1352
80003cec:	0c 9b       	mov	r11,r6
80003cee:	1a d8       	st.w	--sp,r8
80003cf0:	fa c8 fb b4 	sub	r8,sp,-1100
80003cf4:	1a d8       	st.w	--sp,r8
80003cf6:	fa c9 ff b4 	sub	r9,sp,-76
80003cfa:	fa c8 f9 40 	sub	r8,sp,-1728
80003cfe:	04 9a       	mov	r10,r2
80003d00:	08 9c       	mov	r12,r4
80003d02:	fe b0 fb b7 	rcall	80003470 <get_arg>
80003d06:	2f dd       	sub	sp,-12
80003d08:	78 1b       	ld.w	r11,r12[0x4]
80003d0a:	78 09       	ld.w	r9,r12[0x0]
80003d0c:	c2 b8       	rjmp	80003d62 <_vfprintf_r+0x5c2>
80003d0e:	ee ca ff ff 	sub	r10,r7,-1
80003d12:	10 37       	cp.w	r7,r8
80003d14:	c0 b4       	brge	80003d2a <_vfprintf_r+0x58a>
80003d16:	fa c9 f9 44 	sub	r9,sp,-1724
80003d1a:	14 97       	mov	r7,r10
80003d1c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003d20:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003d24:	ec f9 fd 88 	ld.w	r9,r6[-632]
80003d28:	c1 d8       	rjmp	80003d62 <_vfprintf_r+0x5c2>
80003d2a:	41 09       	lddsp	r9,sp[0x40]
80003d2c:	59 f8       	cp.w	r8,31
80003d2e:	e0 89 00 14 	brgt	80003d56 <_vfprintf_r+0x5b6>
80003d32:	f2 cb ff f8 	sub	r11,r9,-8
80003d36:	51 0b       	stdsp	sp[0x40],r11
80003d38:	fa c6 f9 44 	sub	r6,sp,-1724
80003d3c:	72 1b       	ld.w	r11,r9[0x4]
80003d3e:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80003d42:	72 09       	ld.w	r9,r9[0x0]
80003d44:	f9 4b fd 8c 	st.w	r12[-628],r11
80003d48:	f9 49 fd 88 	st.w	r12[-632],r9
80003d4c:	2f f8       	sub	r8,-1
80003d4e:	14 97       	mov	r7,r10
80003d50:	fb 48 06 b4 	st.w	sp[1716],r8
80003d54:	c0 78       	rjmp	80003d62 <_vfprintf_r+0x5c2>
80003d56:	f2 c8 ff f8 	sub	r8,r9,-8
80003d5a:	72 1b       	ld.w	r11,r9[0x4]
80003d5c:	14 97       	mov	r7,r10
80003d5e:	51 08       	stdsp	sp[0x40],r8
80003d60:	72 09       	ld.w	r9,r9[0x0]
80003d62:	16 98       	mov	r8,r11
80003d64:	fa e9 00 00 	st.d	sp[0],r8
80003d68:	ca e8       	rjmp	80003ec4 <_vfprintf_r+0x724>
80003d6a:	ed b5 00 04 	bld	r5,0x4
80003d6e:	c1 71       	brne	80003d9c <_vfprintf_r+0x5fc>
80003d70:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003d74:	40 3e       	lddsp	lr,sp[0xc]
80003d76:	58 0e       	cp.w	lr,0
80003d78:	c0 80       	breq	80003d88 <_vfprintf_r+0x5e8>
80003d7a:	10 36       	cp.w	r6,r8
80003d7c:	c6 94       	brge	80003e4e <_vfprintf_r+0x6ae>
80003d7e:	fa cc f9 44 	sub	r12,sp,-1724
80003d82:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003d86:	c8 28       	rjmp	80003e8a <_vfprintf_r+0x6ea>
80003d88:	ee ca ff ff 	sub	r10,r7,-1
80003d8c:	10 37       	cp.w	r7,r8
80003d8e:	e0 84 00 81 	brge	80003e90 <_vfprintf_r+0x6f0>
80003d92:	fa cb f9 44 	sub	r11,sp,-1724
80003d96:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003d9a:	c7 78       	rjmp	80003e88 <_vfprintf_r+0x6e8>
80003d9c:	ed b5 00 06 	bld	r5,0x6
80003da0:	c4 b1       	brne	80003e36 <_vfprintf_r+0x696>
80003da2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003da6:	40 3c       	lddsp	r12,sp[0xc]
80003da8:	58 0c       	cp.w	r12,0
80003daa:	c1 d0       	breq	80003de4 <_vfprintf_r+0x644>
80003dac:	10 36       	cp.w	r6,r8
80003dae:	c0 64       	brge	80003dba <_vfprintf_r+0x61a>
80003db0:	fa cb f9 44 	sub	r11,sp,-1724
80003db4:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003db8:	c1 f8       	rjmp	80003df6 <_vfprintf_r+0x656>
80003dba:	fa c8 f9 50 	sub	r8,sp,-1712
80003dbe:	1a d8       	st.w	--sp,r8
80003dc0:	fa c8 fa b8 	sub	r8,sp,-1352
80003dc4:	1a d8       	st.w	--sp,r8
80003dc6:	fa c8 fb b4 	sub	r8,sp,-1100
80003dca:	1a d8       	st.w	--sp,r8
80003dcc:	fa c8 f9 40 	sub	r8,sp,-1728
80003dd0:	fa c9 ff b4 	sub	r9,sp,-76
80003dd4:	04 9a       	mov	r10,r2
80003dd6:	0c 9b       	mov	r11,r6
80003dd8:	08 9c       	mov	r12,r4
80003dda:	fe b0 fb 4b 	rcall	80003470 <get_arg>
80003dde:	2f dd       	sub	sp,-12
80003de0:	98 18       	ld.sh	r8,r12[0x2]
80003de2:	c2 68       	rjmp	80003e2e <_vfprintf_r+0x68e>
80003de4:	ee ca ff ff 	sub	r10,r7,-1
80003de8:	10 37       	cp.w	r7,r8
80003dea:	c0 94       	brge	80003dfc <_vfprintf_r+0x65c>
80003dec:	fa c9 f9 44 	sub	r9,sp,-1724
80003df0:	14 97       	mov	r7,r10
80003df2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003df6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80003dfa:	c1 a8       	rjmp	80003e2e <_vfprintf_r+0x68e>
80003dfc:	41 09       	lddsp	r9,sp[0x40]
80003dfe:	59 f8       	cp.w	r8,31
80003e00:	e0 89 00 13 	brgt	80003e26 <_vfprintf_r+0x686>
80003e04:	f2 cb ff fc 	sub	r11,r9,-4
80003e08:	51 0b       	stdsp	sp[0x40],r11
80003e0a:	72 09       	ld.w	r9,r9[0x0]
80003e0c:	fa c6 f9 44 	sub	r6,sp,-1724
80003e10:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80003e14:	2f f8       	sub	r8,-1
80003e16:	f7 49 fd 88 	st.w	r11[-632],r9
80003e1a:	fb 48 06 b4 	st.w	sp[1716],r8
80003e1e:	14 97       	mov	r7,r10
80003e20:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80003e24:	c0 58       	rjmp	80003e2e <_vfprintf_r+0x68e>
80003e26:	92 18       	ld.sh	r8,r9[0x2]
80003e28:	14 97       	mov	r7,r10
80003e2a:	2f c9       	sub	r9,-4
80003e2c:	51 09       	stdsp	sp[0x40],r9
80003e2e:	50 18       	stdsp	sp[0x4],r8
80003e30:	bf 58       	asr	r8,0x1f
80003e32:	50 08       	stdsp	sp[0x0],r8
80003e34:	c4 88       	rjmp	80003ec4 <_vfprintf_r+0x724>
80003e36:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003e3a:	40 3c       	lddsp	r12,sp[0xc]
80003e3c:	58 0c       	cp.w	r12,0
80003e3e:	c1 d0       	breq	80003e78 <_vfprintf_r+0x6d8>
80003e40:	10 36       	cp.w	r6,r8
80003e42:	c0 64       	brge	80003e4e <_vfprintf_r+0x6ae>
80003e44:	fa cb f9 44 	sub	r11,sp,-1724
80003e48:	f6 06 00 36 	add	r6,r11,r6<<0x3
80003e4c:	c1 f8       	rjmp	80003e8a <_vfprintf_r+0x6ea>
80003e4e:	fa c8 f9 50 	sub	r8,sp,-1712
80003e52:	1a d8       	st.w	--sp,r8
80003e54:	fa c8 fa b8 	sub	r8,sp,-1352
80003e58:	0c 9b       	mov	r11,r6
80003e5a:	1a d8       	st.w	--sp,r8
80003e5c:	fa c8 fb b4 	sub	r8,sp,-1100
80003e60:	04 9a       	mov	r10,r2
80003e62:	1a d8       	st.w	--sp,r8
80003e64:	08 9c       	mov	r12,r4
80003e66:	fa c8 f9 40 	sub	r8,sp,-1728
80003e6a:	fa c9 ff b4 	sub	r9,sp,-76
80003e6e:	fe b0 fb 01 	rcall	80003470 <get_arg>
80003e72:	2f dd       	sub	sp,-12
80003e74:	78 0b       	ld.w	r11,r12[0x0]
80003e76:	c2 48       	rjmp	80003ebe <_vfprintf_r+0x71e>
80003e78:	ee ca ff ff 	sub	r10,r7,-1
80003e7c:	10 37       	cp.w	r7,r8
80003e7e:	c0 94       	brge	80003e90 <_vfprintf_r+0x6f0>
80003e80:	fa c9 f9 44 	sub	r9,sp,-1724
80003e84:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003e88:	14 97       	mov	r7,r10
80003e8a:	ec fb fd 88 	ld.w	r11,r6[-632]
80003e8e:	c1 88       	rjmp	80003ebe <_vfprintf_r+0x71e>
80003e90:	41 09       	lddsp	r9,sp[0x40]
80003e92:	59 f8       	cp.w	r8,31
80003e94:	e0 89 00 11 	brgt	80003eb6 <_vfprintf_r+0x716>
80003e98:	f2 cb ff fc 	sub	r11,r9,-4
80003e9c:	51 0b       	stdsp	sp[0x40],r11
80003e9e:	fa c6 f9 44 	sub	r6,sp,-1724
80003ea2:	72 0b       	ld.w	r11,r9[0x0]
80003ea4:	ec 08 00 39 	add	r9,r6,r8<<0x3
80003ea8:	f3 4b fd 88 	st.w	r9[-632],r11
80003eac:	2f f8       	sub	r8,-1
80003eae:	14 97       	mov	r7,r10
80003eb0:	fb 48 06 b4 	st.w	sp[1716],r8
80003eb4:	c0 58       	rjmp	80003ebe <_vfprintf_r+0x71e>
80003eb6:	72 0b       	ld.w	r11,r9[0x0]
80003eb8:	14 97       	mov	r7,r10
80003eba:	2f c9       	sub	r9,-4
80003ebc:	51 09       	stdsp	sp[0x40],r9
80003ebe:	50 1b       	stdsp	sp[0x4],r11
80003ec0:	bf 5b       	asr	r11,0x1f
80003ec2:	50 0b       	stdsp	sp[0x0],r11
80003ec4:	fa ea 00 00 	ld.d	r10,sp[0]
80003ec8:	58 0a       	cp.w	r10,0
80003eca:	5c 2b       	cpc	r11
80003ecc:	c0 e4       	brge	80003ee8 <_vfprintf_r+0x748>
80003ece:	30 08       	mov	r8,0
80003ed0:	fa ea 00 00 	ld.d	r10,sp[0]
80003ed4:	30 09       	mov	r9,0
80003ed6:	f0 0a 01 0a 	sub	r10,r8,r10
80003eda:	f2 0b 01 4b 	sbc	r11,r9,r11
80003ede:	32 d8       	mov	r8,45
80003ee0:	fa eb 00 00 	st.d	sp[0],r10
80003ee4:	fb 68 06 bb 	st.b	sp[1723],r8
80003ee8:	30 18       	mov	r8,1
80003eea:	e0 8f 06 fa 	bral	80004cde <_vfprintf_r+0x153e>
80003eee:	50 a7       	stdsp	sp[0x28],r7
80003ef0:	50 80       	stdsp	sp[0x20],r0
80003ef2:	0c 97       	mov	r7,r6
80003ef4:	04 94       	mov	r4,r2
80003ef6:	06 96       	mov	r6,r3
80003ef8:	02 92       	mov	r2,r1
80003efa:	40 93       	lddsp	r3,sp[0x24]
80003efc:	10 90       	mov	r0,r8
80003efe:	40 41       	lddsp	r1,sp[0x10]
80003f00:	0e 99       	mov	r9,r7
80003f02:	ed b5 00 03 	bld	r5,0x3
80003f06:	c4 11       	brne	80003f88 <_vfprintf_r+0x7e8>
80003f08:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f0c:	40 3a       	lddsp	r10,sp[0xc]
80003f0e:	58 0a       	cp.w	r10,0
80003f10:	c1 90       	breq	80003f42 <_vfprintf_r+0x7a2>
80003f12:	10 36       	cp.w	r6,r8
80003f14:	c6 45       	brlt	80003fdc <_vfprintf_r+0x83c>
80003f16:	fa c8 f9 50 	sub	r8,sp,-1712
80003f1a:	1a d8       	st.w	--sp,r8
80003f1c:	fa c8 fa b8 	sub	r8,sp,-1352
80003f20:	1a d8       	st.w	--sp,r8
80003f22:	fa c8 fb b4 	sub	r8,sp,-1100
80003f26:	0c 9b       	mov	r11,r6
80003f28:	1a d8       	st.w	--sp,r8
80003f2a:	04 9a       	mov	r10,r2
80003f2c:	fa c8 f9 40 	sub	r8,sp,-1728
80003f30:	fa c9 ff b4 	sub	r9,sp,-76
80003f34:	08 9c       	mov	r12,r4
80003f36:	fe b0 fa 9d 	rcall	80003470 <get_arg>
80003f3a:	2f dd       	sub	sp,-12
80003f3c:	78 16       	ld.w	r6,r12[0x4]
80003f3e:	50 76       	stdsp	sp[0x1c],r6
80003f40:	c4 88       	rjmp	80003fd0 <_vfprintf_r+0x830>
80003f42:	2f f7       	sub	r7,-1
80003f44:	10 39       	cp.w	r9,r8
80003f46:	c0 c4       	brge	80003f5e <_vfprintf_r+0x7be>
80003f48:	fa ce f9 44 	sub	lr,sp,-1724
80003f4c:	fc 06 00 36 	add	r6,lr,r6<<0x3
80003f50:	ec fc fd 8c 	ld.w	r12,r6[-628]
80003f54:	50 7c       	stdsp	sp[0x1c],r12
80003f56:	ec f6 fd 88 	ld.w	r6,r6[-632]
80003f5a:	50 56       	stdsp	sp[0x14],r6
80003f5c:	c6 68       	rjmp	80004028 <_vfprintf_r+0x888>
80003f5e:	41 09       	lddsp	r9,sp[0x40]
80003f60:	59 f8       	cp.w	r8,31
80003f62:	e0 89 00 10 	brgt	80003f82 <_vfprintf_r+0x7e2>
80003f66:	f2 ca ff f8 	sub	r10,r9,-8
80003f6a:	72 1b       	ld.w	r11,r9[0x4]
80003f6c:	51 0a       	stdsp	sp[0x40],r10
80003f6e:	72 09       	ld.w	r9,r9[0x0]
80003f70:	fa ca f9 44 	sub	r10,sp,-1724
80003f74:	50 7b       	stdsp	sp[0x1c],r11
80003f76:	50 59       	stdsp	sp[0x14],r9
80003f78:	f4 08 00 39 	add	r9,r10,r8<<0x3
80003f7c:	40 5b       	lddsp	r11,sp[0x14]
80003f7e:	40 7a       	lddsp	r10,sp[0x1c]
80003f80:	c4 78       	rjmp	8000400e <_vfprintf_r+0x86e>
80003f82:	72 18       	ld.w	r8,r9[0x4]
80003f84:	50 78       	stdsp	sp[0x1c],r8
80003f86:	c4 c8       	rjmp	8000401e <_vfprintf_r+0x87e>
80003f88:	fa f8 06 b4 	ld.w	r8,sp[1716]
80003f8c:	40 3e       	lddsp	lr,sp[0xc]
80003f8e:	58 0e       	cp.w	lr,0
80003f90:	c2 30       	breq	80003fd6 <_vfprintf_r+0x836>
80003f92:	10 36       	cp.w	r6,r8
80003f94:	c0 94       	brge	80003fa6 <_vfprintf_r+0x806>
80003f96:	fa cc f9 44 	sub	r12,sp,-1724
80003f9a:	f8 06 00 36 	add	r6,r12,r6<<0x3
80003f9e:	ec fb fd 8c 	ld.w	r11,r6[-628]
80003fa2:	50 7b       	stdsp	sp[0x1c],r11
80003fa4:	cd 9b       	rjmp	80003f56 <_vfprintf_r+0x7b6>
80003fa6:	fa c8 f9 50 	sub	r8,sp,-1712
80003faa:	1a d8       	st.w	--sp,r8
80003fac:	fa c8 fa b8 	sub	r8,sp,-1352
80003fb0:	04 9a       	mov	r10,r2
80003fb2:	1a d8       	st.w	--sp,r8
80003fb4:	fa c8 fb b4 	sub	r8,sp,-1100
80003fb8:	0c 9b       	mov	r11,r6
80003fba:	1a d8       	st.w	--sp,r8
80003fbc:	08 9c       	mov	r12,r4
80003fbe:	fa c8 f9 40 	sub	r8,sp,-1728
80003fc2:	fa c9 ff b4 	sub	r9,sp,-76
80003fc6:	fe b0 fa 55 	rcall	80003470 <get_arg>
80003fca:	2f dd       	sub	sp,-12
80003fcc:	78 1a       	ld.w	r10,r12[0x4]
80003fce:	50 7a       	stdsp	sp[0x1c],r10
80003fd0:	78 0c       	ld.w	r12,r12[0x0]
80003fd2:	50 5c       	stdsp	sp[0x14],r12
80003fd4:	c2 a8       	rjmp	80004028 <_vfprintf_r+0x888>
80003fd6:	2f f7       	sub	r7,-1
80003fd8:	10 39       	cp.w	r9,r8
80003fda:	c0 94       	brge	80003fec <_vfprintf_r+0x84c>
80003fdc:	fa c9 f9 44 	sub	r9,sp,-1724
80003fe0:	f2 06 00 36 	add	r6,r9,r6<<0x3
80003fe4:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80003fe8:	50 78       	stdsp	sp[0x1c],r8
80003fea:	cb 6b       	rjmp	80003f56 <_vfprintf_r+0x7b6>
80003fec:	41 09       	lddsp	r9,sp[0x40]
80003fee:	59 f8       	cp.w	r8,31
80003ff0:	e0 89 00 15 	brgt	8000401a <_vfprintf_r+0x87a>
80003ff4:	f2 ca ff f8 	sub	r10,r9,-8
80003ff8:	72 16       	ld.w	r6,r9[0x4]
80003ffa:	72 09       	ld.w	r9,r9[0x0]
80003ffc:	51 0a       	stdsp	sp[0x40],r10
80003ffe:	50 59       	stdsp	sp[0x14],r9
80004000:	fa ce f9 44 	sub	lr,sp,-1724
80004004:	50 76       	stdsp	sp[0x1c],r6
80004006:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000400a:	40 5b       	lddsp	r11,sp[0x14]
8000400c:	0c 9a       	mov	r10,r6
8000400e:	f2 eb fd 88 	st.d	r9[-632],r10
80004012:	2f f8       	sub	r8,-1
80004014:	fb 48 06 b4 	st.w	sp[1716],r8
80004018:	c0 88       	rjmp	80004028 <_vfprintf_r+0x888>
8000401a:	72 1c       	ld.w	r12,r9[0x4]
8000401c:	50 7c       	stdsp	sp[0x1c],r12
8000401e:	f2 c8 ff f8 	sub	r8,r9,-8
80004022:	51 08       	stdsp	sp[0x40],r8
80004024:	72 09       	ld.w	r9,r9[0x0]
80004026:	50 59       	stdsp	sp[0x14],r9
80004028:	40 5b       	lddsp	r11,sp[0x14]
8000402a:	40 7a       	lddsp	r10,sp[0x1c]
8000402c:	e0 a0 1c de 	rcall	800079e8 <__isinfd>
80004030:	18 96       	mov	r6,r12
80004032:	c1 70       	breq	80004060 <_vfprintf_r+0x8c0>
80004034:	30 08       	mov	r8,0
80004036:	30 09       	mov	r9,0
80004038:	40 5b       	lddsp	r11,sp[0x14]
8000403a:	40 7a       	lddsp	r10,sp[0x1c]
8000403c:	e0 a0 21 cc 	rcall	800083d4 <__avr32_f64_cmp_lt>
80004040:	c0 40       	breq	80004048 <_vfprintf_r+0x8a8>
80004042:	32 d8       	mov	r8,45
80004044:	fb 68 06 bb 	st.b	sp[1723],r8
80004048:	fe c8 ad f4 	sub	r8,pc,-21004
8000404c:	fe c6 ad f4 	sub	r6,pc,-21004
80004050:	a7 d5       	cbr	r5,0x7
80004052:	e0 40 00 47 	cp.w	r0,71
80004056:	f0 06 17 a0 	movle	r6,r8
8000405a:	30 32       	mov	r2,3
8000405c:	e0 8f 06 ce 	bral	80004df8 <_vfprintf_r+0x1658>
80004060:	40 5b       	lddsp	r11,sp[0x14]
80004062:	40 7a       	lddsp	r10,sp[0x1c]
80004064:	e0 a0 1c d7 	rcall	80007a12 <__isnand>
80004068:	c0 e0       	breq	80004084 <_vfprintf_r+0x8e4>
8000406a:	50 26       	stdsp	sp[0x8],r6
8000406c:	fe c8 ae 10 	sub	r8,pc,-20976
80004070:	fe c6 ae 10 	sub	r6,pc,-20976
80004074:	a7 d5       	cbr	r5,0x7
80004076:	e0 40 00 47 	cp.w	r0,71
8000407a:	f0 06 17 a0 	movle	r6,r8
8000407e:	30 32       	mov	r2,3
80004080:	e0 8f 06 c2 	bral	80004e04 <_vfprintf_r+0x1664>
80004084:	40 2a       	lddsp	r10,sp[0x8]
80004086:	5b fa       	cp.w	r10,-1
80004088:	c0 41       	brne	80004090 <_vfprintf_r+0x8f0>
8000408a:	30 69       	mov	r9,6
8000408c:	50 29       	stdsp	sp[0x8],r9
8000408e:	c1 18       	rjmp	800040b0 <_vfprintf_r+0x910>
80004090:	e0 40 00 47 	cp.w	r0,71
80004094:	5f 09       	sreq	r9
80004096:	e0 40 00 67 	cp.w	r0,103
8000409a:	5f 08       	sreq	r8
8000409c:	f3 e8 10 08 	or	r8,r9,r8
800040a0:	f8 08 18 00 	cp.b	r8,r12
800040a4:	c0 60       	breq	800040b0 <_vfprintf_r+0x910>
800040a6:	40 28       	lddsp	r8,sp[0x8]
800040a8:	58 08       	cp.w	r8,0
800040aa:	f9 b8 00 01 	moveq	r8,1
800040ae:	50 28       	stdsp	sp[0x8],r8
800040b0:	40 78       	lddsp	r8,sp[0x1c]
800040b2:	40 59       	lddsp	r9,sp[0x14]
800040b4:	fa e9 06 94 	st.d	sp[1684],r8
800040b8:	a9 a5       	sbr	r5,0x8
800040ba:	fa f8 06 94 	ld.w	r8,sp[1684]
800040be:	58 08       	cp.w	r8,0
800040c0:	c0 65       	brlt	800040cc <_vfprintf_r+0x92c>
800040c2:	40 5e       	lddsp	lr,sp[0x14]
800040c4:	30 0c       	mov	r12,0
800040c6:	50 6e       	stdsp	sp[0x18],lr
800040c8:	50 9c       	stdsp	sp[0x24],r12
800040ca:	c0 78       	rjmp	800040d8 <_vfprintf_r+0x938>
800040cc:	40 5b       	lddsp	r11,sp[0x14]
800040ce:	32 da       	mov	r10,45
800040d0:	ee 1b 80 00 	eorh	r11,0x8000
800040d4:	50 9a       	stdsp	sp[0x24],r10
800040d6:	50 6b       	stdsp	sp[0x18],r11
800040d8:	e0 40 00 46 	cp.w	r0,70
800040dc:	5f 09       	sreq	r9
800040de:	e0 40 00 66 	cp.w	r0,102
800040e2:	5f 08       	sreq	r8
800040e4:	f3 e8 10 08 	or	r8,r9,r8
800040e8:	50 48       	stdsp	sp[0x10],r8
800040ea:	c0 40       	breq	800040f2 <_vfprintf_r+0x952>
800040ec:	40 22       	lddsp	r2,sp[0x8]
800040ee:	30 39       	mov	r9,3
800040f0:	c1 08       	rjmp	80004110 <_vfprintf_r+0x970>
800040f2:	e0 40 00 45 	cp.w	r0,69
800040f6:	5f 09       	sreq	r9
800040f8:	e0 40 00 65 	cp.w	r0,101
800040fc:	5f 08       	sreq	r8
800040fe:	40 22       	lddsp	r2,sp[0x8]
80004100:	10 49       	or	r9,r8
80004102:	2f f2       	sub	r2,-1
80004104:	40 46       	lddsp	r6,sp[0x10]
80004106:	ec 09 18 00 	cp.b	r9,r6
8000410a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000410e:	30 29       	mov	r9,2
80004110:	fa c8 f9 5c 	sub	r8,sp,-1700
80004114:	1a d8       	st.w	--sp,r8
80004116:	fa c8 f9 54 	sub	r8,sp,-1708
8000411a:	1a d8       	st.w	--sp,r8
8000411c:	fa c8 f9 4c 	sub	r8,sp,-1716
80004120:	08 9c       	mov	r12,r4
80004122:	1a d8       	st.w	--sp,r8
80004124:	04 98       	mov	r8,r2
80004126:	40 9b       	lddsp	r11,sp[0x24]
80004128:	40 aa       	lddsp	r10,sp[0x28]
8000412a:	e0 a0 0b c3 	rcall	800058b0 <_dtoa_r>
8000412e:	e0 40 00 47 	cp.w	r0,71
80004132:	5f 19       	srne	r9
80004134:	e0 40 00 67 	cp.w	r0,103
80004138:	5f 18       	srne	r8
8000413a:	18 96       	mov	r6,r12
8000413c:	2f dd       	sub	sp,-12
8000413e:	f3 e8 00 08 	and	r8,r9,r8
80004142:	c0 41       	brne	8000414a <_vfprintf_r+0x9aa>
80004144:	ed b5 00 00 	bld	r5,0x0
80004148:	c3 01       	brne	800041a8 <_vfprintf_r+0xa08>
8000414a:	ec 02 00 0e 	add	lr,r6,r2
8000414e:	50 3e       	stdsp	sp[0xc],lr
80004150:	40 4c       	lddsp	r12,sp[0x10]
80004152:	58 0c       	cp.w	r12,0
80004154:	c1 50       	breq	8000417e <_vfprintf_r+0x9de>
80004156:	0d 89       	ld.ub	r9,r6[0x0]
80004158:	33 08       	mov	r8,48
8000415a:	f0 09 18 00 	cp.b	r9,r8
8000415e:	c0 b1       	brne	80004174 <_vfprintf_r+0x9d4>
80004160:	30 08       	mov	r8,0
80004162:	30 09       	mov	r9,0
80004164:	40 6b       	lddsp	r11,sp[0x18]
80004166:	40 7a       	lddsp	r10,sp[0x1c]
80004168:	e0 a0 20 ef 	rcall	80008346 <__avr32_f64_cmp_eq>
8000416c:	fb b2 00 01 	rsubeq	r2,1
80004170:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80004174:	40 3b       	lddsp	r11,sp[0xc]
80004176:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000417a:	10 0b       	add	r11,r8
8000417c:	50 3b       	stdsp	sp[0xc],r11
8000417e:	40 6b       	lddsp	r11,sp[0x18]
80004180:	30 08       	mov	r8,0
80004182:	30 09       	mov	r9,0
80004184:	40 7a       	lddsp	r10,sp[0x1c]
80004186:	e0 a0 20 e0 	rcall	80008346 <__avr32_f64_cmp_eq>
8000418a:	c0 90       	breq	8000419c <_vfprintf_r+0x9fc>
8000418c:	40 3a       	lddsp	r10,sp[0xc]
8000418e:	fb 4a 06 a4 	st.w	sp[1700],r10
80004192:	c0 58       	rjmp	8000419c <_vfprintf_r+0x9fc>
80004194:	10 c9       	st.b	r8++,r9
80004196:	fb 48 06 a4 	st.w	sp[1700],r8
8000419a:	c0 28       	rjmp	8000419e <_vfprintf_r+0x9fe>
8000419c:	33 09       	mov	r9,48
8000419e:	fa f8 06 a4 	ld.w	r8,sp[1700]
800041a2:	40 3e       	lddsp	lr,sp[0xc]
800041a4:	1c 38       	cp.w	r8,lr
800041a6:	cf 73       	brcs	80004194 <_vfprintf_r+0x9f4>
800041a8:	e0 40 00 47 	cp.w	r0,71
800041ac:	5f 09       	sreq	r9
800041ae:	e0 40 00 67 	cp.w	r0,103
800041b2:	5f 08       	sreq	r8
800041b4:	f3 e8 10 08 	or	r8,r9,r8
800041b8:	fa f9 06 a4 	ld.w	r9,sp[1700]
800041bc:	0c 19       	sub	r9,r6
800041be:	50 69       	stdsp	sp[0x18],r9
800041c0:	58 08       	cp.w	r8,0
800041c2:	c0 b0       	breq	800041d8 <_vfprintf_r+0xa38>
800041c4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800041c8:	5b d8       	cp.w	r8,-3
800041ca:	c0 55       	brlt	800041d4 <_vfprintf_r+0xa34>
800041cc:	40 2c       	lddsp	r12,sp[0x8]
800041ce:	18 38       	cp.w	r8,r12
800041d0:	e0 8a 00 6a 	brle	800042a4 <_vfprintf_r+0xb04>
800041d4:	20 20       	sub	r0,2
800041d6:	c0 58       	rjmp	800041e0 <_vfprintf_r+0xa40>
800041d8:	e0 40 00 65 	cp.w	r0,101
800041dc:	e0 89 00 46 	brgt	80004268 <_vfprintf_r+0xac8>
800041e0:	fa fb 06 ac 	ld.w	r11,sp[1708]
800041e4:	fb 60 06 9c 	st.b	sp[1692],r0
800041e8:	20 1b       	sub	r11,1
800041ea:	fb 4b 06 ac 	st.w	sp[1708],r11
800041ee:	c0 47       	brpl	800041f6 <_vfprintf_r+0xa56>
800041f0:	5c 3b       	neg	r11
800041f2:	32 d8       	mov	r8,45
800041f4:	c0 28       	rjmp	800041f8 <_vfprintf_r+0xa58>
800041f6:	32 b8       	mov	r8,43
800041f8:	fb 68 06 9d 	st.b	sp[1693],r8
800041fc:	58 9b       	cp.w	r11,9
800041fe:	e0 8a 00 1d 	brle	80004238 <_vfprintf_r+0xa98>
80004202:	fa c9 fa 35 	sub	r9,sp,-1483
80004206:	30 aa       	mov	r10,10
80004208:	12 98       	mov	r8,r9
8000420a:	0e 9c       	mov	r12,r7
8000420c:	0c 92       	mov	r2,r6
8000420e:	f6 0a 0c 06 	divs	r6,r11,r10
80004212:	0e 9b       	mov	r11,r7
80004214:	2d 0b       	sub	r11,-48
80004216:	10 fb       	st.b	--r8,r11
80004218:	0c 9b       	mov	r11,r6
8000421a:	58 96       	cp.w	r6,9
8000421c:	fe 99 ff f9 	brgt	8000420e <_vfprintf_r+0xa6e>
80004220:	2d 0b       	sub	r11,-48
80004222:	18 97       	mov	r7,r12
80004224:	04 96       	mov	r6,r2
80004226:	10 fb       	st.b	--r8,r11
80004228:	fa ca f9 62 	sub	r10,sp,-1694
8000422c:	c0 38       	rjmp	80004232 <_vfprintf_r+0xa92>
8000422e:	11 3b       	ld.ub	r11,r8++
80004230:	14 cb       	st.b	r10++,r11
80004232:	12 38       	cp.w	r8,r9
80004234:	cf d3       	brcs	8000422e <_vfprintf_r+0xa8e>
80004236:	c0 98       	rjmp	80004248 <_vfprintf_r+0xaa8>
80004238:	2d 0b       	sub	r11,-48
8000423a:	33 08       	mov	r8,48
8000423c:	fb 6b 06 9f 	st.b	sp[1695],r11
80004240:	fb 68 06 9e 	st.b	sp[1694],r8
80004244:	fa ca f9 60 	sub	r10,sp,-1696
80004248:	fa c8 f9 64 	sub	r8,sp,-1692
8000424c:	f4 08 01 08 	sub	r8,r10,r8
80004250:	50 e8       	stdsp	sp[0x38],r8
80004252:	10 92       	mov	r2,r8
80004254:	40 6b       	lddsp	r11,sp[0x18]
80004256:	16 02       	add	r2,r11
80004258:	58 1b       	cp.w	r11,1
8000425a:	e0 89 00 05 	brgt	80004264 <_vfprintf_r+0xac4>
8000425e:	ed b5 00 00 	bld	r5,0x0
80004262:	c3 51       	brne	800042cc <_vfprintf_r+0xb2c>
80004264:	2f f2       	sub	r2,-1
80004266:	c3 38       	rjmp	800042cc <_vfprintf_r+0xb2c>
80004268:	e0 40 00 66 	cp.w	r0,102
8000426c:	c1 c1       	brne	800042a4 <_vfprintf_r+0xb04>
8000426e:	fa f2 06 ac 	ld.w	r2,sp[1708]
80004272:	58 02       	cp.w	r2,0
80004274:	e0 8a 00 0c 	brle	8000428c <_vfprintf_r+0xaec>
80004278:	40 2a       	lddsp	r10,sp[0x8]
8000427a:	58 0a       	cp.w	r10,0
8000427c:	c0 41       	brne	80004284 <_vfprintf_r+0xae4>
8000427e:	ed b5 00 00 	bld	r5,0x0
80004282:	c2 51       	brne	800042cc <_vfprintf_r+0xb2c>
80004284:	2f f2       	sub	r2,-1
80004286:	40 29       	lddsp	r9,sp[0x8]
80004288:	12 02       	add	r2,r9
8000428a:	c0 b8       	rjmp	800042a0 <_vfprintf_r+0xb00>
8000428c:	40 28       	lddsp	r8,sp[0x8]
8000428e:	58 08       	cp.w	r8,0
80004290:	c0 61       	brne	8000429c <_vfprintf_r+0xafc>
80004292:	ed b5 00 00 	bld	r5,0x0
80004296:	c0 30       	breq	8000429c <_vfprintf_r+0xafc>
80004298:	30 12       	mov	r2,1
8000429a:	c1 98       	rjmp	800042cc <_vfprintf_r+0xb2c>
8000429c:	40 22       	lddsp	r2,sp[0x8]
8000429e:	2f e2       	sub	r2,-2
800042a0:	36 60       	mov	r0,102
800042a2:	c1 58       	rjmp	800042cc <_vfprintf_r+0xb2c>
800042a4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800042a8:	40 6e       	lddsp	lr,sp[0x18]
800042aa:	1c 32       	cp.w	r2,lr
800042ac:	c0 65       	brlt	800042b8 <_vfprintf_r+0xb18>
800042ae:	ed b5 00 00 	bld	r5,0x0
800042b2:	f7 b2 00 ff 	subeq	r2,-1
800042b6:	c0 a8       	rjmp	800042ca <_vfprintf_r+0xb2a>
800042b8:	e4 08 11 02 	rsub	r8,r2,2
800042bc:	40 6c       	lddsp	r12,sp[0x18]
800042be:	58 02       	cp.w	r2,0
800042c0:	f0 02 17 a0 	movle	r2,r8
800042c4:	f9 b2 09 01 	movgt	r2,1
800042c8:	18 02       	add	r2,r12
800042ca:	36 70       	mov	r0,103
800042cc:	40 9b       	lddsp	r11,sp[0x24]
800042ce:	58 0b       	cp.w	r11,0
800042d0:	e0 80 05 94 	breq	80004df8 <_vfprintf_r+0x1658>
800042d4:	32 d8       	mov	r8,45
800042d6:	fb 68 06 bb 	st.b	sp[1723],r8
800042da:	e0 8f 05 93 	bral	80004e00 <_vfprintf_r+0x1660>
800042de:	50 a7       	stdsp	sp[0x28],r7
800042e0:	04 94       	mov	r4,r2
800042e2:	0c 97       	mov	r7,r6
800042e4:	02 92       	mov	r2,r1
800042e6:	06 96       	mov	r6,r3
800042e8:	40 41       	lddsp	r1,sp[0x10]
800042ea:	40 93       	lddsp	r3,sp[0x24]
800042ec:	0e 99       	mov	r9,r7
800042ee:	ed b5 00 05 	bld	r5,0x5
800042f2:	c4 81       	brne	80004382 <_vfprintf_r+0xbe2>
800042f4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800042f8:	40 3e       	lddsp	lr,sp[0xc]
800042fa:	58 0e       	cp.w	lr,0
800042fc:	c1 d0       	breq	80004336 <_vfprintf_r+0xb96>
800042fe:	10 36       	cp.w	r6,r8
80004300:	c0 64       	brge	8000430c <_vfprintf_r+0xb6c>
80004302:	fa cc f9 44 	sub	r12,sp,-1724
80004306:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000430a:	c1 d8       	rjmp	80004344 <_vfprintf_r+0xba4>
8000430c:	fa c8 f9 50 	sub	r8,sp,-1712
80004310:	1a d8       	st.w	--sp,r8
80004312:	fa c8 fa b8 	sub	r8,sp,-1352
80004316:	04 9a       	mov	r10,r2
80004318:	1a d8       	st.w	--sp,r8
8000431a:	fa c8 fb b4 	sub	r8,sp,-1100
8000431e:	0c 9b       	mov	r11,r6
80004320:	1a d8       	st.w	--sp,r8
80004322:	08 9c       	mov	r12,r4
80004324:	fa c8 f9 40 	sub	r8,sp,-1728
80004328:	fa c9 ff b4 	sub	r9,sp,-76
8000432c:	fe b0 f8 a2 	rcall	80003470 <get_arg>
80004330:	2f dd       	sub	sp,-12
80004332:	78 0a       	ld.w	r10,r12[0x0]
80004334:	c2 08       	rjmp	80004374 <_vfprintf_r+0xbd4>
80004336:	2f f7       	sub	r7,-1
80004338:	10 39       	cp.w	r9,r8
8000433a:	c0 84       	brge	8000434a <_vfprintf_r+0xbaa>
8000433c:	fa cb f9 44 	sub	r11,sp,-1724
80004340:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004344:	ec fa fd 88 	ld.w	r10,r6[-632]
80004348:	c1 68       	rjmp	80004374 <_vfprintf_r+0xbd4>
8000434a:	41 09       	lddsp	r9,sp[0x40]
8000434c:	59 f8       	cp.w	r8,31
8000434e:	e0 89 00 10 	brgt	8000436e <_vfprintf_r+0xbce>
80004352:	f2 ca ff fc 	sub	r10,r9,-4
80004356:	51 0a       	stdsp	sp[0x40],r10
80004358:	fa c6 f9 44 	sub	r6,sp,-1724
8000435c:	72 0a       	ld.w	r10,r9[0x0]
8000435e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004362:	f3 4a fd 88 	st.w	r9[-632],r10
80004366:	2f f8       	sub	r8,-1
80004368:	fb 48 06 b4 	st.w	sp[1716],r8
8000436c:	c0 48       	rjmp	80004374 <_vfprintf_r+0xbd4>
8000436e:	72 0a       	ld.w	r10,r9[0x0]
80004370:	2f c9       	sub	r9,-4
80004372:	51 09       	stdsp	sp[0x40],r9
80004374:	40 be       	lddsp	lr,sp[0x2c]
80004376:	1c 98       	mov	r8,lr
80004378:	95 1e       	st.w	r10[0x4],lr
8000437a:	bf 58       	asr	r8,0x1f
8000437c:	95 08       	st.w	r10[0x0],r8
8000437e:	fe 9f fa 9f 	bral	800038bc <_vfprintf_r+0x11c>
80004382:	ed b5 00 04 	bld	r5,0x4
80004386:	c4 80       	breq	80004416 <_vfprintf_r+0xc76>
80004388:	e2 15 00 40 	andl	r5,0x40,COH
8000438c:	c4 50       	breq	80004416 <_vfprintf_r+0xc76>
8000438e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004392:	40 3c       	lddsp	r12,sp[0xc]
80004394:	58 0c       	cp.w	r12,0
80004396:	c1 d0       	breq	800043d0 <_vfprintf_r+0xc30>
80004398:	10 36       	cp.w	r6,r8
8000439a:	c0 64       	brge	800043a6 <_vfprintf_r+0xc06>
8000439c:	fa cb f9 44 	sub	r11,sp,-1724
800043a0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800043a4:	c1 d8       	rjmp	800043de <_vfprintf_r+0xc3e>
800043a6:	fa c8 f9 50 	sub	r8,sp,-1712
800043aa:	1a d8       	st.w	--sp,r8
800043ac:	fa c8 fa b8 	sub	r8,sp,-1352
800043b0:	04 9a       	mov	r10,r2
800043b2:	1a d8       	st.w	--sp,r8
800043b4:	fa c8 fb b4 	sub	r8,sp,-1100
800043b8:	0c 9b       	mov	r11,r6
800043ba:	1a d8       	st.w	--sp,r8
800043bc:	08 9c       	mov	r12,r4
800043be:	fa c8 f9 40 	sub	r8,sp,-1728
800043c2:	fa c9 ff b4 	sub	r9,sp,-76
800043c6:	fe b0 f8 55 	rcall	80003470 <get_arg>
800043ca:	2f dd       	sub	sp,-12
800043cc:	78 0a       	ld.w	r10,r12[0x0]
800043ce:	c2 08       	rjmp	8000440e <_vfprintf_r+0xc6e>
800043d0:	2f f7       	sub	r7,-1
800043d2:	10 39       	cp.w	r9,r8
800043d4:	c0 84       	brge	800043e4 <_vfprintf_r+0xc44>
800043d6:	fa ca f9 44 	sub	r10,sp,-1724
800043da:	f4 06 00 36 	add	r6,r10,r6<<0x3
800043de:	ec fa fd 88 	ld.w	r10,r6[-632]
800043e2:	c1 68       	rjmp	8000440e <_vfprintf_r+0xc6e>
800043e4:	41 09       	lddsp	r9,sp[0x40]
800043e6:	59 f8       	cp.w	r8,31
800043e8:	e0 89 00 10 	brgt	80004408 <_vfprintf_r+0xc68>
800043ec:	f2 ca ff fc 	sub	r10,r9,-4
800043f0:	51 0a       	stdsp	sp[0x40],r10
800043f2:	fa c6 f9 44 	sub	r6,sp,-1724
800043f6:	72 0a       	ld.w	r10,r9[0x0]
800043f8:	ec 08 00 39 	add	r9,r6,r8<<0x3
800043fc:	f3 4a fd 88 	st.w	r9[-632],r10
80004400:	2f f8       	sub	r8,-1
80004402:	fb 48 06 b4 	st.w	sp[1716],r8
80004406:	c0 48       	rjmp	8000440e <_vfprintf_r+0xc6e>
80004408:	72 0a       	ld.w	r10,r9[0x0]
8000440a:	2f c9       	sub	r9,-4
8000440c:	51 09       	stdsp	sp[0x40],r9
8000440e:	40 be       	lddsp	lr,sp[0x2c]
80004410:	b4 0e       	st.h	r10[0x0],lr
80004412:	fe 9f fa 55 	bral	800038bc <_vfprintf_r+0x11c>
80004416:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000441a:	40 3c       	lddsp	r12,sp[0xc]
8000441c:	58 0c       	cp.w	r12,0
8000441e:	c1 d0       	breq	80004458 <_vfprintf_r+0xcb8>
80004420:	10 36       	cp.w	r6,r8
80004422:	c0 64       	brge	8000442e <_vfprintf_r+0xc8e>
80004424:	fa cb f9 44 	sub	r11,sp,-1724
80004428:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000442c:	c1 d8       	rjmp	80004466 <_vfprintf_r+0xcc6>
8000442e:	fa c8 f9 50 	sub	r8,sp,-1712
80004432:	1a d8       	st.w	--sp,r8
80004434:	fa c8 fa b8 	sub	r8,sp,-1352
80004438:	04 9a       	mov	r10,r2
8000443a:	1a d8       	st.w	--sp,r8
8000443c:	fa c8 fb b4 	sub	r8,sp,-1100
80004440:	0c 9b       	mov	r11,r6
80004442:	1a d8       	st.w	--sp,r8
80004444:	08 9c       	mov	r12,r4
80004446:	fa c8 f9 40 	sub	r8,sp,-1728
8000444a:	fa c9 ff b4 	sub	r9,sp,-76
8000444e:	fe b0 f8 11 	rcall	80003470 <get_arg>
80004452:	2f dd       	sub	sp,-12
80004454:	78 0a       	ld.w	r10,r12[0x0]
80004456:	c2 08       	rjmp	80004496 <_vfprintf_r+0xcf6>
80004458:	2f f7       	sub	r7,-1
8000445a:	10 39       	cp.w	r9,r8
8000445c:	c0 84       	brge	8000446c <_vfprintf_r+0xccc>
8000445e:	fa ca f9 44 	sub	r10,sp,-1724
80004462:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004466:	ec fa fd 88 	ld.w	r10,r6[-632]
8000446a:	c1 68       	rjmp	80004496 <_vfprintf_r+0xcf6>
8000446c:	41 09       	lddsp	r9,sp[0x40]
8000446e:	59 f8       	cp.w	r8,31
80004470:	e0 89 00 10 	brgt	80004490 <_vfprintf_r+0xcf0>
80004474:	f2 ca ff fc 	sub	r10,r9,-4
80004478:	51 0a       	stdsp	sp[0x40],r10
8000447a:	fa c6 f9 44 	sub	r6,sp,-1724
8000447e:	72 0a       	ld.w	r10,r9[0x0]
80004480:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004484:	f3 4a fd 88 	st.w	r9[-632],r10
80004488:	2f f8       	sub	r8,-1
8000448a:	fb 48 06 b4 	st.w	sp[1716],r8
8000448e:	c0 48       	rjmp	80004496 <_vfprintf_r+0xcf6>
80004490:	72 0a       	ld.w	r10,r9[0x0]
80004492:	2f c9       	sub	r9,-4
80004494:	51 09       	stdsp	sp[0x40],r9
80004496:	40 be       	lddsp	lr,sp[0x2c]
80004498:	95 0e       	st.w	r10[0x0],lr
8000449a:	fe 9f fa 11 	bral	800038bc <_vfprintf_r+0x11c>
8000449e:	50 a7       	stdsp	sp[0x28],r7
800044a0:	50 80       	stdsp	sp[0x20],r0
800044a2:	0c 97       	mov	r7,r6
800044a4:	04 94       	mov	r4,r2
800044a6:	06 96       	mov	r6,r3
800044a8:	02 92       	mov	r2,r1
800044aa:	40 93       	lddsp	r3,sp[0x24]
800044ac:	10 90       	mov	r0,r8
800044ae:	40 41       	lddsp	r1,sp[0x10]
800044b0:	a5 a5       	sbr	r5,0x4
800044b2:	c0 a8       	rjmp	800044c6 <_vfprintf_r+0xd26>
800044b4:	50 a7       	stdsp	sp[0x28],r7
800044b6:	50 80       	stdsp	sp[0x20],r0
800044b8:	0c 97       	mov	r7,r6
800044ba:	04 94       	mov	r4,r2
800044bc:	06 96       	mov	r6,r3
800044be:	02 92       	mov	r2,r1
800044c0:	40 93       	lddsp	r3,sp[0x24]
800044c2:	10 90       	mov	r0,r8
800044c4:	40 41       	lddsp	r1,sp[0x10]
800044c6:	ed b5 00 05 	bld	r5,0x5
800044ca:	c5 d1       	brne	80004584 <_vfprintf_r+0xde4>
800044cc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800044d0:	40 3c       	lddsp	r12,sp[0xc]
800044d2:	58 0c       	cp.w	r12,0
800044d4:	c2 60       	breq	80004520 <_vfprintf_r+0xd80>
800044d6:	10 36       	cp.w	r6,r8
800044d8:	c0 a4       	brge	800044ec <_vfprintf_r+0xd4c>
800044da:	fa cb f9 44 	sub	r11,sp,-1724
800044de:	f6 06 00 36 	add	r6,r11,r6<<0x3
800044e2:	ec e8 fd 88 	ld.d	r8,r6[-632]
800044e6:	fa e9 00 00 	st.d	sp[0],r8
800044ea:	c1 88       	rjmp	8000451a <_vfprintf_r+0xd7a>
800044ec:	fa c8 f9 50 	sub	r8,sp,-1712
800044f0:	1a d8       	st.w	--sp,r8
800044f2:	fa c8 fa b8 	sub	r8,sp,-1352
800044f6:	04 9a       	mov	r10,r2
800044f8:	1a d8       	st.w	--sp,r8
800044fa:	0c 9b       	mov	r11,r6
800044fc:	fa c8 fb b4 	sub	r8,sp,-1100
80004500:	08 9c       	mov	r12,r4
80004502:	1a d8       	st.w	--sp,r8
80004504:	fa c8 f9 40 	sub	r8,sp,-1728
80004508:	fa c9 ff b4 	sub	r9,sp,-76
8000450c:	fe b0 f7 b2 	rcall	80003470 <get_arg>
80004510:	2f dd       	sub	sp,-12
80004512:	f8 ea 00 00 	ld.d	r10,r12[0]
80004516:	fa eb 00 00 	st.d	sp[0],r10
8000451a:	30 08       	mov	r8,0
8000451c:	e0 8f 03 de 	bral	80004cd8 <_vfprintf_r+0x1538>
80004520:	ee ca ff ff 	sub	r10,r7,-1
80004524:	10 37       	cp.w	r7,r8
80004526:	c0 b4       	brge	8000453c <_vfprintf_r+0xd9c>
80004528:	fa c9 f9 44 	sub	r9,sp,-1724
8000452c:	14 97       	mov	r7,r10
8000452e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004532:	ec ea fd 88 	ld.d	r10,r6[-632]
80004536:	fa eb 00 00 	st.d	sp[0],r10
8000453a:	c1 88       	rjmp	8000456a <_vfprintf_r+0xdca>
8000453c:	41 09       	lddsp	r9,sp[0x40]
8000453e:	59 f8       	cp.w	r8,31
80004540:	e0 89 00 18 	brgt	80004570 <_vfprintf_r+0xdd0>
80004544:	f2 e6 00 00 	ld.d	r6,r9[0]
80004548:	f2 cb ff f8 	sub	r11,r9,-8
8000454c:	fa e7 00 00 	st.d	sp[0],r6
80004550:	51 0b       	stdsp	sp[0x40],r11
80004552:	fa c6 f9 44 	sub	r6,sp,-1724
80004556:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000455a:	fa e6 00 00 	ld.d	r6,sp[0]
8000455e:	f2 e7 fd 88 	st.d	r9[-632],r6
80004562:	2f f8       	sub	r8,-1
80004564:	14 97       	mov	r7,r10
80004566:	fb 48 06 b4 	st.w	sp[1716],r8
8000456a:	40 38       	lddsp	r8,sp[0xc]
8000456c:	e0 8f 03 b6 	bral	80004cd8 <_vfprintf_r+0x1538>
80004570:	f2 e6 00 00 	ld.d	r6,r9[0]
80004574:	40 38       	lddsp	r8,sp[0xc]
80004576:	fa e7 00 00 	st.d	sp[0],r6
8000457a:	2f 89       	sub	r9,-8
8000457c:	14 97       	mov	r7,r10
8000457e:	51 09       	stdsp	sp[0x40],r9
80004580:	e0 8f 03 ac 	bral	80004cd8 <_vfprintf_r+0x1538>
80004584:	ed b5 00 04 	bld	r5,0x4
80004588:	c1 61       	brne	800045b4 <_vfprintf_r+0xe14>
8000458a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000458e:	40 3e       	lddsp	lr,sp[0xc]
80004590:	58 0e       	cp.w	lr,0
80004592:	c0 80       	breq	800045a2 <_vfprintf_r+0xe02>
80004594:	10 36       	cp.w	r6,r8
80004596:	c6 74       	brge	80004664 <_vfprintf_r+0xec4>
80004598:	fa cc f9 44 	sub	r12,sp,-1724
8000459c:	f8 06 00 36 	add	r6,r12,r6<<0x3
800045a0:	c8 08       	rjmp	800046a0 <_vfprintf_r+0xf00>
800045a2:	ee ca ff ff 	sub	r10,r7,-1
800045a6:	10 37       	cp.w	r7,r8
800045a8:	c7 f4       	brge	800046a6 <_vfprintf_r+0xf06>
800045aa:	fa cb f9 44 	sub	r11,sp,-1724
800045ae:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045b2:	c7 68       	rjmp	8000469e <_vfprintf_r+0xefe>
800045b4:	ed b5 00 06 	bld	r5,0x6
800045b8:	c4 a1       	brne	8000464c <_vfprintf_r+0xeac>
800045ba:	fa f8 06 b4 	ld.w	r8,sp[1716]
800045be:	40 3c       	lddsp	r12,sp[0xc]
800045c0:	58 0c       	cp.w	r12,0
800045c2:	c1 d0       	breq	800045fc <_vfprintf_r+0xe5c>
800045c4:	10 36       	cp.w	r6,r8
800045c6:	c0 64       	brge	800045d2 <_vfprintf_r+0xe32>
800045c8:	fa cb f9 44 	sub	r11,sp,-1724
800045cc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800045d0:	c1 f8       	rjmp	8000460e <_vfprintf_r+0xe6e>
800045d2:	fa c8 f9 50 	sub	r8,sp,-1712
800045d6:	1a d8       	st.w	--sp,r8
800045d8:	fa c8 fa b8 	sub	r8,sp,-1352
800045dc:	1a d8       	st.w	--sp,r8
800045de:	fa c8 fb b4 	sub	r8,sp,-1100
800045e2:	1a d8       	st.w	--sp,r8
800045e4:	fa c8 f9 40 	sub	r8,sp,-1728
800045e8:	fa c9 ff b4 	sub	r9,sp,-76
800045ec:	04 9a       	mov	r10,r2
800045ee:	0c 9b       	mov	r11,r6
800045f0:	08 9c       	mov	r12,r4
800045f2:	fe b0 f7 3f 	rcall	80003470 <get_arg>
800045f6:	2f dd       	sub	sp,-12
800045f8:	98 18       	ld.sh	r8,r12[0x2]
800045fa:	c2 68       	rjmp	80004646 <_vfprintf_r+0xea6>
800045fc:	ee ca ff ff 	sub	r10,r7,-1
80004600:	10 37       	cp.w	r7,r8
80004602:	c0 94       	brge	80004614 <_vfprintf_r+0xe74>
80004604:	fa c9 f9 44 	sub	r9,sp,-1724
80004608:	14 97       	mov	r7,r10
8000460a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000460e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004612:	c1 a8       	rjmp	80004646 <_vfprintf_r+0xea6>
80004614:	41 09       	lddsp	r9,sp[0x40]
80004616:	59 f8       	cp.w	r8,31
80004618:	e0 89 00 13 	brgt	8000463e <_vfprintf_r+0xe9e>
8000461c:	f2 cb ff fc 	sub	r11,r9,-4
80004620:	51 0b       	stdsp	sp[0x40],r11
80004622:	72 09       	ld.w	r9,r9[0x0]
80004624:	fa c6 f9 44 	sub	r6,sp,-1724
80004628:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000462c:	2f f8       	sub	r8,-1
8000462e:	f7 49 fd 88 	st.w	r11[-632],r9
80004632:	fb 48 06 b4 	st.w	sp[1716],r8
80004636:	14 97       	mov	r7,r10
80004638:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000463c:	c0 58       	rjmp	80004646 <_vfprintf_r+0xea6>
8000463e:	92 18       	ld.sh	r8,r9[0x2]
80004640:	14 97       	mov	r7,r10
80004642:	2f c9       	sub	r9,-4
80004644:	51 09       	stdsp	sp[0x40],r9
80004646:	5c 78       	castu.h	r8
80004648:	50 18       	stdsp	sp[0x4],r8
8000464a:	c4 68       	rjmp	800046d6 <_vfprintf_r+0xf36>
8000464c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004650:	40 3c       	lddsp	r12,sp[0xc]
80004652:	58 0c       	cp.w	r12,0
80004654:	c1 d0       	breq	8000468e <_vfprintf_r+0xeee>
80004656:	10 36       	cp.w	r6,r8
80004658:	c0 64       	brge	80004664 <_vfprintf_r+0xec4>
8000465a:	fa cb f9 44 	sub	r11,sp,-1724
8000465e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004662:	c1 f8       	rjmp	800046a0 <_vfprintf_r+0xf00>
80004664:	fa c8 f9 50 	sub	r8,sp,-1712
80004668:	1a d8       	st.w	--sp,r8
8000466a:	fa c8 fa b8 	sub	r8,sp,-1352
8000466e:	0c 9b       	mov	r11,r6
80004670:	1a d8       	st.w	--sp,r8
80004672:	fa c8 fb b4 	sub	r8,sp,-1100
80004676:	04 9a       	mov	r10,r2
80004678:	1a d8       	st.w	--sp,r8
8000467a:	08 9c       	mov	r12,r4
8000467c:	fa c8 f9 40 	sub	r8,sp,-1728
80004680:	fa c9 ff b4 	sub	r9,sp,-76
80004684:	fe b0 f6 f6 	rcall	80003470 <get_arg>
80004688:	2f dd       	sub	sp,-12
8000468a:	78 0b       	ld.w	r11,r12[0x0]
8000468c:	c2 48       	rjmp	800046d4 <_vfprintf_r+0xf34>
8000468e:	ee ca ff ff 	sub	r10,r7,-1
80004692:	10 37       	cp.w	r7,r8
80004694:	c0 94       	brge	800046a6 <_vfprintf_r+0xf06>
80004696:	fa c9 f9 44 	sub	r9,sp,-1724
8000469a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000469e:	14 97       	mov	r7,r10
800046a0:	ec fb fd 88 	ld.w	r11,r6[-632]
800046a4:	c1 88       	rjmp	800046d4 <_vfprintf_r+0xf34>
800046a6:	41 09       	lddsp	r9,sp[0x40]
800046a8:	59 f8       	cp.w	r8,31
800046aa:	e0 89 00 11 	brgt	800046cc <_vfprintf_r+0xf2c>
800046ae:	f2 cb ff fc 	sub	r11,r9,-4
800046b2:	51 0b       	stdsp	sp[0x40],r11
800046b4:	fa c6 f9 44 	sub	r6,sp,-1724
800046b8:	72 0b       	ld.w	r11,r9[0x0]
800046ba:	ec 08 00 39 	add	r9,r6,r8<<0x3
800046be:	f3 4b fd 88 	st.w	r9[-632],r11
800046c2:	2f f8       	sub	r8,-1
800046c4:	14 97       	mov	r7,r10
800046c6:	fb 48 06 b4 	st.w	sp[1716],r8
800046ca:	c0 58       	rjmp	800046d4 <_vfprintf_r+0xf34>
800046cc:	72 0b       	ld.w	r11,r9[0x0]
800046ce:	14 97       	mov	r7,r10
800046d0:	2f c9       	sub	r9,-4
800046d2:	51 09       	stdsp	sp[0x40],r9
800046d4:	50 1b       	stdsp	sp[0x4],r11
800046d6:	30 0e       	mov	lr,0
800046d8:	50 0e       	stdsp	sp[0x0],lr
800046da:	1c 98       	mov	r8,lr
800046dc:	e0 8f 02 fe 	bral	80004cd8 <_vfprintf_r+0x1538>
800046e0:	50 a7       	stdsp	sp[0x28],r7
800046e2:	50 80       	stdsp	sp[0x20],r0
800046e4:	0c 97       	mov	r7,r6
800046e6:	04 94       	mov	r4,r2
800046e8:	06 96       	mov	r6,r3
800046ea:	02 92       	mov	r2,r1
800046ec:	40 93       	lddsp	r3,sp[0x24]
800046ee:	40 41       	lddsp	r1,sp[0x10]
800046f0:	0e 99       	mov	r9,r7
800046f2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800046f6:	40 3c       	lddsp	r12,sp[0xc]
800046f8:	58 0c       	cp.w	r12,0
800046fa:	c1 d0       	breq	80004734 <_vfprintf_r+0xf94>
800046fc:	10 36       	cp.w	r6,r8
800046fe:	c0 64       	brge	8000470a <_vfprintf_r+0xf6a>
80004700:	fa cb f9 44 	sub	r11,sp,-1724
80004704:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004708:	c1 d8       	rjmp	80004742 <_vfprintf_r+0xfa2>
8000470a:	fa c8 f9 50 	sub	r8,sp,-1712
8000470e:	1a d8       	st.w	--sp,r8
80004710:	fa c8 fa b8 	sub	r8,sp,-1352
80004714:	1a d8       	st.w	--sp,r8
80004716:	fa c8 fb b4 	sub	r8,sp,-1100
8000471a:	1a d8       	st.w	--sp,r8
8000471c:	fa c9 ff b4 	sub	r9,sp,-76
80004720:	fa c8 f9 40 	sub	r8,sp,-1728
80004724:	04 9a       	mov	r10,r2
80004726:	0c 9b       	mov	r11,r6
80004728:	08 9c       	mov	r12,r4
8000472a:	fe b0 f6 a3 	rcall	80003470 <get_arg>
8000472e:	2f dd       	sub	sp,-12
80004730:	78 09       	ld.w	r9,r12[0x0]
80004732:	c2 18       	rjmp	80004774 <_vfprintf_r+0xfd4>
80004734:	2f f7       	sub	r7,-1
80004736:	10 39       	cp.w	r9,r8
80004738:	c0 84       	brge	80004748 <_vfprintf_r+0xfa8>
8000473a:	fa ca f9 44 	sub	r10,sp,-1724
8000473e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004742:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004746:	c1 78       	rjmp	80004774 <_vfprintf_r+0xfd4>
80004748:	41 09       	lddsp	r9,sp[0x40]
8000474a:	59 f8       	cp.w	r8,31
8000474c:	e0 89 00 10 	brgt	8000476c <_vfprintf_r+0xfcc>
80004750:	f2 ca ff fc 	sub	r10,r9,-4
80004754:	51 0a       	stdsp	sp[0x40],r10
80004756:	fa c6 f9 44 	sub	r6,sp,-1724
8000475a:	72 09       	ld.w	r9,r9[0x0]
8000475c:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004760:	f5 49 fd 88 	st.w	r10[-632],r9
80004764:	2f f8       	sub	r8,-1
80004766:	fb 48 06 b4 	st.w	sp[1716],r8
8000476a:	c0 58       	rjmp	80004774 <_vfprintf_r+0xfd4>
8000476c:	f2 c8 ff fc 	sub	r8,r9,-4
80004770:	51 08       	stdsp	sp[0x40],r8
80004772:	72 09       	ld.w	r9,r9[0x0]
80004774:	33 08       	mov	r8,48
80004776:	fb 68 06 b8 	st.b	sp[1720],r8
8000477a:	37 88       	mov	r8,120
8000477c:	30 0e       	mov	lr,0
8000477e:	fb 68 06 b9 	st.b	sp[1721],r8
80004782:	fe cc b5 1e 	sub	r12,pc,-19170
80004786:	50 19       	stdsp	sp[0x4],r9
80004788:	a1 b5       	sbr	r5,0x1
8000478a:	50 0e       	stdsp	sp[0x0],lr
8000478c:	50 dc       	stdsp	sp[0x34],r12
8000478e:	30 28       	mov	r8,2
80004790:	37 80       	mov	r0,120
80004792:	e0 8f 02 a3 	bral	80004cd8 <_vfprintf_r+0x1538>
80004796:	50 a7       	stdsp	sp[0x28],r7
80004798:	50 80       	stdsp	sp[0x20],r0
8000479a:	10 90       	mov	r0,r8
8000479c:	30 08       	mov	r8,0
8000479e:	fb 68 06 bb 	st.b	sp[1723],r8
800047a2:	0c 97       	mov	r7,r6
800047a4:	04 94       	mov	r4,r2
800047a6:	06 96       	mov	r6,r3
800047a8:	02 92       	mov	r2,r1
800047aa:	40 93       	lddsp	r3,sp[0x24]
800047ac:	40 41       	lddsp	r1,sp[0x10]
800047ae:	0e 99       	mov	r9,r7
800047b0:	fa f8 06 b4 	ld.w	r8,sp[1716]
800047b4:	40 3b       	lddsp	r11,sp[0xc]
800047b6:	58 0b       	cp.w	r11,0
800047b8:	c1 d0       	breq	800047f2 <_vfprintf_r+0x1052>
800047ba:	10 36       	cp.w	r6,r8
800047bc:	c0 64       	brge	800047c8 <_vfprintf_r+0x1028>
800047be:	fa ca f9 44 	sub	r10,sp,-1724
800047c2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800047c6:	c1 d8       	rjmp	80004800 <_vfprintf_r+0x1060>
800047c8:	fa c8 f9 50 	sub	r8,sp,-1712
800047cc:	1a d8       	st.w	--sp,r8
800047ce:	fa c8 fa b8 	sub	r8,sp,-1352
800047d2:	1a d8       	st.w	--sp,r8
800047d4:	fa c8 fb b4 	sub	r8,sp,-1100
800047d8:	0c 9b       	mov	r11,r6
800047da:	1a d8       	st.w	--sp,r8
800047dc:	04 9a       	mov	r10,r2
800047de:	fa c8 f9 40 	sub	r8,sp,-1728
800047e2:	fa c9 ff b4 	sub	r9,sp,-76
800047e6:	08 9c       	mov	r12,r4
800047e8:	fe b0 f6 44 	rcall	80003470 <get_arg>
800047ec:	2f dd       	sub	sp,-12
800047ee:	78 06       	ld.w	r6,r12[0x0]
800047f0:	c2 08       	rjmp	80004830 <_vfprintf_r+0x1090>
800047f2:	2f f7       	sub	r7,-1
800047f4:	10 39       	cp.w	r9,r8
800047f6:	c0 84       	brge	80004806 <_vfprintf_r+0x1066>
800047f8:	fa c9 f9 44 	sub	r9,sp,-1724
800047fc:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004800:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004804:	c1 68       	rjmp	80004830 <_vfprintf_r+0x1090>
80004806:	41 09       	lddsp	r9,sp[0x40]
80004808:	59 f8       	cp.w	r8,31
8000480a:	e0 89 00 10 	brgt	8000482a <_vfprintf_r+0x108a>
8000480e:	f2 ca ff fc 	sub	r10,r9,-4
80004812:	51 0a       	stdsp	sp[0x40],r10
80004814:	72 06       	ld.w	r6,r9[0x0]
80004816:	fa ce f9 44 	sub	lr,sp,-1724
8000481a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000481e:	f3 46 fd 88 	st.w	r9[-632],r6
80004822:	2f f8       	sub	r8,-1
80004824:	fb 48 06 b4 	st.w	sp[1716],r8
80004828:	c0 48       	rjmp	80004830 <_vfprintf_r+0x1090>
8000482a:	72 06       	ld.w	r6,r9[0x0]
8000482c:	2f c9       	sub	r9,-4
8000482e:	51 09       	stdsp	sp[0x40],r9
80004830:	40 2c       	lddsp	r12,sp[0x8]
80004832:	58 0c       	cp.w	r12,0
80004834:	c1 05       	brlt	80004854 <_vfprintf_r+0x10b4>
80004836:	18 9a       	mov	r10,r12
80004838:	30 0b       	mov	r11,0
8000483a:	0c 9c       	mov	r12,r6
8000483c:	e0 a0 14 58 	rcall	800070ec <memchr>
80004840:	e0 80 02 df 	breq	80004dfe <_vfprintf_r+0x165e>
80004844:	f8 06 01 02 	sub	r2,r12,r6
80004848:	40 2b       	lddsp	r11,sp[0x8]
8000484a:	16 32       	cp.w	r2,r11
8000484c:	e0 89 02 d9 	brgt	80004dfe <_vfprintf_r+0x165e>
80004850:	e0 8f 02 d4 	bral	80004df8 <_vfprintf_r+0x1658>
80004854:	30 0a       	mov	r10,0
80004856:	0c 9c       	mov	r12,r6
80004858:	50 2a       	stdsp	sp[0x8],r10
8000485a:	e0 a0 19 33 	rcall	80007ac0 <strlen>
8000485e:	18 92       	mov	r2,r12
80004860:	e0 8f 02 d2 	bral	80004e04 <_vfprintf_r+0x1664>
80004864:	50 a7       	stdsp	sp[0x28],r7
80004866:	50 80       	stdsp	sp[0x20],r0
80004868:	0c 97       	mov	r7,r6
8000486a:	04 94       	mov	r4,r2
8000486c:	06 96       	mov	r6,r3
8000486e:	02 92       	mov	r2,r1
80004870:	40 93       	lddsp	r3,sp[0x24]
80004872:	10 90       	mov	r0,r8
80004874:	40 41       	lddsp	r1,sp[0x10]
80004876:	a5 a5       	sbr	r5,0x4
80004878:	c0 a8       	rjmp	8000488c <_vfprintf_r+0x10ec>
8000487a:	50 a7       	stdsp	sp[0x28],r7
8000487c:	50 80       	stdsp	sp[0x20],r0
8000487e:	0c 97       	mov	r7,r6
80004880:	04 94       	mov	r4,r2
80004882:	06 96       	mov	r6,r3
80004884:	02 92       	mov	r2,r1
80004886:	40 93       	lddsp	r3,sp[0x24]
80004888:	10 90       	mov	r0,r8
8000488a:	40 41       	lddsp	r1,sp[0x10]
8000488c:	ed b5 00 05 	bld	r5,0x5
80004890:	c5 61       	brne	8000493c <_vfprintf_r+0x119c>
80004892:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004896:	40 39       	lddsp	r9,sp[0xc]
80004898:	58 09       	cp.w	r9,0
8000489a:	c2 10       	breq	800048dc <_vfprintf_r+0x113c>
8000489c:	10 36       	cp.w	r6,r8
8000489e:	c0 74       	brge	800048ac <_vfprintf_r+0x110c>
800048a0:	fa c8 f9 44 	sub	r8,sp,-1724
800048a4:	f0 06 00 36 	add	r6,r8,r6<<0x3
800048a8:	c2 38       	rjmp	800048ee <_vfprintf_r+0x114e>
800048aa:	d7 03       	nop
800048ac:	fa c8 f9 50 	sub	r8,sp,-1712
800048b0:	1a d8       	st.w	--sp,r8
800048b2:	fa c8 fa b8 	sub	r8,sp,-1352
800048b6:	1a d8       	st.w	--sp,r8
800048b8:	fa c8 fb b4 	sub	r8,sp,-1100
800048bc:	1a d8       	st.w	--sp,r8
800048be:	fa c8 f9 40 	sub	r8,sp,-1728
800048c2:	fa c9 ff b4 	sub	r9,sp,-76
800048c6:	04 9a       	mov	r10,r2
800048c8:	0c 9b       	mov	r11,r6
800048ca:	08 9c       	mov	r12,r4
800048cc:	fe b0 f5 d2 	rcall	80003470 <get_arg>
800048d0:	2f dd       	sub	sp,-12
800048d2:	f8 e8 00 00 	ld.d	r8,r12[0]
800048d6:	fa e9 00 00 	st.d	sp[0],r8
800048da:	c2 e8       	rjmp	80004936 <_vfprintf_r+0x1196>
800048dc:	ee ca ff ff 	sub	r10,r7,-1
800048e0:	10 37       	cp.w	r7,r8
800048e2:	c0 b4       	brge	800048f8 <_vfprintf_r+0x1158>
800048e4:	fa c8 f9 44 	sub	r8,sp,-1724
800048e8:	14 97       	mov	r7,r10
800048ea:	f0 06 00 36 	add	r6,r8,r6<<0x3
800048ee:	ec ea fd 88 	ld.d	r10,r6[-632]
800048f2:	fa eb 00 00 	st.d	sp[0],r10
800048f6:	c2 08       	rjmp	80004936 <_vfprintf_r+0x1196>
800048f8:	41 09       	lddsp	r9,sp[0x40]
800048fa:	59 f8       	cp.w	r8,31
800048fc:	e0 89 00 16 	brgt	80004928 <_vfprintf_r+0x1188>
80004900:	f2 e6 00 00 	ld.d	r6,r9[0]
80004904:	f2 cb ff f8 	sub	r11,r9,-8
80004908:	fa e7 00 00 	st.d	sp[0],r6
8000490c:	51 0b       	stdsp	sp[0x40],r11
8000490e:	fa c6 f9 44 	sub	r6,sp,-1724
80004912:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004916:	fa e6 00 00 	ld.d	r6,sp[0]
8000491a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000491e:	2f f8       	sub	r8,-1
80004920:	14 97       	mov	r7,r10
80004922:	fb 48 06 b4 	st.w	sp[1716],r8
80004926:	c0 88       	rjmp	80004936 <_vfprintf_r+0x1196>
80004928:	f2 e6 00 00 	ld.d	r6,r9[0]
8000492c:	2f 89       	sub	r9,-8
8000492e:	fa e7 00 00 	st.d	sp[0],r6
80004932:	51 09       	stdsp	sp[0x40],r9
80004934:	14 97       	mov	r7,r10
80004936:	30 18       	mov	r8,1
80004938:	e0 8f 01 d0 	bral	80004cd8 <_vfprintf_r+0x1538>
8000493c:	ed b5 00 04 	bld	r5,0x4
80004940:	c1 61       	brne	8000496c <_vfprintf_r+0x11cc>
80004942:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004946:	40 3e       	lddsp	lr,sp[0xc]
80004948:	58 0e       	cp.w	lr,0
8000494a:	c0 80       	breq	8000495a <_vfprintf_r+0x11ba>
8000494c:	10 36       	cp.w	r6,r8
8000494e:	c6 74       	brge	80004a1c <_vfprintf_r+0x127c>
80004950:	fa cc f9 44 	sub	r12,sp,-1724
80004954:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004958:	c8 08       	rjmp	80004a58 <_vfprintf_r+0x12b8>
8000495a:	ee ca ff ff 	sub	r10,r7,-1
8000495e:	10 37       	cp.w	r7,r8
80004960:	c7 f4       	brge	80004a5e <_vfprintf_r+0x12be>
80004962:	fa cb f9 44 	sub	r11,sp,-1724
80004966:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000496a:	c7 68       	rjmp	80004a56 <_vfprintf_r+0x12b6>
8000496c:	ed b5 00 06 	bld	r5,0x6
80004970:	c4 a1       	brne	80004a04 <_vfprintf_r+0x1264>
80004972:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004976:	40 3c       	lddsp	r12,sp[0xc]
80004978:	58 0c       	cp.w	r12,0
8000497a:	c1 d0       	breq	800049b4 <_vfprintf_r+0x1214>
8000497c:	10 36       	cp.w	r6,r8
8000497e:	c0 64       	brge	8000498a <_vfprintf_r+0x11ea>
80004980:	fa cb f9 44 	sub	r11,sp,-1724
80004984:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004988:	c1 f8       	rjmp	800049c6 <_vfprintf_r+0x1226>
8000498a:	fa c8 f9 50 	sub	r8,sp,-1712
8000498e:	1a d8       	st.w	--sp,r8
80004990:	fa c8 fa b8 	sub	r8,sp,-1352
80004994:	1a d8       	st.w	--sp,r8
80004996:	fa c8 fb b4 	sub	r8,sp,-1100
8000499a:	1a d8       	st.w	--sp,r8
8000499c:	fa c8 f9 40 	sub	r8,sp,-1728
800049a0:	fa c9 ff b4 	sub	r9,sp,-76
800049a4:	04 9a       	mov	r10,r2
800049a6:	0c 9b       	mov	r11,r6
800049a8:	08 9c       	mov	r12,r4
800049aa:	fe b0 f5 63 	rcall	80003470 <get_arg>
800049ae:	2f dd       	sub	sp,-12
800049b0:	98 18       	ld.sh	r8,r12[0x2]
800049b2:	c2 68       	rjmp	800049fe <_vfprintf_r+0x125e>
800049b4:	ee ca ff ff 	sub	r10,r7,-1
800049b8:	10 37       	cp.w	r7,r8
800049ba:	c0 94       	brge	800049cc <_vfprintf_r+0x122c>
800049bc:	fa c9 f9 44 	sub	r9,sp,-1724
800049c0:	14 97       	mov	r7,r10
800049c2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800049c6:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800049ca:	c1 a8       	rjmp	800049fe <_vfprintf_r+0x125e>
800049cc:	41 09       	lddsp	r9,sp[0x40]
800049ce:	59 f8       	cp.w	r8,31
800049d0:	e0 89 00 13 	brgt	800049f6 <_vfprintf_r+0x1256>
800049d4:	f2 cb ff fc 	sub	r11,r9,-4
800049d8:	51 0b       	stdsp	sp[0x40],r11
800049da:	72 09       	ld.w	r9,r9[0x0]
800049dc:	fa c6 f9 44 	sub	r6,sp,-1724
800049e0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800049e4:	2f f8       	sub	r8,-1
800049e6:	f7 49 fd 88 	st.w	r11[-632],r9
800049ea:	fb 48 06 b4 	st.w	sp[1716],r8
800049ee:	14 97       	mov	r7,r10
800049f0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800049f4:	c0 58       	rjmp	800049fe <_vfprintf_r+0x125e>
800049f6:	92 18       	ld.sh	r8,r9[0x2]
800049f8:	14 97       	mov	r7,r10
800049fa:	2f c9       	sub	r9,-4
800049fc:	51 09       	stdsp	sp[0x40],r9
800049fe:	5c 78       	castu.h	r8
80004a00:	50 18       	stdsp	sp[0x4],r8
80004a02:	c4 68       	rjmp	80004a8e <_vfprintf_r+0x12ee>
80004a04:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004a08:	40 3c       	lddsp	r12,sp[0xc]
80004a0a:	58 0c       	cp.w	r12,0
80004a0c:	c1 d0       	breq	80004a46 <_vfprintf_r+0x12a6>
80004a0e:	10 36       	cp.w	r6,r8
80004a10:	c0 64       	brge	80004a1c <_vfprintf_r+0x127c>
80004a12:	fa cb f9 44 	sub	r11,sp,-1724
80004a16:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004a1a:	c1 f8       	rjmp	80004a58 <_vfprintf_r+0x12b8>
80004a1c:	fa c8 f9 50 	sub	r8,sp,-1712
80004a20:	1a d8       	st.w	--sp,r8
80004a22:	fa c8 fa b8 	sub	r8,sp,-1352
80004a26:	0c 9b       	mov	r11,r6
80004a28:	1a d8       	st.w	--sp,r8
80004a2a:	fa c8 fb b4 	sub	r8,sp,-1100
80004a2e:	04 9a       	mov	r10,r2
80004a30:	1a d8       	st.w	--sp,r8
80004a32:	08 9c       	mov	r12,r4
80004a34:	fa c8 f9 40 	sub	r8,sp,-1728
80004a38:	fa c9 ff b4 	sub	r9,sp,-76
80004a3c:	fe b0 f5 1a 	rcall	80003470 <get_arg>
80004a40:	2f dd       	sub	sp,-12
80004a42:	78 0b       	ld.w	r11,r12[0x0]
80004a44:	c2 48       	rjmp	80004a8c <_vfprintf_r+0x12ec>
80004a46:	ee ca ff ff 	sub	r10,r7,-1
80004a4a:	10 37       	cp.w	r7,r8
80004a4c:	c0 94       	brge	80004a5e <_vfprintf_r+0x12be>
80004a4e:	fa c9 f9 44 	sub	r9,sp,-1724
80004a52:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004a56:	14 97       	mov	r7,r10
80004a58:	ec fb fd 88 	ld.w	r11,r6[-632]
80004a5c:	c1 88       	rjmp	80004a8c <_vfprintf_r+0x12ec>
80004a5e:	41 09       	lddsp	r9,sp[0x40]
80004a60:	59 f8       	cp.w	r8,31
80004a62:	e0 89 00 11 	brgt	80004a84 <_vfprintf_r+0x12e4>
80004a66:	f2 cb ff fc 	sub	r11,r9,-4
80004a6a:	51 0b       	stdsp	sp[0x40],r11
80004a6c:	fa c6 f9 44 	sub	r6,sp,-1724
80004a70:	72 0b       	ld.w	r11,r9[0x0]
80004a72:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004a76:	f3 4b fd 88 	st.w	r9[-632],r11
80004a7a:	2f f8       	sub	r8,-1
80004a7c:	14 97       	mov	r7,r10
80004a7e:	fb 48 06 b4 	st.w	sp[1716],r8
80004a82:	c0 58       	rjmp	80004a8c <_vfprintf_r+0x12ec>
80004a84:	72 0b       	ld.w	r11,r9[0x0]
80004a86:	14 97       	mov	r7,r10
80004a88:	2f c9       	sub	r9,-4
80004a8a:	51 09       	stdsp	sp[0x40],r9
80004a8c:	50 1b       	stdsp	sp[0x4],r11
80004a8e:	30 0e       	mov	lr,0
80004a90:	30 18       	mov	r8,1
80004a92:	50 0e       	stdsp	sp[0x0],lr
80004a94:	c2 29       	rjmp	80004cd8 <_vfprintf_r+0x1538>
80004a96:	50 a7       	stdsp	sp[0x28],r7
80004a98:	50 80       	stdsp	sp[0x20],r0
80004a9a:	0c 97       	mov	r7,r6
80004a9c:	04 94       	mov	r4,r2
80004a9e:	06 96       	mov	r6,r3
80004aa0:	02 92       	mov	r2,r1
80004aa2:	fe cc b8 3e 	sub	r12,pc,-18370
80004aa6:	40 93       	lddsp	r3,sp[0x24]
80004aa8:	10 90       	mov	r0,r8
80004aaa:	40 41       	lddsp	r1,sp[0x10]
80004aac:	50 dc       	stdsp	sp[0x34],r12
80004aae:	ed b5 00 05 	bld	r5,0x5
80004ab2:	c5 51       	brne	80004b5c <_vfprintf_r+0x13bc>
80004ab4:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004ab8:	40 3b       	lddsp	r11,sp[0xc]
80004aba:	58 0b       	cp.w	r11,0
80004abc:	c2 20       	breq	80004b00 <_vfprintf_r+0x1360>
80004abe:	10 36       	cp.w	r6,r8
80004ac0:	c0 a4       	brge	80004ad4 <_vfprintf_r+0x1334>
80004ac2:	fa ca f9 44 	sub	r10,sp,-1724
80004ac6:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004aca:	ec e8 fd 88 	ld.d	r8,r6[-632]
80004ace:	fa e9 00 00 	st.d	sp[0],r8
80004ad2:	cf 28       	rjmp	80004cb6 <_vfprintf_r+0x1516>
80004ad4:	fa c8 f9 50 	sub	r8,sp,-1712
80004ad8:	1a d8       	st.w	--sp,r8
80004ada:	fa c8 fa b8 	sub	r8,sp,-1352
80004ade:	04 9a       	mov	r10,r2
80004ae0:	1a d8       	st.w	--sp,r8
80004ae2:	0c 9b       	mov	r11,r6
80004ae4:	fa c8 fb b4 	sub	r8,sp,-1100
80004ae8:	08 9c       	mov	r12,r4
80004aea:	1a d8       	st.w	--sp,r8
80004aec:	fa c8 f9 40 	sub	r8,sp,-1728
80004af0:	fa c9 ff b4 	sub	r9,sp,-76
80004af4:	fe b0 f4 be 	rcall	80003470 <get_arg>
80004af8:	2f dd       	sub	sp,-12
80004afa:	f8 ea 00 00 	ld.d	r10,r12[0]
80004afe:	c0 c8       	rjmp	80004b16 <_vfprintf_r+0x1376>
80004b00:	ee ca ff ff 	sub	r10,r7,-1
80004b04:	10 37       	cp.w	r7,r8
80004b06:	c0 b4       	brge	80004b1c <_vfprintf_r+0x137c>
80004b08:	fa c9 f9 44 	sub	r9,sp,-1724
80004b0c:	14 97       	mov	r7,r10
80004b0e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004b12:	ec ea fd 88 	ld.d	r10,r6[-632]
80004b16:	fa eb 00 00 	st.d	sp[0],r10
80004b1a:	cc e8       	rjmp	80004cb6 <_vfprintf_r+0x1516>
80004b1c:	41 09       	lddsp	r9,sp[0x40]
80004b1e:	59 f8       	cp.w	r8,31
80004b20:	e0 89 00 16 	brgt	80004b4c <_vfprintf_r+0x13ac>
80004b24:	f2 e6 00 00 	ld.d	r6,r9[0]
80004b28:	f2 cb ff f8 	sub	r11,r9,-8
80004b2c:	fa e7 00 00 	st.d	sp[0],r6
80004b30:	51 0b       	stdsp	sp[0x40],r11
80004b32:	fa c6 f9 44 	sub	r6,sp,-1724
80004b36:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004b3a:	fa e6 00 00 	ld.d	r6,sp[0]
80004b3e:	f2 e7 fd 88 	st.d	r9[-632],r6
80004b42:	2f f8       	sub	r8,-1
80004b44:	14 97       	mov	r7,r10
80004b46:	fb 48 06 b4 	st.w	sp[1716],r8
80004b4a:	cb 68       	rjmp	80004cb6 <_vfprintf_r+0x1516>
80004b4c:	f2 e6 00 00 	ld.d	r6,r9[0]
80004b50:	2f 89       	sub	r9,-8
80004b52:	fa e7 00 00 	st.d	sp[0],r6
80004b56:	51 09       	stdsp	sp[0x40],r9
80004b58:	14 97       	mov	r7,r10
80004b5a:	ca e8       	rjmp	80004cb6 <_vfprintf_r+0x1516>
80004b5c:	ed b5 00 04 	bld	r5,0x4
80004b60:	c1 71       	brne	80004b8e <_vfprintf_r+0x13ee>
80004b62:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b66:	40 3e       	lddsp	lr,sp[0xc]
80004b68:	58 0e       	cp.w	lr,0
80004b6a:	c0 80       	breq	80004b7a <_vfprintf_r+0x13da>
80004b6c:	10 36       	cp.w	r6,r8
80004b6e:	c6 94       	brge	80004c40 <_vfprintf_r+0x14a0>
80004b70:	fa cc f9 44 	sub	r12,sp,-1724
80004b74:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004b78:	c8 28       	rjmp	80004c7c <_vfprintf_r+0x14dc>
80004b7a:	ee ca ff ff 	sub	r10,r7,-1
80004b7e:	10 37       	cp.w	r7,r8
80004b80:	e0 84 00 81 	brge	80004c82 <_vfprintf_r+0x14e2>
80004b84:	fa cb f9 44 	sub	r11,sp,-1724
80004b88:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004b8c:	c7 78       	rjmp	80004c7a <_vfprintf_r+0x14da>
80004b8e:	ed b5 00 06 	bld	r5,0x6
80004b92:	c4 b1       	brne	80004c28 <_vfprintf_r+0x1488>
80004b94:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b98:	40 3c       	lddsp	r12,sp[0xc]
80004b9a:	58 0c       	cp.w	r12,0
80004b9c:	c1 d0       	breq	80004bd6 <_vfprintf_r+0x1436>
80004b9e:	10 36       	cp.w	r6,r8
80004ba0:	c0 64       	brge	80004bac <_vfprintf_r+0x140c>
80004ba2:	fa cb f9 44 	sub	r11,sp,-1724
80004ba6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004baa:	c1 f8       	rjmp	80004be8 <_vfprintf_r+0x1448>
80004bac:	fa c8 f9 50 	sub	r8,sp,-1712
80004bb0:	1a d8       	st.w	--sp,r8
80004bb2:	fa c8 fa b8 	sub	r8,sp,-1352
80004bb6:	1a d8       	st.w	--sp,r8
80004bb8:	fa c8 fb b4 	sub	r8,sp,-1100
80004bbc:	1a d8       	st.w	--sp,r8
80004bbe:	fa c8 f9 40 	sub	r8,sp,-1728
80004bc2:	fa c9 ff b4 	sub	r9,sp,-76
80004bc6:	04 9a       	mov	r10,r2
80004bc8:	0c 9b       	mov	r11,r6
80004bca:	08 9c       	mov	r12,r4
80004bcc:	fe b0 f4 52 	rcall	80003470 <get_arg>
80004bd0:	2f dd       	sub	sp,-12
80004bd2:	98 18       	ld.sh	r8,r12[0x2]
80004bd4:	c2 78       	rjmp	80004c22 <_vfprintf_r+0x1482>
80004bd6:	ee ca ff ff 	sub	r10,r7,-1
80004bda:	10 37       	cp.w	r7,r8
80004bdc:	c0 a4       	brge	80004bf0 <_vfprintf_r+0x1450>
80004bde:	fa c9 f9 44 	sub	r9,sp,-1724
80004be2:	14 97       	mov	r7,r10
80004be4:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004be8:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004bec:	c1 b8       	rjmp	80004c22 <_vfprintf_r+0x1482>
80004bee:	d7 03       	nop
80004bf0:	41 09       	lddsp	r9,sp[0x40]
80004bf2:	59 f8       	cp.w	r8,31
80004bf4:	e0 89 00 13 	brgt	80004c1a <_vfprintf_r+0x147a>
80004bf8:	f2 cb ff fc 	sub	r11,r9,-4
80004bfc:	51 0b       	stdsp	sp[0x40],r11
80004bfe:	72 09       	ld.w	r9,r9[0x0]
80004c00:	fa c6 f9 44 	sub	r6,sp,-1724
80004c04:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004c08:	2f f8       	sub	r8,-1
80004c0a:	f7 49 fd 88 	st.w	r11[-632],r9
80004c0e:	fb 48 06 b4 	st.w	sp[1716],r8
80004c12:	14 97       	mov	r7,r10
80004c14:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004c18:	c0 58       	rjmp	80004c22 <_vfprintf_r+0x1482>
80004c1a:	92 18       	ld.sh	r8,r9[0x2]
80004c1c:	14 97       	mov	r7,r10
80004c1e:	2f c9       	sub	r9,-4
80004c20:	51 09       	stdsp	sp[0x40],r9
80004c22:	5c 78       	castu.h	r8
80004c24:	50 18       	stdsp	sp[0x4],r8
80004c26:	c4 68       	rjmp	80004cb2 <_vfprintf_r+0x1512>
80004c28:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c2c:	40 3c       	lddsp	r12,sp[0xc]
80004c2e:	58 0c       	cp.w	r12,0
80004c30:	c1 d0       	breq	80004c6a <_vfprintf_r+0x14ca>
80004c32:	10 36       	cp.w	r6,r8
80004c34:	c0 64       	brge	80004c40 <_vfprintf_r+0x14a0>
80004c36:	fa cb f9 44 	sub	r11,sp,-1724
80004c3a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004c3e:	c1 f8       	rjmp	80004c7c <_vfprintf_r+0x14dc>
80004c40:	fa c8 f9 50 	sub	r8,sp,-1712
80004c44:	1a d8       	st.w	--sp,r8
80004c46:	fa c8 fa b8 	sub	r8,sp,-1352
80004c4a:	0c 9b       	mov	r11,r6
80004c4c:	1a d8       	st.w	--sp,r8
80004c4e:	fa c8 fb b4 	sub	r8,sp,-1100
80004c52:	04 9a       	mov	r10,r2
80004c54:	1a d8       	st.w	--sp,r8
80004c56:	08 9c       	mov	r12,r4
80004c58:	fa c8 f9 40 	sub	r8,sp,-1728
80004c5c:	fa c9 ff b4 	sub	r9,sp,-76
80004c60:	fe b0 f4 08 	rcall	80003470 <get_arg>
80004c64:	2f dd       	sub	sp,-12
80004c66:	78 0b       	ld.w	r11,r12[0x0]
80004c68:	c2 48       	rjmp	80004cb0 <_vfprintf_r+0x1510>
80004c6a:	ee ca ff ff 	sub	r10,r7,-1
80004c6e:	10 37       	cp.w	r7,r8
80004c70:	c0 94       	brge	80004c82 <_vfprintf_r+0x14e2>
80004c72:	fa c9 f9 44 	sub	r9,sp,-1724
80004c76:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004c7a:	14 97       	mov	r7,r10
80004c7c:	ec fb fd 88 	ld.w	r11,r6[-632]
80004c80:	c1 88       	rjmp	80004cb0 <_vfprintf_r+0x1510>
80004c82:	41 09       	lddsp	r9,sp[0x40]
80004c84:	59 f8       	cp.w	r8,31
80004c86:	e0 89 00 11 	brgt	80004ca8 <_vfprintf_r+0x1508>
80004c8a:	f2 cb ff fc 	sub	r11,r9,-4
80004c8e:	51 0b       	stdsp	sp[0x40],r11
80004c90:	fa c6 f9 44 	sub	r6,sp,-1724
80004c94:	72 0b       	ld.w	r11,r9[0x0]
80004c96:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004c9a:	f3 4b fd 88 	st.w	r9[-632],r11
80004c9e:	2f f8       	sub	r8,-1
80004ca0:	14 97       	mov	r7,r10
80004ca2:	fb 48 06 b4 	st.w	sp[1716],r8
80004ca6:	c0 58       	rjmp	80004cb0 <_vfprintf_r+0x1510>
80004ca8:	72 0b       	ld.w	r11,r9[0x0]
80004caa:	14 97       	mov	r7,r10
80004cac:	2f c9       	sub	r9,-4
80004cae:	51 09       	stdsp	sp[0x40],r9
80004cb0:	50 1b       	stdsp	sp[0x4],r11
80004cb2:	30 0e       	mov	lr,0
80004cb4:	50 0e       	stdsp	sp[0x0],lr
80004cb6:	40 08       	lddsp	r8,sp[0x0]
80004cb8:	40 1c       	lddsp	r12,sp[0x4]
80004cba:	18 48       	or	r8,r12
80004cbc:	5f 19       	srne	r9
80004cbe:	0a 98       	mov	r8,r5
80004cc0:	eb e9 00 09 	and	r9,r5,r9
80004cc4:	a1 b8       	sbr	r8,0x1
80004cc6:	58 09       	cp.w	r9,0
80004cc8:	c0 70       	breq	80004cd6 <_vfprintf_r+0x1536>
80004cca:	10 95       	mov	r5,r8
80004ccc:	fb 60 06 b9 	st.b	sp[1721],r0
80004cd0:	33 08       	mov	r8,48
80004cd2:	fb 68 06 b8 	st.b	sp[1720],r8
80004cd6:	30 28       	mov	r8,2
80004cd8:	30 09       	mov	r9,0
80004cda:	fb 69 06 bb 	st.b	sp[1723],r9
80004cde:	0a 99       	mov	r9,r5
80004ce0:	a7 d9       	cbr	r9,0x7
80004ce2:	40 2b       	lddsp	r11,sp[0x8]
80004ce4:	40 16       	lddsp	r6,sp[0x4]
80004ce6:	58 0b       	cp.w	r11,0
80004ce8:	5f 1a       	srne	r10
80004cea:	f2 05 17 40 	movge	r5,r9
80004cee:	fa c2 f9 78 	sub	r2,sp,-1672
80004cf2:	40 09       	lddsp	r9,sp[0x0]
80004cf4:	0c 49       	or	r9,r6
80004cf6:	5f 19       	srne	r9
80004cf8:	f5 e9 10 09 	or	r9,r10,r9
80004cfc:	c5 c0       	breq	80004db4 <_vfprintf_r+0x1614>
80004cfe:	30 19       	mov	r9,1
80004d00:	f2 08 18 00 	cp.b	r8,r9
80004d04:	c0 60       	breq	80004d10 <_vfprintf_r+0x1570>
80004d06:	30 29       	mov	r9,2
80004d08:	f2 08 18 00 	cp.b	r8,r9
80004d0c:	c0 41       	brne	80004d14 <_vfprintf_r+0x1574>
80004d0e:	c3 c8       	rjmp	80004d86 <_vfprintf_r+0x15e6>
80004d10:	04 96       	mov	r6,r2
80004d12:	c3 08       	rjmp	80004d72 <_vfprintf_r+0x15d2>
80004d14:	04 96       	mov	r6,r2
80004d16:	fa e8 00 00 	ld.d	r8,sp[0]
80004d1a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80004d1e:	2d 0a       	sub	r10,-48
80004d20:	0c fa       	st.b	--r6,r10
80004d22:	f0 0b 16 03 	lsr	r11,r8,0x3
80004d26:	f2 0c 16 03 	lsr	r12,r9,0x3
80004d2a:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80004d2e:	18 99       	mov	r9,r12
80004d30:	16 98       	mov	r8,r11
80004d32:	58 08       	cp.w	r8,0
80004d34:	5c 29       	cpc	r9
80004d36:	cf 21       	brne	80004d1a <_vfprintf_r+0x157a>
80004d38:	fa e9 00 00 	st.d	sp[0],r8
80004d3c:	ed b5 00 00 	bld	r5,0x0
80004d40:	c4 51       	brne	80004dca <_vfprintf_r+0x162a>
80004d42:	33 09       	mov	r9,48
80004d44:	f2 0a 18 00 	cp.b	r10,r9
80004d48:	c4 10       	breq	80004dca <_vfprintf_r+0x162a>
80004d4a:	0c f9       	st.b	--r6,r9
80004d4c:	c3 f8       	rjmp	80004dca <_vfprintf_r+0x162a>
80004d4e:	fa ea 00 00 	ld.d	r10,sp[0]
80004d52:	30 a8       	mov	r8,10
80004d54:	30 09       	mov	r9,0
80004d56:	e0 a0 1e 31 	rcall	800089b8 <__avr32_umod64>
80004d5a:	30 a8       	mov	r8,10
80004d5c:	2d 0a       	sub	r10,-48
80004d5e:	30 09       	mov	r9,0
80004d60:	ac 8a       	st.b	r6[0x0],r10
80004d62:	fa ea 00 00 	ld.d	r10,sp[0]
80004d66:	e0 a0 1c f7 	rcall	80008754 <__avr32_udiv64>
80004d6a:	16 99       	mov	r9,r11
80004d6c:	14 98       	mov	r8,r10
80004d6e:	fa e9 00 00 	st.d	sp[0],r8
80004d72:	20 16       	sub	r6,1
80004d74:	fa ea 00 00 	ld.d	r10,sp[0]
80004d78:	58 9a       	cp.w	r10,9
80004d7a:	5c 2b       	cpc	r11
80004d7c:	fe 9b ff e9 	brhi	80004d4e <_vfprintf_r+0x15ae>
80004d80:	1b f8       	ld.ub	r8,sp[0x7]
80004d82:	2d 08       	sub	r8,-48
80004d84:	c2 08       	rjmp	80004dc4 <_vfprintf_r+0x1624>
80004d86:	04 96       	mov	r6,r2
80004d88:	fa e8 00 00 	ld.d	r8,sp[0]
80004d8c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80004d90:	40 de       	lddsp	lr,sp[0x34]
80004d92:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80004d96:	0c fa       	st.b	--r6,r10
80004d98:	f2 0b 16 04 	lsr	r11,r9,0x4
80004d9c:	f0 0a 16 04 	lsr	r10,r8,0x4
80004da0:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80004da4:	16 99       	mov	r9,r11
80004da6:	14 98       	mov	r8,r10
80004da8:	58 08       	cp.w	r8,0
80004daa:	5c 29       	cpc	r9
80004dac:	cf 01       	brne	80004d8c <_vfprintf_r+0x15ec>
80004dae:	fa e9 00 00 	st.d	sp[0],r8
80004db2:	c0 c8       	rjmp	80004dca <_vfprintf_r+0x162a>
80004db4:	58 08       	cp.w	r8,0
80004db6:	c0 91       	brne	80004dc8 <_vfprintf_r+0x1628>
80004db8:	ed b5 00 00 	bld	r5,0x0
80004dbc:	c0 61       	brne	80004dc8 <_vfprintf_r+0x1628>
80004dbe:	fa c6 f9 79 	sub	r6,sp,-1671
80004dc2:	33 08       	mov	r8,48
80004dc4:	ac 88       	st.b	r6[0x0],r8
80004dc6:	c0 28       	rjmp	80004dca <_vfprintf_r+0x162a>
80004dc8:	04 96       	mov	r6,r2
80004dca:	0c 12       	sub	r2,r6
80004dcc:	c1 c8       	rjmp	80004e04 <_vfprintf_r+0x1664>
80004dce:	50 a7       	stdsp	sp[0x28],r7
80004dd0:	50 80       	stdsp	sp[0x20],r0
80004dd2:	40 93       	lddsp	r3,sp[0x24]
80004dd4:	0c 97       	mov	r7,r6
80004dd6:	10 90       	mov	r0,r8
80004dd8:	04 94       	mov	r4,r2
80004dda:	40 41       	lddsp	r1,sp[0x10]
80004ddc:	58 08       	cp.w	r8,0
80004dde:	e0 80 04 4f 	breq	8000567c <_vfprintf_r+0x1edc>
80004de2:	fb 68 06 60 	st.b	sp[1632],r8
80004de6:	30 0c       	mov	r12,0
80004de8:	30 08       	mov	r8,0
80004dea:	30 12       	mov	r2,1
80004dec:	fb 68 06 bb 	st.b	sp[1723],r8
80004df0:	50 2c       	stdsp	sp[0x8],r12
80004df2:	fa c6 f9 a0 	sub	r6,sp,-1632
80004df6:	c0 78       	rjmp	80004e04 <_vfprintf_r+0x1664>
80004df8:	30 0b       	mov	r11,0
80004dfa:	50 2b       	stdsp	sp[0x8],r11
80004dfc:	c0 48       	rjmp	80004e04 <_vfprintf_r+0x1664>
80004dfe:	40 22       	lddsp	r2,sp[0x8]
80004e00:	30 0a       	mov	r10,0
80004e02:	50 2a       	stdsp	sp[0x8],r10
80004e04:	40 29       	lddsp	r9,sp[0x8]
80004e06:	e4 09 0c 49 	max	r9,r2,r9
80004e0a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004e0e:	50 39       	stdsp	sp[0xc],r9
80004e10:	0a 9e       	mov	lr,r5
80004e12:	30 09       	mov	r9,0
80004e14:	e2 1e 00 02 	andl	lr,0x2,COH
80004e18:	f2 08 18 00 	cp.b	r8,r9
80004e1c:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80004e20:	f7 b8 01 ff 	subne	r8,-1
80004e24:	fb f8 1a 03 	st.wne	sp[0xc],r8
80004e28:	0a 9b       	mov	r11,r5
80004e2a:	58 0e       	cp.w	lr,0
80004e2c:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80004e30:	f7 bc 01 fe 	subne	r12,-2
80004e34:	fb fc 1a 03 	st.wne	sp[0xc],r12
80004e38:	e2 1b 00 84 	andl	r11,0x84,COH
80004e3c:	50 fe       	stdsp	sp[0x3c],lr
80004e3e:	50 9b       	stdsp	sp[0x24],r11
80004e40:	c4 71       	brne	80004ece <_vfprintf_r+0x172e>
80004e42:	40 8a       	lddsp	r10,sp[0x20]
80004e44:	40 39       	lddsp	r9,sp[0xc]
80004e46:	12 1a       	sub	r10,r9
80004e48:	50 4a       	stdsp	sp[0x10],r10
80004e4a:	58 0a       	cp.w	r10,0
80004e4c:	e0 89 00 20 	brgt	80004e8c <_vfprintf_r+0x16ec>
80004e50:	c3 f8       	rjmp	80004ece <_vfprintf_r+0x172e>
80004e52:	2f 09       	sub	r9,-16
80004e54:	2f f8       	sub	r8,-1
80004e56:	fe ce bb da 	sub	lr,pc,-17446
80004e5a:	31 0c       	mov	r12,16
80004e5c:	fb 49 06 90 	st.w	sp[1680],r9
80004e60:	87 0e       	st.w	r3[0x0],lr
80004e62:	87 1c       	st.w	r3[0x4],r12
80004e64:	fb 48 06 8c 	st.w	sp[1676],r8
80004e68:	58 78       	cp.w	r8,7
80004e6a:	e0 89 00 04 	brgt	80004e72 <_vfprintf_r+0x16d2>
80004e6e:	2f 83       	sub	r3,-8
80004e70:	c0 b8       	rjmp	80004e86 <_vfprintf_r+0x16e6>
80004e72:	fa ca f9 78 	sub	r10,sp,-1672
80004e76:	02 9b       	mov	r11,r1
80004e78:	08 9c       	mov	r12,r4
80004e7a:	fe b0 f4 85 	rcall	80003784 <__sprint_r>
80004e7e:	e0 81 04 10 	brne	8000569e <_vfprintf_r+0x1efe>
80004e82:	fa c3 f9 e0 	sub	r3,sp,-1568
80004e86:	40 4b       	lddsp	r11,sp[0x10]
80004e88:	21 0b       	sub	r11,16
80004e8a:	50 4b       	stdsp	sp[0x10],r11
80004e8c:	fa f9 06 90 	ld.w	r9,sp[1680]
80004e90:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004e94:	fe ca bc 18 	sub	r10,pc,-17384
80004e98:	40 4e       	lddsp	lr,sp[0x10]
80004e9a:	59 0e       	cp.w	lr,16
80004e9c:	fe 99 ff db 	brgt	80004e52 <_vfprintf_r+0x16b2>
80004ea0:	1c 09       	add	r9,lr
80004ea2:	2f f8       	sub	r8,-1
80004ea4:	87 0a       	st.w	r3[0x0],r10
80004ea6:	fb 49 06 90 	st.w	sp[1680],r9
80004eaa:	87 1e       	st.w	r3[0x4],lr
80004eac:	fb 48 06 8c 	st.w	sp[1676],r8
80004eb0:	58 78       	cp.w	r8,7
80004eb2:	e0 89 00 04 	brgt	80004eba <_vfprintf_r+0x171a>
80004eb6:	2f 83       	sub	r3,-8
80004eb8:	c0 b8       	rjmp	80004ece <_vfprintf_r+0x172e>
80004eba:	fa ca f9 78 	sub	r10,sp,-1672
80004ebe:	02 9b       	mov	r11,r1
80004ec0:	08 9c       	mov	r12,r4
80004ec2:	fe b0 f4 61 	rcall	80003784 <__sprint_r>
80004ec6:	e0 81 03 ec 	brne	8000569e <_vfprintf_r+0x1efe>
80004eca:	fa c3 f9 e0 	sub	r3,sp,-1568
80004ece:	30 09       	mov	r9,0
80004ed0:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80004ed4:	f2 08 18 00 	cp.b	r8,r9
80004ed8:	c1 f0       	breq	80004f16 <_vfprintf_r+0x1776>
80004eda:	fa f8 06 90 	ld.w	r8,sp[1680]
80004ede:	fa c9 f9 45 	sub	r9,sp,-1723
80004ee2:	2f f8       	sub	r8,-1
80004ee4:	87 09       	st.w	r3[0x0],r9
80004ee6:	fb 48 06 90 	st.w	sp[1680],r8
80004eea:	30 19       	mov	r9,1
80004eec:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004ef0:	87 19       	st.w	r3[0x4],r9
80004ef2:	2f f8       	sub	r8,-1
80004ef4:	fb 48 06 8c 	st.w	sp[1676],r8
80004ef8:	58 78       	cp.w	r8,7
80004efa:	e0 89 00 04 	brgt	80004f02 <_vfprintf_r+0x1762>
80004efe:	2f 83       	sub	r3,-8
80004f00:	c0 b8       	rjmp	80004f16 <_vfprintf_r+0x1776>
80004f02:	fa ca f9 78 	sub	r10,sp,-1672
80004f06:	02 9b       	mov	r11,r1
80004f08:	08 9c       	mov	r12,r4
80004f0a:	fe b0 f4 3d 	rcall	80003784 <__sprint_r>
80004f0e:	e0 81 03 c8 	brne	8000569e <_vfprintf_r+0x1efe>
80004f12:	fa c3 f9 e0 	sub	r3,sp,-1568
80004f16:	40 fc       	lddsp	r12,sp[0x3c]
80004f18:	58 0c       	cp.w	r12,0
80004f1a:	c1 f0       	breq	80004f58 <_vfprintf_r+0x17b8>
80004f1c:	fa f8 06 90 	ld.w	r8,sp[1680]
80004f20:	fa c9 f9 48 	sub	r9,sp,-1720
80004f24:	2f e8       	sub	r8,-2
80004f26:	87 09       	st.w	r3[0x0],r9
80004f28:	fb 48 06 90 	st.w	sp[1680],r8
80004f2c:	30 29       	mov	r9,2
80004f2e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004f32:	87 19       	st.w	r3[0x4],r9
80004f34:	2f f8       	sub	r8,-1
80004f36:	fb 48 06 8c 	st.w	sp[1676],r8
80004f3a:	58 78       	cp.w	r8,7
80004f3c:	e0 89 00 04 	brgt	80004f44 <_vfprintf_r+0x17a4>
80004f40:	2f 83       	sub	r3,-8
80004f42:	c0 b8       	rjmp	80004f58 <_vfprintf_r+0x17b8>
80004f44:	fa ca f9 78 	sub	r10,sp,-1672
80004f48:	02 9b       	mov	r11,r1
80004f4a:	08 9c       	mov	r12,r4
80004f4c:	fe b0 f4 1c 	rcall	80003784 <__sprint_r>
80004f50:	e0 81 03 a7 	brne	8000569e <_vfprintf_r+0x1efe>
80004f54:	fa c3 f9 e0 	sub	r3,sp,-1568
80004f58:	40 9b       	lddsp	r11,sp[0x24]
80004f5a:	e0 4b 00 80 	cp.w	r11,128
80004f5e:	c4 71       	brne	80004fec <_vfprintf_r+0x184c>
80004f60:	40 8a       	lddsp	r10,sp[0x20]
80004f62:	40 39       	lddsp	r9,sp[0xc]
80004f64:	12 1a       	sub	r10,r9
80004f66:	50 4a       	stdsp	sp[0x10],r10
80004f68:	58 0a       	cp.w	r10,0
80004f6a:	e0 89 00 20 	brgt	80004faa <_vfprintf_r+0x180a>
80004f6e:	c3 f8       	rjmp	80004fec <_vfprintf_r+0x184c>
80004f70:	2f 09       	sub	r9,-16
80004f72:	2f f8       	sub	r8,-1
80004f74:	fe ce bc e8 	sub	lr,pc,-17176
80004f78:	31 0c       	mov	r12,16
80004f7a:	fb 49 06 90 	st.w	sp[1680],r9
80004f7e:	87 0e       	st.w	r3[0x0],lr
80004f80:	87 1c       	st.w	r3[0x4],r12
80004f82:	fb 48 06 8c 	st.w	sp[1676],r8
80004f86:	58 78       	cp.w	r8,7
80004f88:	e0 89 00 04 	brgt	80004f90 <_vfprintf_r+0x17f0>
80004f8c:	2f 83       	sub	r3,-8
80004f8e:	c0 b8       	rjmp	80004fa4 <_vfprintf_r+0x1804>
80004f90:	fa ca f9 78 	sub	r10,sp,-1672
80004f94:	02 9b       	mov	r11,r1
80004f96:	08 9c       	mov	r12,r4
80004f98:	fe b0 f3 f6 	rcall	80003784 <__sprint_r>
80004f9c:	e0 81 03 81 	brne	8000569e <_vfprintf_r+0x1efe>
80004fa0:	fa c3 f9 e0 	sub	r3,sp,-1568
80004fa4:	40 4b       	lddsp	r11,sp[0x10]
80004fa6:	21 0b       	sub	r11,16
80004fa8:	50 4b       	stdsp	sp[0x10],r11
80004faa:	fa f9 06 90 	ld.w	r9,sp[1680]
80004fae:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004fb2:	fe ca bd 26 	sub	r10,pc,-17114
80004fb6:	40 4e       	lddsp	lr,sp[0x10]
80004fb8:	59 0e       	cp.w	lr,16
80004fba:	fe 99 ff db 	brgt	80004f70 <_vfprintf_r+0x17d0>
80004fbe:	1c 09       	add	r9,lr
80004fc0:	2f f8       	sub	r8,-1
80004fc2:	87 0a       	st.w	r3[0x0],r10
80004fc4:	fb 49 06 90 	st.w	sp[1680],r9
80004fc8:	87 1e       	st.w	r3[0x4],lr
80004fca:	fb 48 06 8c 	st.w	sp[1676],r8
80004fce:	58 78       	cp.w	r8,7
80004fd0:	e0 89 00 04 	brgt	80004fd8 <_vfprintf_r+0x1838>
80004fd4:	2f 83       	sub	r3,-8
80004fd6:	c0 b8       	rjmp	80004fec <_vfprintf_r+0x184c>
80004fd8:	fa ca f9 78 	sub	r10,sp,-1672
80004fdc:	02 9b       	mov	r11,r1
80004fde:	08 9c       	mov	r12,r4
80004fe0:	fe b0 f3 d2 	rcall	80003784 <__sprint_r>
80004fe4:	e0 81 03 5d 	brne	8000569e <_vfprintf_r+0x1efe>
80004fe8:	fa c3 f9 e0 	sub	r3,sp,-1568
80004fec:	40 2c       	lddsp	r12,sp[0x8]
80004fee:	04 1c       	sub	r12,r2
80004ff0:	50 2c       	stdsp	sp[0x8],r12
80004ff2:	58 0c       	cp.w	r12,0
80004ff4:	e0 89 00 20 	brgt	80005034 <_vfprintf_r+0x1894>
80004ff8:	c3 f8       	rjmp	80005076 <_vfprintf_r+0x18d6>
80004ffa:	2f 09       	sub	r9,-16
80004ffc:	2f f8       	sub	r8,-1
80004ffe:	fe cb bd 72 	sub	r11,pc,-17038
80005002:	31 0a       	mov	r10,16
80005004:	fb 49 06 90 	st.w	sp[1680],r9
80005008:	87 0b       	st.w	r3[0x0],r11
8000500a:	87 1a       	st.w	r3[0x4],r10
8000500c:	fb 48 06 8c 	st.w	sp[1676],r8
80005010:	58 78       	cp.w	r8,7
80005012:	e0 89 00 04 	brgt	8000501a <_vfprintf_r+0x187a>
80005016:	2f 83       	sub	r3,-8
80005018:	c0 b8       	rjmp	8000502e <_vfprintf_r+0x188e>
8000501a:	fa ca f9 78 	sub	r10,sp,-1672
8000501e:	02 9b       	mov	r11,r1
80005020:	08 9c       	mov	r12,r4
80005022:	fe b0 f3 b1 	rcall	80003784 <__sprint_r>
80005026:	e0 81 03 3c 	brne	8000569e <_vfprintf_r+0x1efe>
8000502a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000502e:	40 29       	lddsp	r9,sp[0x8]
80005030:	21 09       	sub	r9,16
80005032:	50 29       	stdsp	sp[0x8],r9
80005034:	fa f9 06 90 	ld.w	r9,sp[1680]
80005038:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000503c:	fe ca bd b0 	sub	r10,pc,-16976
80005040:	40 2e       	lddsp	lr,sp[0x8]
80005042:	59 0e       	cp.w	lr,16
80005044:	fe 99 ff db 	brgt	80004ffa <_vfprintf_r+0x185a>
80005048:	1c 09       	add	r9,lr
8000504a:	2f f8       	sub	r8,-1
8000504c:	87 0a       	st.w	r3[0x0],r10
8000504e:	fb 49 06 90 	st.w	sp[1680],r9
80005052:	87 1e       	st.w	r3[0x4],lr
80005054:	fb 48 06 8c 	st.w	sp[1676],r8
80005058:	58 78       	cp.w	r8,7
8000505a:	e0 89 00 04 	brgt	80005062 <_vfprintf_r+0x18c2>
8000505e:	2f 83       	sub	r3,-8
80005060:	c0 b8       	rjmp	80005076 <_vfprintf_r+0x18d6>
80005062:	fa ca f9 78 	sub	r10,sp,-1672
80005066:	02 9b       	mov	r11,r1
80005068:	08 9c       	mov	r12,r4
8000506a:	fe b0 f3 8d 	rcall	80003784 <__sprint_r>
8000506e:	e0 81 03 18 	brne	8000569e <_vfprintf_r+0x1efe>
80005072:	fa c3 f9 e0 	sub	r3,sp,-1568
80005076:	ed b5 00 08 	bld	r5,0x8
8000507a:	c0 b0       	breq	80005090 <_vfprintf_r+0x18f0>
8000507c:	fa f8 06 90 	ld.w	r8,sp[1680]
80005080:	87 12       	st.w	r3[0x4],r2
80005082:	87 06       	st.w	r3[0x0],r6
80005084:	f0 02 00 02 	add	r2,r8,r2
80005088:	fb 42 06 90 	st.w	sp[1680],r2
8000508c:	e0 8f 01 d4 	bral	80005434 <_vfprintf_r+0x1c94>
80005090:	e0 40 00 65 	cp.w	r0,101
80005094:	e0 8a 01 d6 	brle	80005440 <_vfprintf_r+0x1ca0>
80005098:	30 08       	mov	r8,0
8000509a:	30 09       	mov	r9,0
8000509c:	40 5b       	lddsp	r11,sp[0x14]
8000509e:	40 7a       	lddsp	r10,sp[0x1c]
800050a0:	e0 a0 19 53 	rcall	80008346 <__avr32_f64_cmp_eq>
800050a4:	c7 90       	breq	80005196 <_vfprintf_r+0x19f6>
800050a6:	fa f8 06 90 	ld.w	r8,sp[1680]
800050aa:	fe c9 be 32 	sub	r9,pc,-16846
800050ae:	2f f8       	sub	r8,-1
800050b0:	87 09       	st.w	r3[0x0],r9
800050b2:	fb 48 06 90 	st.w	sp[1680],r8
800050b6:	30 19       	mov	r9,1
800050b8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800050bc:	87 19       	st.w	r3[0x4],r9
800050be:	2f f8       	sub	r8,-1
800050c0:	fb 48 06 8c 	st.w	sp[1676],r8
800050c4:	58 78       	cp.w	r8,7
800050c6:	e0 89 00 05 	brgt	800050d0 <_vfprintf_r+0x1930>
800050ca:	2f 83       	sub	r3,-8
800050cc:	c0 c8       	rjmp	800050e4 <_vfprintf_r+0x1944>
800050ce:	d7 03       	nop
800050d0:	fa ca f9 78 	sub	r10,sp,-1672
800050d4:	02 9b       	mov	r11,r1
800050d6:	08 9c       	mov	r12,r4
800050d8:	fe b0 f3 56 	rcall	80003784 <__sprint_r>
800050dc:	e0 81 02 e1 	brne	8000569e <_vfprintf_r+0x1efe>
800050e0:	fa c3 f9 e0 	sub	r3,sp,-1568
800050e4:	fa f8 06 ac 	ld.w	r8,sp[1708]
800050e8:	40 6c       	lddsp	r12,sp[0x18]
800050ea:	18 38       	cp.w	r8,r12
800050ec:	c0 55       	brlt	800050f6 <_vfprintf_r+0x1956>
800050ee:	ed b5 00 00 	bld	r5,0x0
800050f2:	e0 81 02 6b 	brne	800055c8 <_vfprintf_r+0x1e28>
800050f6:	fa f8 06 90 	ld.w	r8,sp[1680]
800050fa:	2f f8       	sub	r8,-1
800050fc:	40 cb       	lddsp	r11,sp[0x30]
800050fe:	fb 48 06 90 	st.w	sp[1680],r8
80005102:	30 19       	mov	r9,1
80005104:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005108:	87 0b       	st.w	r3[0x0],r11
8000510a:	2f f8       	sub	r8,-1
8000510c:	87 19       	st.w	r3[0x4],r9
8000510e:	fb 48 06 8c 	st.w	sp[1676],r8
80005112:	58 78       	cp.w	r8,7
80005114:	e0 89 00 04 	brgt	8000511c <_vfprintf_r+0x197c>
80005118:	2f 83       	sub	r3,-8
8000511a:	c0 b8       	rjmp	80005130 <_vfprintf_r+0x1990>
8000511c:	fa ca f9 78 	sub	r10,sp,-1672
80005120:	02 9b       	mov	r11,r1
80005122:	08 9c       	mov	r12,r4
80005124:	fe b0 f3 30 	rcall	80003784 <__sprint_r>
80005128:	e0 81 02 bb 	brne	8000569e <_vfprintf_r+0x1efe>
8000512c:	fa c3 f9 e0 	sub	r3,sp,-1568
80005130:	40 66       	lddsp	r6,sp[0x18]
80005132:	20 16       	sub	r6,1
80005134:	58 06       	cp.w	r6,0
80005136:	e0 89 00 1d 	brgt	80005170 <_vfprintf_r+0x19d0>
8000513a:	e0 8f 02 47 	bral	800055c8 <_vfprintf_r+0x1e28>
8000513e:	2f 09       	sub	r9,-16
80005140:	2f f8       	sub	r8,-1
80005142:	fb 49 06 90 	st.w	sp[1680],r9
80005146:	87 02       	st.w	r3[0x0],r2
80005148:	87 10       	st.w	r3[0x4],r0
8000514a:	fb 48 06 8c 	st.w	sp[1676],r8
8000514e:	58 78       	cp.w	r8,7
80005150:	e0 89 00 04 	brgt	80005158 <_vfprintf_r+0x19b8>
80005154:	2f 83       	sub	r3,-8
80005156:	c0 b8       	rjmp	8000516c <_vfprintf_r+0x19cc>
80005158:	fa ca f9 78 	sub	r10,sp,-1672
8000515c:	02 9b       	mov	r11,r1
8000515e:	08 9c       	mov	r12,r4
80005160:	fe b0 f3 12 	rcall	80003784 <__sprint_r>
80005164:	e0 81 02 9d 	brne	8000569e <_vfprintf_r+0x1efe>
80005168:	fa c3 f9 e0 	sub	r3,sp,-1568
8000516c:	21 06       	sub	r6,16
8000516e:	c0 48       	rjmp	80005176 <_vfprintf_r+0x19d6>
80005170:	fe c2 be e4 	sub	r2,pc,-16668
80005174:	31 00       	mov	r0,16
80005176:	fa f9 06 90 	ld.w	r9,sp[1680]
8000517a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000517e:	fe ca be f2 	sub	r10,pc,-16654
80005182:	59 06       	cp.w	r6,16
80005184:	fe 99 ff dd 	brgt	8000513e <_vfprintf_r+0x199e>
80005188:	0c 09       	add	r9,r6
8000518a:	87 0a       	st.w	r3[0x0],r10
8000518c:	fb 49 06 90 	st.w	sp[1680],r9
80005190:	2f f8       	sub	r8,-1
80005192:	87 16       	st.w	r3[0x4],r6
80005194:	c5 39       	rjmp	8000543a <_vfprintf_r+0x1c9a>
80005196:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000519a:	58 0a       	cp.w	r10,0
8000519c:	e0 89 00 92 	brgt	800052c0 <_vfprintf_r+0x1b20>
800051a0:	fa f8 06 90 	ld.w	r8,sp[1680]
800051a4:	fe c9 bf 2c 	sub	r9,pc,-16596
800051a8:	2f f8       	sub	r8,-1
800051aa:	87 09       	st.w	r3[0x0],r9
800051ac:	fb 48 06 90 	st.w	sp[1680],r8
800051b0:	30 19       	mov	r9,1
800051b2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800051b6:	87 19       	st.w	r3[0x4],r9
800051b8:	2f f8       	sub	r8,-1
800051ba:	fb 48 06 8c 	st.w	sp[1676],r8
800051be:	58 78       	cp.w	r8,7
800051c0:	e0 89 00 04 	brgt	800051c8 <_vfprintf_r+0x1a28>
800051c4:	2f 83       	sub	r3,-8
800051c6:	c0 b8       	rjmp	800051dc <_vfprintf_r+0x1a3c>
800051c8:	fa ca f9 78 	sub	r10,sp,-1672
800051cc:	02 9b       	mov	r11,r1
800051ce:	08 9c       	mov	r12,r4
800051d0:	fe b0 f2 da 	rcall	80003784 <__sprint_r>
800051d4:	e0 81 02 65 	brne	8000569e <_vfprintf_r+0x1efe>
800051d8:	fa c3 f9 e0 	sub	r3,sp,-1568
800051dc:	fa f8 06 ac 	ld.w	r8,sp[1708]
800051e0:	58 08       	cp.w	r8,0
800051e2:	c0 81       	brne	800051f2 <_vfprintf_r+0x1a52>
800051e4:	40 6a       	lddsp	r10,sp[0x18]
800051e6:	58 0a       	cp.w	r10,0
800051e8:	c0 51       	brne	800051f2 <_vfprintf_r+0x1a52>
800051ea:	ed b5 00 00 	bld	r5,0x0
800051ee:	e0 81 01 ed 	brne	800055c8 <_vfprintf_r+0x1e28>
800051f2:	40 c9       	lddsp	r9,sp[0x30]
800051f4:	fa f8 06 90 	ld.w	r8,sp[1680]
800051f8:	2f f8       	sub	r8,-1
800051fa:	87 09       	st.w	r3[0x0],r9
800051fc:	fb 48 06 90 	st.w	sp[1680],r8
80005200:	30 19       	mov	r9,1
80005202:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005206:	87 19       	st.w	r3[0x4],r9
80005208:	2f f8       	sub	r8,-1
8000520a:	fb 48 06 8c 	st.w	sp[1676],r8
8000520e:	58 78       	cp.w	r8,7
80005210:	e0 89 00 04 	brgt	80005218 <_vfprintf_r+0x1a78>
80005214:	2f 83       	sub	r3,-8
80005216:	c0 b8       	rjmp	8000522c <_vfprintf_r+0x1a8c>
80005218:	fa ca f9 78 	sub	r10,sp,-1672
8000521c:	02 9b       	mov	r11,r1
8000521e:	08 9c       	mov	r12,r4
80005220:	fe b0 f2 b2 	rcall	80003784 <__sprint_r>
80005224:	e0 81 02 3d 	brne	8000569e <_vfprintf_r+0x1efe>
80005228:	fa c3 f9 e0 	sub	r3,sp,-1568
8000522c:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005230:	5c 32       	neg	r2
80005232:	58 02       	cp.w	r2,0
80005234:	e0 89 00 1d 	brgt	8000526e <_vfprintf_r+0x1ace>
80005238:	c3 d8       	rjmp	800052b2 <_vfprintf_r+0x1b12>
8000523a:	2f 09       	sub	r9,-16
8000523c:	2f f8       	sub	r8,-1
8000523e:	31 0e       	mov	lr,16
80005240:	fb 49 06 90 	st.w	sp[1680],r9
80005244:	87 00       	st.w	r3[0x0],r0
80005246:	87 1e       	st.w	r3[0x4],lr
80005248:	fb 48 06 8c 	st.w	sp[1676],r8
8000524c:	58 78       	cp.w	r8,7
8000524e:	e0 89 00 04 	brgt	80005256 <_vfprintf_r+0x1ab6>
80005252:	2f 83       	sub	r3,-8
80005254:	c0 b8       	rjmp	8000526a <_vfprintf_r+0x1aca>
80005256:	fa ca f9 78 	sub	r10,sp,-1672
8000525a:	02 9b       	mov	r11,r1
8000525c:	08 9c       	mov	r12,r4
8000525e:	fe b0 f2 93 	rcall	80003784 <__sprint_r>
80005262:	e0 81 02 1e 	brne	8000569e <_vfprintf_r+0x1efe>
80005266:	fa c3 f9 e0 	sub	r3,sp,-1568
8000526a:	21 02       	sub	r2,16
8000526c:	c0 38       	rjmp	80005272 <_vfprintf_r+0x1ad2>
8000526e:	fe c0 bf e2 	sub	r0,pc,-16414
80005272:	fa f9 06 90 	ld.w	r9,sp[1680]
80005276:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000527a:	fe ca bf ee 	sub	r10,pc,-16402
8000527e:	59 02       	cp.w	r2,16
80005280:	fe 99 ff dd 	brgt	8000523a <_vfprintf_r+0x1a9a>
80005284:	04 09       	add	r9,r2
80005286:	2f f8       	sub	r8,-1
80005288:	87 0a       	st.w	r3[0x0],r10
8000528a:	fb 49 06 90 	st.w	sp[1680],r9
8000528e:	87 12       	st.w	r3[0x4],r2
80005290:	fb 48 06 8c 	st.w	sp[1676],r8
80005294:	58 78       	cp.w	r8,7
80005296:	e0 89 00 04 	brgt	8000529e <_vfprintf_r+0x1afe>
8000529a:	2f 83       	sub	r3,-8
8000529c:	c0 b8       	rjmp	800052b2 <_vfprintf_r+0x1b12>
8000529e:	fa ca f9 78 	sub	r10,sp,-1672
800052a2:	02 9b       	mov	r11,r1
800052a4:	08 9c       	mov	r12,r4
800052a6:	fe b0 f2 6f 	rcall	80003784 <__sprint_r>
800052aa:	e0 81 01 fa 	brne	8000569e <_vfprintf_r+0x1efe>
800052ae:	fa c3 f9 e0 	sub	r3,sp,-1568
800052b2:	40 6c       	lddsp	r12,sp[0x18]
800052b4:	fa f8 06 90 	ld.w	r8,sp[1680]
800052b8:	87 06       	st.w	r3[0x0],r6
800052ba:	87 1c       	st.w	r3[0x4],r12
800052bc:	18 08       	add	r8,r12
800052be:	cb 98       	rjmp	80005430 <_vfprintf_r+0x1c90>
800052c0:	fa f9 06 90 	ld.w	r9,sp[1680]
800052c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800052c8:	40 6b       	lddsp	r11,sp[0x18]
800052ca:	16 3a       	cp.w	r10,r11
800052cc:	c6 f5       	brlt	800053aa <_vfprintf_r+0x1c0a>
800052ce:	16 09       	add	r9,r11
800052d0:	2f f8       	sub	r8,-1
800052d2:	87 06       	st.w	r3[0x0],r6
800052d4:	fb 49 06 90 	st.w	sp[1680],r9
800052d8:	87 1b       	st.w	r3[0x4],r11
800052da:	fb 48 06 8c 	st.w	sp[1676],r8
800052de:	58 78       	cp.w	r8,7
800052e0:	e0 89 00 04 	brgt	800052e8 <_vfprintf_r+0x1b48>
800052e4:	2f 83       	sub	r3,-8
800052e6:	c0 b8       	rjmp	800052fc <_vfprintf_r+0x1b5c>
800052e8:	fa ca f9 78 	sub	r10,sp,-1672
800052ec:	02 9b       	mov	r11,r1
800052ee:	08 9c       	mov	r12,r4
800052f0:	fe b0 f2 4a 	rcall	80003784 <__sprint_r>
800052f4:	e0 81 01 d5 	brne	8000569e <_vfprintf_r+0x1efe>
800052f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800052fc:	fa f6 06 ac 	ld.w	r6,sp[1708]
80005300:	40 6a       	lddsp	r10,sp[0x18]
80005302:	14 16       	sub	r6,r10
80005304:	58 06       	cp.w	r6,0
80005306:	e0 89 00 1c 	brgt	8000533e <_vfprintf_r+0x1b9e>
8000530a:	c3 d8       	rjmp	80005384 <_vfprintf_r+0x1be4>
8000530c:	2f 09       	sub	r9,-16
8000530e:	2f f8       	sub	r8,-1
80005310:	fb 49 06 90 	st.w	sp[1680],r9
80005314:	87 02       	st.w	r3[0x0],r2
80005316:	87 10       	st.w	r3[0x4],r0
80005318:	fb 48 06 8c 	st.w	sp[1676],r8
8000531c:	58 78       	cp.w	r8,7
8000531e:	e0 89 00 04 	brgt	80005326 <_vfprintf_r+0x1b86>
80005322:	2f 83       	sub	r3,-8
80005324:	c0 b8       	rjmp	8000533a <_vfprintf_r+0x1b9a>
80005326:	fa ca f9 78 	sub	r10,sp,-1672
8000532a:	02 9b       	mov	r11,r1
8000532c:	08 9c       	mov	r12,r4
8000532e:	fe b0 f2 2b 	rcall	80003784 <__sprint_r>
80005332:	e0 81 01 b6 	brne	8000569e <_vfprintf_r+0x1efe>
80005336:	fa c3 f9 e0 	sub	r3,sp,-1568
8000533a:	21 06       	sub	r6,16
8000533c:	c0 48       	rjmp	80005344 <_vfprintf_r+0x1ba4>
8000533e:	fe c2 c0 b2 	sub	r2,pc,-16206
80005342:	31 00       	mov	r0,16
80005344:	fa f9 06 90 	ld.w	r9,sp[1680]
80005348:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000534c:	fe ca c0 c0 	sub	r10,pc,-16192
80005350:	59 06       	cp.w	r6,16
80005352:	fe 99 ff dd 	brgt	8000530c <_vfprintf_r+0x1b6c>
80005356:	0c 09       	add	r9,r6
80005358:	2f f8       	sub	r8,-1
8000535a:	87 0a       	st.w	r3[0x0],r10
8000535c:	fb 49 06 90 	st.w	sp[1680],r9
80005360:	87 16       	st.w	r3[0x4],r6
80005362:	fb 48 06 8c 	st.w	sp[1676],r8
80005366:	58 78       	cp.w	r8,7
80005368:	e0 89 00 04 	brgt	80005370 <_vfprintf_r+0x1bd0>
8000536c:	2f 83       	sub	r3,-8
8000536e:	c0 b8       	rjmp	80005384 <_vfprintf_r+0x1be4>
80005370:	fa ca f9 78 	sub	r10,sp,-1672
80005374:	02 9b       	mov	r11,r1
80005376:	08 9c       	mov	r12,r4
80005378:	fe b0 f2 06 	rcall	80003784 <__sprint_r>
8000537c:	e0 81 01 91 	brne	8000569e <_vfprintf_r+0x1efe>
80005380:	fa c3 f9 e0 	sub	r3,sp,-1568
80005384:	ed b5 00 00 	bld	r5,0x0
80005388:	e0 81 01 20 	brne	800055c8 <_vfprintf_r+0x1e28>
8000538c:	40 c9       	lddsp	r9,sp[0x30]
8000538e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005392:	2f f8       	sub	r8,-1
80005394:	87 09       	st.w	r3[0x0],r9
80005396:	fb 48 06 90 	st.w	sp[1680],r8
8000539a:	30 19       	mov	r9,1
8000539c:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053a0:	87 19       	st.w	r3[0x4],r9
800053a2:	2f f8       	sub	r8,-1
800053a4:	fb 48 06 8c 	st.w	sp[1676],r8
800053a8:	c0 29       	rjmp	800055ac <_vfprintf_r+0x1e0c>
800053aa:	14 09       	add	r9,r10
800053ac:	2f f8       	sub	r8,-1
800053ae:	fb 49 06 90 	st.w	sp[1680],r9
800053b2:	87 06       	st.w	r3[0x0],r6
800053b4:	87 1a       	st.w	r3[0x4],r10
800053b6:	fb 48 06 8c 	st.w	sp[1676],r8
800053ba:	58 78       	cp.w	r8,7
800053bc:	e0 89 00 04 	brgt	800053c4 <_vfprintf_r+0x1c24>
800053c0:	2f 83       	sub	r3,-8
800053c2:	c0 b8       	rjmp	800053d8 <_vfprintf_r+0x1c38>
800053c4:	fa ca f9 78 	sub	r10,sp,-1672
800053c8:	02 9b       	mov	r11,r1
800053ca:	08 9c       	mov	r12,r4
800053cc:	fe b0 f1 dc 	rcall	80003784 <__sprint_r>
800053d0:	e0 81 01 67 	brne	8000569e <_vfprintf_r+0x1efe>
800053d4:	fa c3 f9 e0 	sub	r3,sp,-1568
800053d8:	40 c8       	lddsp	r8,sp[0x30]
800053da:	87 08       	st.w	r3[0x0],r8
800053dc:	fa f8 06 90 	ld.w	r8,sp[1680]
800053e0:	2f f8       	sub	r8,-1
800053e2:	30 19       	mov	r9,1
800053e4:	fb 48 06 90 	st.w	sp[1680],r8
800053e8:	87 19       	st.w	r3[0x4],r9
800053ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
800053ee:	2f f8       	sub	r8,-1
800053f0:	fb 48 06 8c 	st.w	sp[1676],r8
800053f4:	fa f2 06 ac 	ld.w	r2,sp[1708]
800053f8:	58 78       	cp.w	r8,7
800053fa:	e0 89 00 04 	brgt	80005402 <_vfprintf_r+0x1c62>
800053fe:	2f 83       	sub	r3,-8
80005400:	c0 b8       	rjmp	80005416 <_vfprintf_r+0x1c76>
80005402:	fa ca f9 78 	sub	r10,sp,-1672
80005406:	02 9b       	mov	r11,r1
80005408:	08 9c       	mov	r12,r4
8000540a:	fe b0 f1 bd 	rcall	80003784 <__sprint_r>
8000540e:	e0 81 01 48 	brne	8000569e <_vfprintf_r+0x1efe>
80005412:	fa c3 f9 e0 	sub	r3,sp,-1568
80005416:	04 06       	add	r6,r2
80005418:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000541c:	87 06       	st.w	r3[0x0],r6
8000541e:	fa f9 06 90 	ld.w	r9,sp[1680]
80005422:	40 66       	lddsp	r6,sp[0x18]
80005424:	40 6e       	lddsp	lr,sp[0x18]
80005426:	10 16       	sub	r6,r8
80005428:	f2 08 01 08 	sub	r8,r9,r8
8000542c:	87 16       	st.w	r3[0x4],r6
8000542e:	1c 08       	add	r8,lr
80005430:	fb 48 06 90 	st.w	sp[1680],r8
80005434:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005438:	2f f8       	sub	r8,-1
8000543a:	fb 48 06 8c 	st.w	sp[1676],r8
8000543e:	cb 78       	rjmp	800055ac <_vfprintf_r+0x1e0c>
80005440:	40 6c       	lddsp	r12,sp[0x18]
80005442:	58 1c       	cp.w	r12,1
80005444:	e0 89 00 06 	brgt	80005450 <_vfprintf_r+0x1cb0>
80005448:	ed b5 00 00 	bld	r5,0x0
8000544c:	e0 81 00 85 	brne	80005556 <_vfprintf_r+0x1db6>
80005450:	fa f8 06 90 	ld.w	r8,sp[1680]
80005454:	2f f8       	sub	r8,-1
80005456:	30 19       	mov	r9,1
80005458:	fb 48 06 90 	st.w	sp[1680],r8
8000545c:	87 06       	st.w	r3[0x0],r6
8000545e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005462:	87 19       	st.w	r3[0x4],r9
80005464:	2f f8       	sub	r8,-1
80005466:	fb 48 06 8c 	st.w	sp[1676],r8
8000546a:	58 78       	cp.w	r8,7
8000546c:	e0 89 00 04 	brgt	80005474 <_vfprintf_r+0x1cd4>
80005470:	2f 83       	sub	r3,-8
80005472:	c0 b8       	rjmp	80005488 <_vfprintf_r+0x1ce8>
80005474:	fa ca f9 78 	sub	r10,sp,-1672
80005478:	02 9b       	mov	r11,r1
8000547a:	08 9c       	mov	r12,r4
8000547c:	fe b0 f1 84 	rcall	80003784 <__sprint_r>
80005480:	e0 81 01 0f 	brne	8000569e <_vfprintf_r+0x1efe>
80005484:	fa c3 f9 e0 	sub	r3,sp,-1568
80005488:	fa f8 06 90 	ld.w	r8,sp[1680]
8000548c:	2f f8       	sub	r8,-1
8000548e:	40 cb       	lddsp	r11,sp[0x30]
80005490:	fb 48 06 90 	st.w	sp[1680],r8
80005494:	30 19       	mov	r9,1
80005496:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000549a:	87 0b       	st.w	r3[0x0],r11
8000549c:	2f f8       	sub	r8,-1
8000549e:	87 19       	st.w	r3[0x4],r9
800054a0:	fb 48 06 8c 	st.w	sp[1676],r8
800054a4:	58 78       	cp.w	r8,7
800054a6:	e0 89 00 05 	brgt	800054b0 <_vfprintf_r+0x1d10>
800054aa:	2f 83       	sub	r3,-8
800054ac:	c0 c8       	rjmp	800054c4 <_vfprintf_r+0x1d24>
800054ae:	d7 03       	nop
800054b0:	fa ca f9 78 	sub	r10,sp,-1672
800054b4:	02 9b       	mov	r11,r1
800054b6:	08 9c       	mov	r12,r4
800054b8:	fe b0 f1 66 	rcall	80003784 <__sprint_r>
800054bc:	e0 81 00 f1 	brne	8000569e <_vfprintf_r+0x1efe>
800054c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800054c4:	30 08       	mov	r8,0
800054c6:	30 09       	mov	r9,0
800054c8:	40 5b       	lddsp	r11,sp[0x14]
800054ca:	40 7a       	lddsp	r10,sp[0x1c]
800054cc:	e0 a0 17 3d 	rcall	80008346 <__avr32_f64_cmp_eq>
800054d0:	40 68       	lddsp	r8,sp[0x18]
800054d2:	20 18       	sub	r8,1
800054d4:	58 0c       	cp.w	r12,0
800054d6:	c0 d1       	brne	800054f0 <_vfprintf_r+0x1d50>
800054d8:	2f f6       	sub	r6,-1
800054da:	87 18       	st.w	r3[0x4],r8
800054dc:	87 06       	st.w	r3[0x0],r6
800054de:	fa f6 06 90 	ld.w	r6,sp[1680]
800054e2:	10 06       	add	r6,r8
800054e4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800054e8:	fb 46 06 90 	st.w	sp[1680],r6
800054ec:	2f f8       	sub	r8,-1
800054ee:	c3 18       	rjmp	80005550 <_vfprintf_r+0x1db0>
800054f0:	10 96       	mov	r6,r8
800054f2:	58 08       	cp.w	r8,0
800054f4:	e0 89 00 1c 	brgt	8000552c <_vfprintf_r+0x1d8c>
800054f8:	c4 b8       	rjmp	8000558e <_vfprintf_r+0x1dee>
800054fa:	2f 09       	sub	r9,-16
800054fc:	2f f8       	sub	r8,-1
800054fe:	fb 49 06 90 	st.w	sp[1680],r9
80005502:	87 02       	st.w	r3[0x0],r2
80005504:	87 10       	st.w	r3[0x4],r0
80005506:	fb 48 06 8c 	st.w	sp[1676],r8
8000550a:	58 78       	cp.w	r8,7
8000550c:	e0 89 00 04 	brgt	80005514 <_vfprintf_r+0x1d74>
80005510:	2f 83       	sub	r3,-8
80005512:	c0 b8       	rjmp	80005528 <_vfprintf_r+0x1d88>
80005514:	fa ca f9 78 	sub	r10,sp,-1672
80005518:	02 9b       	mov	r11,r1
8000551a:	08 9c       	mov	r12,r4
8000551c:	fe b0 f1 34 	rcall	80003784 <__sprint_r>
80005520:	e0 81 00 bf 	brne	8000569e <_vfprintf_r+0x1efe>
80005524:	fa c3 f9 e0 	sub	r3,sp,-1568
80005528:	21 06       	sub	r6,16
8000552a:	c0 48       	rjmp	80005532 <_vfprintf_r+0x1d92>
8000552c:	fe c2 c2 a0 	sub	r2,pc,-15712
80005530:	31 00       	mov	r0,16
80005532:	fa f9 06 90 	ld.w	r9,sp[1680]
80005536:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000553a:	fe ca c2 ae 	sub	r10,pc,-15698
8000553e:	59 06       	cp.w	r6,16
80005540:	fe 99 ff dd 	brgt	800054fa <_vfprintf_r+0x1d5a>
80005544:	0c 09       	add	r9,r6
80005546:	87 0a       	st.w	r3[0x0],r10
80005548:	fb 49 06 90 	st.w	sp[1680],r9
8000554c:	2f f8       	sub	r8,-1
8000554e:	87 16       	st.w	r3[0x4],r6
80005550:	fb 48 06 8c 	st.w	sp[1676],r8
80005554:	c0 e8       	rjmp	80005570 <_vfprintf_r+0x1dd0>
80005556:	fa f8 06 90 	ld.w	r8,sp[1680]
8000555a:	2f f8       	sub	r8,-1
8000555c:	30 19       	mov	r9,1
8000555e:	fb 48 06 90 	st.w	sp[1680],r8
80005562:	87 06       	st.w	r3[0x0],r6
80005564:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005568:	87 19       	st.w	r3[0x4],r9
8000556a:	2f f8       	sub	r8,-1
8000556c:	fb 48 06 8c 	st.w	sp[1676],r8
80005570:	58 78       	cp.w	r8,7
80005572:	e0 89 00 04 	brgt	8000557a <_vfprintf_r+0x1dda>
80005576:	2f 83       	sub	r3,-8
80005578:	c0 b8       	rjmp	8000558e <_vfprintf_r+0x1dee>
8000557a:	fa ca f9 78 	sub	r10,sp,-1672
8000557e:	02 9b       	mov	r11,r1
80005580:	08 9c       	mov	r12,r4
80005582:	fe b0 f1 01 	rcall	80003784 <__sprint_r>
80005586:	e0 81 00 8c 	brne	8000569e <_vfprintf_r+0x1efe>
8000558a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000558e:	40 ea       	lddsp	r10,sp[0x38]
80005590:	fa f8 06 90 	ld.w	r8,sp[1680]
80005594:	14 08       	add	r8,r10
80005596:	fa c9 f9 64 	sub	r9,sp,-1692
8000559a:	fb 48 06 90 	st.w	sp[1680],r8
8000559e:	87 1a       	st.w	r3[0x4],r10
800055a0:	fa f8 06 8c 	ld.w	r8,sp[1676]
800055a4:	87 09       	st.w	r3[0x0],r9
800055a6:	2f f8       	sub	r8,-1
800055a8:	fb 48 06 8c 	st.w	sp[1676],r8
800055ac:	58 78       	cp.w	r8,7
800055ae:	e0 89 00 04 	brgt	800055b6 <_vfprintf_r+0x1e16>
800055b2:	2f 83       	sub	r3,-8
800055b4:	c0 a8       	rjmp	800055c8 <_vfprintf_r+0x1e28>
800055b6:	fa ca f9 78 	sub	r10,sp,-1672
800055ba:	02 9b       	mov	r11,r1
800055bc:	08 9c       	mov	r12,r4
800055be:	fe b0 f0 e3 	rcall	80003784 <__sprint_r>
800055c2:	c6 e1       	brne	8000569e <_vfprintf_r+0x1efe>
800055c4:	fa c3 f9 e0 	sub	r3,sp,-1568
800055c8:	e2 15 00 04 	andl	r5,0x4,COH
800055cc:	c3 f0       	breq	8000564a <_vfprintf_r+0x1eaa>
800055ce:	40 86       	lddsp	r6,sp[0x20]
800055d0:	40 39       	lddsp	r9,sp[0xc]
800055d2:	12 16       	sub	r6,r9
800055d4:	58 06       	cp.w	r6,0
800055d6:	e0 89 00 1a 	brgt	8000560a <_vfprintf_r+0x1e6a>
800055da:	c3 88       	rjmp	8000564a <_vfprintf_r+0x1eaa>
800055dc:	2f 09       	sub	r9,-16
800055de:	2f f8       	sub	r8,-1
800055e0:	fb 49 06 90 	st.w	sp[1680],r9
800055e4:	87 05       	st.w	r3[0x0],r5
800055e6:	87 12       	st.w	r3[0x4],r2
800055e8:	fb 48 06 8c 	st.w	sp[1676],r8
800055ec:	58 78       	cp.w	r8,7
800055ee:	e0 89 00 04 	brgt	800055f6 <_vfprintf_r+0x1e56>
800055f2:	2f 83       	sub	r3,-8
800055f4:	c0 98       	rjmp	80005606 <_vfprintf_r+0x1e66>
800055f6:	00 9a       	mov	r10,r0
800055f8:	02 9b       	mov	r11,r1
800055fa:	08 9c       	mov	r12,r4
800055fc:	fe b0 f0 c4 	rcall	80003784 <__sprint_r>
80005600:	c4 f1       	brne	8000569e <_vfprintf_r+0x1efe>
80005602:	fa c3 f9 e0 	sub	r3,sp,-1568
80005606:	21 06       	sub	r6,16
80005608:	c0 68       	rjmp	80005614 <_vfprintf_r+0x1e74>
8000560a:	fe c5 c3 8e 	sub	r5,pc,-15474
8000560e:	31 02       	mov	r2,16
80005610:	fa c0 f9 78 	sub	r0,sp,-1672
80005614:	fa f9 06 90 	ld.w	r9,sp[1680]
80005618:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000561c:	fe ca c3 a0 	sub	r10,pc,-15456
80005620:	59 06       	cp.w	r6,16
80005622:	fe 99 ff dd 	brgt	800055dc <_vfprintf_r+0x1e3c>
80005626:	0c 09       	add	r9,r6
80005628:	2f f8       	sub	r8,-1
8000562a:	87 0a       	st.w	r3[0x0],r10
8000562c:	87 16       	st.w	r3[0x4],r6
8000562e:	fb 49 06 90 	st.w	sp[1680],r9
80005632:	fb 48 06 8c 	st.w	sp[1676],r8
80005636:	58 78       	cp.w	r8,7
80005638:	e0 8a 00 09 	brle	8000564a <_vfprintf_r+0x1eaa>
8000563c:	fa ca f9 78 	sub	r10,sp,-1672
80005640:	02 9b       	mov	r11,r1
80005642:	08 9c       	mov	r12,r4
80005644:	fe b0 f0 a0 	rcall	80003784 <__sprint_r>
80005648:	c2 b1       	brne	8000569e <_vfprintf_r+0x1efe>
8000564a:	40 bc       	lddsp	r12,sp[0x2c]
8000564c:	40 36       	lddsp	r6,sp[0xc]
8000564e:	40 8e       	lddsp	lr,sp[0x20]
80005650:	ec 0e 0c 48 	max	r8,r6,lr
80005654:	10 0c       	add	r12,r8
80005656:	50 bc       	stdsp	sp[0x2c],r12
80005658:	fa f8 06 90 	ld.w	r8,sp[1680]
8000565c:	58 08       	cp.w	r8,0
8000565e:	c0 80       	breq	8000566e <_vfprintf_r+0x1ece>
80005660:	fa ca f9 78 	sub	r10,sp,-1672
80005664:	02 9b       	mov	r11,r1
80005666:	08 9c       	mov	r12,r4
80005668:	fe b0 f0 8e 	rcall	80003784 <__sprint_r>
8000566c:	c1 91       	brne	8000569e <_vfprintf_r+0x1efe>
8000566e:	30 0b       	mov	r11,0
80005670:	fa c3 f9 e0 	sub	r3,sp,-1568
80005674:	fb 4b 06 8c 	st.w	sp[1676],r11
80005678:	fe 9f f1 22 	bral	800038bc <_vfprintf_r+0x11c>
8000567c:	08 95       	mov	r5,r4
8000567e:	fa f8 06 90 	ld.w	r8,sp[1680]
80005682:	58 08       	cp.w	r8,0
80005684:	c0 80       	breq	80005694 <_vfprintf_r+0x1ef4>
80005686:	08 9c       	mov	r12,r4
80005688:	fa ca f9 78 	sub	r10,sp,-1672
8000568c:	02 9b       	mov	r11,r1
8000568e:	fe b0 f0 7b 	rcall	80003784 <__sprint_r>
80005692:	c0 61       	brne	8000569e <_vfprintf_r+0x1efe>
80005694:	30 08       	mov	r8,0
80005696:	fb 48 06 8c 	st.w	sp[1676],r8
8000569a:	c0 28       	rjmp	8000569e <_vfprintf_r+0x1efe>
8000569c:	40 41       	lddsp	r1,sp[0x10]
8000569e:	82 68       	ld.sh	r8,r1[0xc]
800056a0:	ed b8 00 06 	bld	r8,0x6
800056a4:	c0 31       	brne	800056aa <_vfprintf_r+0x1f0a>
800056a6:	3f fa       	mov	r10,-1
800056a8:	50 ba       	stdsp	sp[0x2c],r10
800056aa:	40 bc       	lddsp	r12,sp[0x2c]
800056ac:	fe 3d f9 44 	sub	sp,-1724
800056b0:	d8 32       	popm	r0-r7,pc
800056b2:	d7 03       	nop

800056b4 <__swsetup_r>:
800056b4:	d4 21       	pushm	r4-r7,lr
800056b6:	e0 68 01 00 	mov	r8,256
800056ba:	18 96       	mov	r6,r12
800056bc:	16 97       	mov	r7,r11
800056be:	70 0c       	ld.w	r12,r8[0x0]
800056c0:	58 0c       	cp.w	r12,0
800056c2:	c0 60       	breq	800056ce <__swsetup_r+0x1a>
800056c4:	78 68       	ld.w	r8,r12[0x18]
800056c6:	58 08       	cp.w	r8,0
800056c8:	c0 31       	brne	800056ce <__swsetup_r+0x1a>
800056ca:	e0 a0 07 b9 	rcall	8000663c <__sinit>
800056ce:	fe c8 c3 22 	sub	r8,pc,-15582
800056d2:	10 37       	cp.w	r7,r8
800056d4:	c0 61       	brne	800056e0 <__swsetup_r+0x2c>
800056d6:	e0 68 01 00 	mov	r8,256
800056da:	70 08       	ld.w	r8,r8[0x0]
800056dc:	70 07       	ld.w	r7,r8[0x0]
800056de:	c1 28       	rjmp	80005702 <__swsetup_r+0x4e>
800056e0:	fe c8 c3 14 	sub	r8,pc,-15596
800056e4:	10 37       	cp.w	r7,r8
800056e6:	c0 61       	brne	800056f2 <__swsetup_r+0x3e>
800056e8:	e0 68 01 00 	mov	r8,256
800056ec:	70 08       	ld.w	r8,r8[0x0]
800056ee:	70 17       	ld.w	r7,r8[0x4]
800056f0:	c0 98       	rjmp	80005702 <__swsetup_r+0x4e>
800056f2:	fe c8 c3 06 	sub	r8,pc,-15610
800056f6:	10 37       	cp.w	r7,r8
800056f8:	c0 51       	brne	80005702 <__swsetup_r+0x4e>
800056fa:	e0 68 01 00 	mov	r8,256
800056fe:	70 08       	ld.w	r8,r8[0x0]
80005700:	70 27       	ld.w	r7,r8[0x8]
80005702:	8e 68       	ld.sh	r8,r7[0xc]
80005704:	ed b8 00 03 	bld	r8,0x3
80005708:	c1 e0       	breq	80005744 <__swsetup_r+0x90>
8000570a:	ed b8 00 04 	bld	r8,0x4
8000570e:	c3 e1       	brne	8000578a <__swsetup_r+0xd6>
80005710:	ed b8 00 02 	bld	r8,0x2
80005714:	c1 51       	brne	8000573e <__swsetup_r+0x8a>
80005716:	6e db       	ld.w	r11,r7[0x34]
80005718:	58 0b       	cp.w	r11,0
8000571a:	c0 a0       	breq	8000572e <__swsetup_r+0x7a>
8000571c:	ee c8 ff bc 	sub	r8,r7,-68
80005720:	10 3b       	cp.w	r11,r8
80005722:	c0 40       	breq	8000572a <__swsetup_r+0x76>
80005724:	0c 9c       	mov	r12,r6
80005726:	e0 a0 08 25 	rcall	80006770 <_free_r>
8000572a:	30 08       	mov	r8,0
8000572c:	8f d8       	st.w	r7[0x34],r8
8000572e:	8e 68       	ld.sh	r8,r7[0xc]
80005730:	e0 18 ff db 	andl	r8,0xffdb
80005734:	ae 68       	st.h	r7[0xc],r8
80005736:	30 08       	mov	r8,0
80005738:	8f 18       	st.w	r7[0x4],r8
8000573a:	6e 48       	ld.w	r8,r7[0x10]
8000573c:	8f 08       	st.w	r7[0x0],r8
8000573e:	8e 68       	ld.sh	r8,r7[0xc]
80005740:	a3 b8       	sbr	r8,0x3
80005742:	ae 68       	st.h	r7[0xc],r8
80005744:	6e 48       	ld.w	r8,r7[0x10]
80005746:	58 08       	cp.w	r8,0
80005748:	c0 b1       	brne	8000575e <__swsetup_r+0xaa>
8000574a:	8e 68       	ld.sh	r8,r7[0xc]
8000574c:	e2 18 02 80 	andl	r8,0x280,COH
80005750:	e0 48 02 00 	cp.w	r8,512
80005754:	c0 50       	breq	8000575e <__swsetup_r+0xaa>
80005756:	0c 9c       	mov	r12,r6
80005758:	0e 9b       	mov	r11,r7
8000575a:	e0 a0 0a 4b 	rcall	80006bf0 <__smakebuf_r>
8000575e:	8e 69       	ld.sh	r9,r7[0xc]
80005760:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80005764:	c0 70       	breq	80005772 <__swsetup_r+0xbe>
80005766:	30 08       	mov	r8,0
80005768:	8f 28       	st.w	r7[0x8],r8
8000576a:	6e 58       	ld.w	r8,r7[0x14]
8000576c:	5c 38       	neg	r8
8000576e:	8f 68       	st.w	r7[0x18],r8
80005770:	c0 68       	rjmp	8000577c <__swsetup_r+0xc8>
80005772:	ed b9 00 01 	bld	r9,0x1
80005776:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000577a:	8f 28       	st.w	r7[0x8],r8
8000577c:	6e 48       	ld.w	r8,r7[0x10]
8000577e:	58 08       	cp.w	r8,0
80005780:	c0 61       	brne	8000578c <__swsetup_r+0xd8>
80005782:	8e 68       	ld.sh	r8,r7[0xc]
80005784:	ed b8 00 07 	bld	r8,0x7
80005788:	c0 21       	brne	8000578c <__swsetup_r+0xd8>
8000578a:	dc 2a       	popm	r4-r7,pc,r12=-1
8000578c:	d8 2a       	popm	r4-r7,pc,r12=0
8000578e:	d7 03       	nop

80005790 <quorem>:
80005790:	d4 31       	pushm	r0-r7,lr
80005792:	20 2d       	sub	sp,8
80005794:	18 97       	mov	r7,r12
80005796:	78 48       	ld.w	r8,r12[0x10]
80005798:	76 46       	ld.w	r6,r11[0x10]
8000579a:	0c 38       	cp.w	r8,r6
8000579c:	c0 34       	brge	800057a2 <quorem+0x12>
8000579e:	30 0c       	mov	r12,0
800057a0:	c8 58       	rjmp	800058aa <quorem+0x11a>
800057a2:	ec c2 ff fc 	sub	r2,r6,-4
800057a6:	f6 c3 ff ec 	sub	r3,r11,-20
800057aa:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
800057ae:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
800057b2:	2f f9       	sub	r9,-1
800057b4:	20 16       	sub	r6,1
800057b6:	f8 09 0d 08 	divu	r8,r12,r9
800057ba:	f6 02 00 22 	add	r2,r11,r2<<0x2
800057be:	ee c4 ff ec 	sub	r4,r7,-20
800057c2:	10 95       	mov	r5,r8
800057c4:	58 08       	cp.w	r8,0
800057c6:	c4 10       	breq	80005848 <quorem+0xb8>
800057c8:	30 09       	mov	r9,0
800057ca:	06 9a       	mov	r10,r3
800057cc:	08 98       	mov	r8,r4
800057ce:	12 91       	mov	r1,r9
800057d0:	50 0b       	stdsp	sp[0x0],r11
800057d2:	70 0e       	ld.w	lr,r8[0x0]
800057d4:	b1 8e       	lsr	lr,0x10
800057d6:	50 1e       	stdsp	sp[0x4],lr
800057d8:	15 0e       	ld.w	lr,r10++
800057da:	fc 00 16 10 	lsr	r0,lr,0x10
800057de:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800057e2:	ea 0e 03 41 	mac	r1,r5,lr
800057e6:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
800057ea:	b1 81       	lsr	r1,0x10
800057ec:	40 1b       	lddsp	r11,sp[0x4]
800057ee:	ea 00 02 40 	mul	r0,r5,r0
800057f2:	e2 00 00 00 	add	r0,r1,r0
800057f6:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
800057fa:	02 1b       	sub	r11,r1
800057fc:	50 1b       	stdsp	sp[0x4],r11
800057fe:	70 0b       	ld.w	r11,r8[0x0]
80005800:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80005804:	02 09       	add	r9,r1
80005806:	f2 0e 01 0e 	sub	lr,r9,lr
8000580a:	b0 1e       	st.h	r8[0x2],lr
8000580c:	fc 09 14 10 	asr	r9,lr,0x10
80005810:	40 1e       	lddsp	lr,sp[0x4]
80005812:	fc 09 00 09 	add	r9,lr,r9
80005816:	b0 09       	st.h	r8[0x0],r9
80005818:	e0 01 16 10 	lsr	r1,r0,0x10
8000581c:	2f c8       	sub	r8,-4
8000581e:	b1 49       	asr	r9,0x10
80005820:	04 3a       	cp.w	r10,r2
80005822:	fe 98 ff d8 	brls	800057d2 <quorem+0x42>
80005826:	40 0b       	lddsp	r11,sp[0x0]
80005828:	58 0c       	cp.w	r12,0
8000582a:	c0 f1       	brne	80005848 <quorem+0xb8>
8000582c:	ec c8 ff fb 	sub	r8,r6,-5
80005830:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005834:	c0 28       	rjmp	80005838 <quorem+0xa8>
80005836:	20 16       	sub	r6,1
80005838:	20 48       	sub	r8,4
8000583a:	08 38       	cp.w	r8,r4
8000583c:	e0 88 00 05 	brls	80005846 <quorem+0xb6>
80005840:	70 09       	ld.w	r9,r8[0x0]
80005842:	58 09       	cp.w	r9,0
80005844:	cf 90       	breq	80005836 <quorem+0xa6>
80005846:	8f 46       	st.w	r7[0x10],r6
80005848:	0e 9c       	mov	r12,r7
8000584a:	e0 a0 0c fb 	rcall	80007240 <__mcmp>
8000584e:	c2 d5       	brlt	800058a8 <quorem+0x118>
80005850:	2f f5       	sub	r5,-1
80005852:	08 98       	mov	r8,r4
80005854:	30 09       	mov	r9,0
80005856:	07 0b       	ld.w	r11,r3++
80005858:	f6 0a 16 10 	lsr	r10,r11,0x10
8000585c:	70 0c       	ld.w	r12,r8[0x0]
8000585e:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80005862:	f8 0e 16 10 	lsr	lr,r12,0x10
80005866:	14 1e       	sub	lr,r10
80005868:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000586c:	16 1a       	sub	r10,r11
8000586e:	12 0a       	add	r10,r9
80005870:	b0 1a       	st.h	r8[0x2],r10
80005872:	b1 4a       	asr	r10,0x10
80005874:	fc 0a 00 09 	add	r9,lr,r10
80005878:	b0 09       	st.h	r8[0x0],r9
8000587a:	2f c8       	sub	r8,-4
8000587c:	b1 49       	asr	r9,0x10
8000587e:	04 33       	cp.w	r3,r2
80005880:	fe 98 ff eb 	brls	80005856 <quorem+0xc6>
80005884:	ec c8 ff fb 	sub	r8,r6,-5
80005888:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000588c:	58 09       	cp.w	r9,0
8000588e:	c0 d1       	brne	800058a8 <quorem+0x118>
80005890:	ee 08 00 28 	add	r8,r7,r8<<0x2
80005894:	c0 28       	rjmp	80005898 <quorem+0x108>
80005896:	20 16       	sub	r6,1
80005898:	20 48       	sub	r8,4
8000589a:	08 38       	cp.w	r8,r4
8000589c:	e0 88 00 05 	brls	800058a6 <quorem+0x116>
800058a0:	70 09       	ld.w	r9,r8[0x0]
800058a2:	58 09       	cp.w	r9,0
800058a4:	cf 90       	breq	80005896 <quorem+0x106>
800058a6:	8f 46       	st.w	r7[0x10],r6
800058a8:	0a 9c       	mov	r12,r5
800058aa:	2f ed       	sub	sp,-8
800058ac:	d8 32       	popm	r0-r7,pc
800058ae:	d7 03       	nop

800058b0 <_dtoa_r>:
800058b0:	d4 31       	pushm	r0-r7,lr
800058b2:	21 ad       	sub	sp,104
800058b4:	fa c4 ff 74 	sub	r4,sp,-140
800058b8:	18 97       	mov	r7,r12
800058ba:	16 95       	mov	r5,r11
800058bc:	68 2c       	ld.w	r12,r4[0x8]
800058be:	50 c9       	stdsp	sp[0x30],r9
800058c0:	68 16       	ld.w	r6,r4[0x4]
800058c2:	68 09       	ld.w	r9,r4[0x0]
800058c4:	50 e8       	stdsp	sp[0x38],r8
800058c6:	14 94       	mov	r4,r10
800058c8:	51 2c       	stdsp	sp[0x48],r12
800058ca:	fa e5 00 08 	st.d	sp[8],r4
800058ce:	51 59       	stdsp	sp[0x54],r9
800058d0:	6e 95       	ld.w	r5,r7[0x24]
800058d2:	58 05       	cp.w	r5,0
800058d4:	c0 91       	brne	800058e6 <_dtoa_r+0x36>
800058d6:	31 0c       	mov	r12,16
800058d8:	e0 a0 09 ea 	rcall	80006cac <malloc>
800058dc:	99 35       	st.w	r12[0xc],r5
800058de:	8f 9c       	st.w	r7[0x24],r12
800058e0:	99 15       	st.w	r12[0x4],r5
800058e2:	99 25       	st.w	r12[0x8],r5
800058e4:	99 05       	st.w	r12[0x0],r5
800058e6:	6e 99       	ld.w	r9,r7[0x24]
800058e8:	72 08       	ld.w	r8,r9[0x0]
800058ea:	58 08       	cp.w	r8,0
800058ec:	c0 f0       	breq	8000590a <_dtoa_r+0x5a>
800058ee:	72 1a       	ld.w	r10,r9[0x4]
800058f0:	91 1a       	st.w	r8[0x4],r10
800058f2:	30 1a       	mov	r10,1
800058f4:	72 19       	ld.w	r9,r9[0x4]
800058f6:	f4 09 09 49 	lsl	r9,r10,r9
800058fa:	10 9b       	mov	r11,r8
800058fc:	91 29       	st.w	r8[0x8],r9
800058fe:	0e 9c       	mov	r12,r7
80005900:	e0 a0 0c ba 	rcall	80007274 <_Bfree>
80005904:	6e 98       	ld.w	r8,r7[0x24]
80005906:	30 09       	mov	r9,0
80005908:	91 09       	st.w	r8[0x0],r9
8000590a:	40 28       	lddsp	r8,sp[0x8]
8000590c:	10 94       	mov	r4,r8
8000590e:	58 08       	cp.w	r8,0
80005910:	c0 64       	brge	8000591c <_dtoa_r+0x6c>
80005912:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80005916:	50 28       	stdsp	sp[0x8],r8
80005918:	30 18       	mov	r8,1
8000591a:	c0 28       	rjmp	8000591e <_dtoa_r+0x6e>
8000591c:	30 08       	mov	r8,0
8000591e:	8d 08       	st.w	r6[0x0],r8
80005920:	fc 1c 7f f0 	movh	r12,0x7ff0
80005924:	40 26       	lddsp	r6,sp[0x8]
80005926:	0c 98       	mov	r8,r6
80005928:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000592c:	18 38       	cp.w	r8,r12
8000592e:	c2 01       	brne	8000596e <_dtoa_r+0xbe>
80005930:	e0 68 27 0f 	mov	r8,9999
80005934:	41 5b       	lddsp	r11,sp[0x54]
80005936:	97 08       	st.w	r11[0x0],r8
80005938:	40 3a       	lddsp	r10,sp[0xc]
8000593a:	58 0a       	cp.w	r10,0
8000593c:	c0 71       	brne	8000594a <_dtoa_r+0x9a>
8000593e:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80005942:	c0 41       	brne	8000594a <_dtoa_r+0x9a>
80005944:	fe cc c5 a8 	sub	r12,pc,-14936
80005948:	c0 38       	rjmp	8000594e <_dtoa_r+0x9e>
8000594a:	fe cc c5 a2 	sub	r12,pc,-14942
8000594e:	41 29       	lddsp	r9,sp[0x48]
80005950:	58 09       	cp.w	r9,0
80005952:	e0 80 05 9a 	breq	80006486 <_dtoa_r+0xbd6>
80005956:	f8 c8 ff fd 	sub	r8,r12,-3
8000595a:	f8 c9 ff f8 	sub	r9,r12,-8
8000595e:	11 8b       	ld.ub	r11,r8[0x0]
80005960:	30 0a       	mov	r10,0
80005962:	41 25       	lddsp	r5,sp[0x48]
80005964:	f4 0b 18 00 	cp.b	r11,r10
80005968:	f2 08 17 10 	movne	r8,r9
8000596c:	c1 68       	rjmp	80005998 <_dtoa_r+0xe8>
8000596e:	fa ea 00 08 	ld.d	r10,sp[8]
80005972:	30 08       	mov	r8,0
80005974:	fa eb 00 3c 	st.d	sp[60],r10
80005978:	30 09       	mov	r9,0
8000597a:	e0 a0 14 e6 	rcall	80008346 <__avr32_f64_cmp_eq>
8000597e:	c1 00       	breq	8000599e <_dtoa_r+0xee>
80005980:	30 18       	mov	r8,1
80005982:	41 5a       	lddsp	r10,sp[0x54]
80005984:	95 08       	st.w	r10[0x0],r8
80005986:	fe cc c7 0e 	sub	r12,pc,-14578
8000598a:	41 29       	lddsp	r9,sp[0x48]
8000598c:	f8 08 00 08 	add	r8,r12,r8
80005990:	58 09       	cp.w	r9,0
80005992:	e0 80 05 7a 	breq	80006486 <_dtoa_r+0xbd6>
80005996:	12 95       	mov	r5,r9
80005998:	8b 08       	st.w	r5[0x0],r8
8000599a:	e0 8f 05 76 	bral	80006486 <_dtoa_r+0xbd6>
8000599e:	fa c8 ff 9c 	sub	r8,sp,-100
800059a2:	fa c9 ff a0 	sub	r9,sp,-96
800059a6:	fa ea 00 3c 	ld.d	r10,sp[60]
800059aa:	0e 9c       	mov	r12,r7
800059ac:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
800059b0:	e0 a0 0c b4 	rcall	80007318 <__d2b>
800059b4:	18 93       	mov	r3,r12
800059b6:	58 05       	cp.w	r5,0
800059b8:	c0 d0       	breq	800059d2 <_dtoa_r+0x122>
800059ba:	fa ea 00 3c 	ld.d	r10,sp[60]
800059be:	30 04       	mov	r4,0
800059c0:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
800059c4:	ea c5 03 ff 	sub	r5,r5,1023
800059c8:	10 9b       	mov	r11,r8
800059ca:	51 74       	stdsp	sp[0x5c],r4
800059cc:	ea 1b 3f f0 	orh	r11,0x3ff0
800059d0:	c2 58       	rjmp	80005a1a <_dtoa_r+0x16a>
800059d2:	41 88       	lddsp	r8,sp[0x60]
800059d4:	41 9c       	lddsp	r12,sp[0x64]
800059d6:	10 0c       	add	r12,r8
800059d8:	f8 c5 fb ce 	sub	r5,r12,-1074
800059dc:	e0 45 00 20 	cp.w	r5,32
800059e0:	e0 8a 00 0e 	brle	800059fc <_dtoa_r+0x14c>
800059e4:	f8 cc fb ee 	sub	r12,r12,-1042
800059e8:	40 3b       	lddsp	r11,sp[0xc]
800059ea:	ea 08 11 40 	rsub	r8,r5,64
800059ee:	f6 0c 0a 4c 	lsr	r12,r11,r12
800059f2:	ec 08 09 46 	lsl	r6,r6,r8
800059f6:	0c 4c       	or	r12,r6
800059f8:	c0 78       	rjmp	80005a06 <_dtoa_r+0x156>
800059fa:	d7 03       	nop
800059fc:	ea 0c 11 20 	rsub	r12,r5,32
80005a00:	40 3a       	lddsp	r10,sp[0xc]
80005a02:	f4 0c 09 4c 	lsl	r12,r10,r12
80005a06:	e0 a0 14 2c 	rcall	8000825e <__avr32_u32_to_f64>
80005a0a:	fc 18 fe 10 	movh	r8,0xfe10
80005a0e:	30 19       	mov	r9,1
80005a10:	ea c5 04 33 	sub	r5,r5,1075
80005a14:	f0 0b 00 0b 	add	r11,r8,r11
80005a18:	51 79       	stdsp	sp[0x5c],r9
80005a1a:	30 08       	mov	r8,0
80005a1c:	fc 19 3f f8 	movh	r9,0x3ff8
80005a20:	e0 a0 12 b4 	rcall	80007f88 <__avr32_f64_sub>
80005a24:	e0 68 43 61 	mov	r8,17249
80005a28:	ea 18 63 6f 	orh	r8,0x636f
80005a2c:	e0 69 87 a7 	mov	r9,34727
80005a30:	ea 19 3f d2 	orh	r9,0x3fd2
80005a34:	e0 a0 11 be 	rcall	80007db0 <__avr32_f64_mul>
80005a38:	e0 68 c8 b3 	mov	r8,51379
80005a3c:	ea 18 8b 60 	orh	r8,0x8b60
80005a40:	e0 69 8a 28 	mov	r9,35368
80005a44:	ea 19 3f c6 	orh	r9,0x3fc6
80005a48:	e0 a0 13 6e 	rcall	80008124 <__avr32_f64_add>
80005a4c:	0a 9c       	mov	r12,r5
80005a4e:	14 90       	mov	r0,r10
80005a50:	16 91       	mov	r1,r11
80005a52:	e0 a0 14 0a 	rcall	80008266 <__avr32_s32_to_f64>
80005a56:	e0 68 79 fb 	mov	r8,31227
80005a5a:	ea 18 50 9f 	orh	r8,0x509f
80005a5e:	e0 69 44 13 	mov	r9,17427
80005a62:	ea 19 3f d3 	orh	r9,0x3fd3
80005a66:	e0 a0 11 a5 	rcall	80007db0 <__avr32_f64_mul>
80005a6a:	14 98       	mov	r8,r10
80005a6c:	16 99       	mov	r9,r11
80005a6e:	00 9a       	mov	r10,r0
80005a70:	02 9b       	mov	r11,r1
80005a72:	e0 a0 13 59 	rcall	80008124 <__avr32_f64_add>
80005a76:	14 90       	mov	r0,r10
80005a78:	16 91       	mov	r1,r11
80005a7a:	e0 a0 13 df 	rcall	80008238 <__avr32_f64_to_s32>
80005a7e:	30 08       	mov	r8,0
80005a80:	18 96       	mov	r6,r12
80005a82:	30 09       	mov	r9,0
80005a84:	00 9a       	mov	r10,r0
80005a86:	02 9b       	mov	r11,r1
80005a88:	e0 a0 14 a6 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005a8c:	c0 c0       	breq	80005aa4 <_dtoa_r+0x1f4>
80005a8e:	0c 9c       	mov	r12,r6
80005a90:	e0 a0 13 eb 	rcall	80008266 <__avr32_s32_to_f64>
80005a94:	14 98       	mov	r8,r10
80005a96:	16 99       	mov	r9,r11
80005a98:	00 9a       	mov	r10,r0
80005a9a:	02 9b       	mov	r11,r1
80005a9c:	e0 a0 14 55 	rcall	80008346 <__avr32_f64_cmp_eq>
80005aa0:	f7 b6 00 01 	subeq	r6,1
80005aa4:	59 66       	cp.w	r6,22
80005aa6:	e0 88 00 05 	brls	80005ab0 <_dtoa_r+0x200>
80005aaa:	30 18       	mov	r8,1
80005aac:	51 48       	stdsp	sp[0x50],r8
80005aae:	c1 38       	rjmp	80005ad4 <_dtoa_r+0x224>
80005ab0:	fe c8 c6 58 	sub	r8,pc,-14760
80005ab4:	fa ea 00 3c 	ld.d	r10,sp[60]
80005ab8:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80005abc:	e0 a0 14 8c 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005ac0:	f9 b4 00 00 	moveq	r4,0
80005ac4:	fb f4 0a 14 	st.weq	sp[0x50],r4
80005ac8:	f7 b6 01 01 	subne	r6,1
80005acc:	f9 bc 01 00 	movne	r12,0
80005ad0:	fb fc 1a 14 	st.wne	sp[0x50],r12
80005ad4:	41 90       	lddsp	r0,sp[0x64]
80005ad6:	20 10       	sub	r0,1
80005ad8:	0a 10       	sub	r0,r5
80005ada:	c0 46       	brmi	80005ae2 <_dtoa_r+0x232>
80005adc:	50 40       	stdsp	sp[0x10],r0
80005ade:	30 00       	mov	r0,0
80005ae0:	c0 48       	rjmp	80005ae8 <_dtoa_r+0x238>
80005ae2:	30 0b       	mov	r11,0
80005ae4:	5c 30       	neg	r0
80005ae6:	50 4b       	stdsp	sp[0x10],r11
80005ae8:	ec 02 11 00 	rsub	r2,r6,0
80005aec:	58 06       	cp.w	r6,0
80005aee:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80005af2:	f5 d6 e4 0a 	addge	r10,r10,r6
80005af6:	fb fa 4a 04 	st.wge	sp[0x10],r10
80005afa:	fb f6 4a 11 	st.wge	sp[0x44],r6
80005afe:	f9 b2 04 00 	movge	r2,0
80005b02:	e1 d6 e5 10 	sublt	r0,r0,r6
80005b06:	f9 b9 05 00 	movlt	r9,0
80005b0a:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80005b0e:	40 c8       	lddsp	r8,sp[0x30]
80005b10:	58 98       	cp.w	r8,9
80005b12:	e0 8b 00 20 	brhi	80005b52 <_dtoa_r+0x2a2>
80005b16:	58 58       	cp.w	r8,5
80005b18:	f9 b4 0a 01 	movle	r4,1
80005b1c:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80005b20:	f7 b5 09 04 	subgt	r5,4
80005b24:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80005b28:	f9 b4 09 00 	movgt	r4,0
80005b2c:	40 cc       	lddsp	r12,sp[0x30]
80005b2e:	58 3c       	cp.w	r12,3
80005b30:	c2 d0       	breq	80005b8a <_dtoa_r+0x2da>
80005b32:	e0 89 00 05 	brgt	80005b3c <_dtoa_r+0x28c>
80005b36:	58 2c       	cp.w	r12,2
80005b38:	c1 01       	brne	80005b58 <_dtoa_r+0x2a8>
80005b3a:	c1 88       	rjmp	80005b6a <_dtoa_r+0x2ba>
80005b3c:	40 cb       	lddsp	r11,sp[0x30]
80005b3e:	58 4b       	cp.w	r11,4
80005b40:	c0 60       	breq	80005b4c <_dtoa_r+0x29c>
80005b42:	58 5b       	cp.w	r11,5
80005b44:	c0 a1       	brne	80005b58 <_dtoa_r+0x2a8>
80005b46:	30 1a       	mov	r10,1
80005b48:	50 da       	stdsp	sp[0x34],r10
80005b4a:	c2 28       	rjmp	80005b8e <_dtoa_r+0x2de>
80005b4c:	30 19       	mov	r9,1
80005b4e:	50 d9       	stdsp	sp[0x34],r9
80005b50:	c0 f8       	rjmp	80005b6e <_dtoa_r+0x2be>
80005b52:	30 08       	mov	r8,0
80005b54:	30 14       	mov	r4,1
80005b56:	50 c8       	stdsp	sp[0x30],r8
80005b58:	3f f5       	mov	r5,-1
80005b5a:	30 1c       	mov	r12,1
80005b5c:	30 0b       	mov	r11,0
80005b5e:	50 95       	stdsp	sp[0x24],r5
80005b60:	50 dc       	stdsp	sp[0x34],r12
80005b62:	0a 91       	mov	r1,r5
80005b64:	31 28       	mov	r8,18
80005b66:	50 eb       	stdsp	sp[0x38],r11
80005b68:	c2 08       	rjmp	80005ba8 <_dtoa_r+0x2f8>
80005b6a:	30 0a       	mov	r10,0
80005b6c:	50 da       	stdsp	sp[0x34],r10
80005b6e:	40 e9       	lddsp	r9,sp[0x38]
80005b70:	58 09       	cp.w	r9,0
80005b72:	e0 89 00 07 	brgt	80005b80 <_dtoa_r+0x2d0>
80005b76:	30 18       	mov	r8,1
80005b78:	50 98       	stdsp	sp[0x24],r8
80005b7a:	10 91       	mov	r1,r8
80005b7c:	50 e8       	stdsp	sp[0x38],r8
80005b7e:	c1 58       	rjmp	80005ba8 <_dtoa_r+0x2f8>
80005b80:	40 e5       	lddsp	r5,sp[0x38]
80005b82:	50 95       	stdsp	sp[0x24],r5
80005b84:	0a 91       	mov	r1,r5
80005b86:	0a 98       	mov	r8,r5
80005b88:	c1 08       	rjmp	80005ba8 <_dtoa_r+0x2f8>
80005b8a:	30 0c       	mov	r12,0
80005b8c:	50 dc       	stdsp	sp[0x34],r12
80005b8e:	40 eb       	lddsp	r11,sp[0x38]
80005b90:	ec 0b 00 0b 	add	r11,r6,r11
80005b94:	50 9b       	stdsp	sp[0x24],r11
80005b96:	16 98       	mov	r8,r11
80005b98:	2f f8       	sub	r8,-1
80005b9a:	58 08       	cp.w	r8,0
80005b9c:	e0 89 00 05 	brgt	80005ba6 <_dtoa_r+0x2f6>
80005ba0:	10 91       	mov	r1,r8
80005ba2:	30 18       	mov	r8,1
80005ba4:	c0 28       	rjmp	80005ba8 <_dtoa_r+0x2f8>
80005ba6:	10 91       	mov	r1,r8
80005ba8:	30 09       	mov	r9,0
80005baa:	6e 9a       	ld.w	r10,r7[0x24]
80005bac:	95 19       	st.w	r10[0x4],r9
80005bae:	30 49       	mov	r9,4
80005bb0:	c0 68       	rjmp	80005bbc <_dtoa_r+0x30c>
80005bb2:	d7 03       	nop
80005bb4:	6a 1a       	ld.w	r10,r5[0x4]
80005bb6:	a1 79       	lsl	r9,0x1
80005bb8:	2f fa       	sub	r10,-1
80005bba:	8b 1a       	st.w	r5[0x4],r10
80005bbc:	6e 95       	ld.w	r5,r7[0x24]
80005bbe:	f2 ca ff ec 	sub	r10,r9,-20
80005bc2:	10 3a       	cp.w	r10,r8
80005bc4:	fe 98 ff f8 	brls	80005bb4 <_dtoa_r+0x304>
80005bc8:	6a 1b       	ld.w	r11,r5[0x4]
80005bca:	0e 9c       	mov	r12,r7
80005bcc:	e0 a0 0b 6e 	rcall	800072a8 <_Balloc>
80005bd0:	58 e1       	cp.w	r1,14
80005bd2:	5f 88       	srls	r8
80005bd4:	8b 0c       	st.w	r5[0x0],r12
80005bd6:	f1 e4 00 04 	and	r4,r8,r4
80005bda:	6e 98       	ld.w	r8,r7[0x24]
80005bdc:	70 08       	ld.w	r8,r8[0x0]
80005bde:	50 88       	stdsp	sp[0x20],r8
80005be0:	e0 80 01 82 	breq	80005ee4 <_dtoa_r+0x634>
80005be4:	58 06       	cp.w	r6,0
80005be6:	e0 8a 00 43 	brle	80005c6c <_dtoa_r+0x3bc>
80005bea:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80005bee:	fe c8 c7 96 	sub	r8,pc,-14442
80005bf2:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80005bf6:	fa e5 00 18 	st.d	sp[24],r4
80005bfa:	ec 04 14 04 	asr	r4,r6,0x4
80005bfe:	ed b4 00 04 	bld	r4,0x4
80005c02:	c0 30       	breq	80005c08 <_dtoa_r+0x358>
80005c04:	30 25       	mov	r5,2
80005c06:	c1 08       	rjmp	80005c26 <_dtoa_r+0x376>
80005c08:	fe c8 c6 e8 	sub	r8,pc,-14616
80005c0c:	f0 e8 00 20 	ld.d	r8,r8[32]
80005c10:	fa ea 00 3c 	ld.d	r10,sp[60]
80005c14:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80005c18:	e0 a0 14 12 	rcall	8000843c <__avr32_f64_div>
80005c1c:	30 35       	mov	r5,3
80005c1e:	14 98       	mov	r8,r10
80005c20:	16 99       	mov	r9,r11
80005c22:	fa e9 00 08 	st.d	sp[8],r8
80005c26:	fe cc c7 06 	sub	r12,pc,-14586
80005c2a:	50 a3       	stdsp	sp[0x28],r3
80005c2c:	0c 93       	mov	r3,r6
80005c2e:	18 96       	mov	r6,r12
80005c30:	c0 f8       	rjmp	80005c4e <_dtoa_r+0x39e>
80005c32:	fa ea 00 18 	ld.d	r10,sp[24]
80005c36:	ed b4 00 00 	bld	r4,0x0
80005c3a:	c0 81       	brne	80005c4a <_dtoa_r+0x39a>
80005c3c:	ec e8 00 00 	ld.d	r8,r6[0]
80005c40:	2f f5       	sub	r5,-1
80005c42:	e0 a0 10 b7 	rcall	80007db0 <__avr32_f64_mul>
80005c46:	fa eb 00 18 	st.d	sp[24],r10
80005c4a:	a1 54       	asr	r4,0x1
80005c4c:	2f 86       	sub	r6,-8
80005c4e:	58 04       	cp.w	r4,0
80005c50:	cf 11       	brne	80005c32 <_dtoa_r+0x382>
80005c52:	fa e8 00 18 	ld.d	r8,sp[24]
80005c56:	fa ea 00 08 	ld.d	r10,sp[8]
80005c5a:	06 96       	mov	r6,r3
80005c5c:	e0 a0 13 f0 	rcall	8000843c <__avr32_f64_div>
80005c60:	40 a3       	lddsp	r3,sp[0x28]
80005c62:	14 98       	mov	r8,r10
80005c64:	16 99       	mov	r9,r11
80005c66:	fa e9 00 08 	st.d	sp[8],r8
80005c6a:	c2 f8       	rjmp	80005cc8 <_dtoa_r+0x418>
80005c6c:	ec 08 11 00 	rsub	r8,r6,0
80005c70:	c0 31       	brne	80005c76 <_dtoa_r+0x3c6>
80005c72:	30 25       	mov	r5,2
80005c74:	c2 a8       	rjmp	80005cc8 <_dtoa_r+0x418>
80005c76:	fe cc c7 56 	sub	r12,pc,-14506
80005c7a:	f0 04 14 04 	asr	r4,r8,0x4
80005c7e:	50 1c       	stdsp	sp[0x4],r12
80005c80:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80005c84:	fe c9 c8 2c 	sub	r9,pc,-14292
80005c88:	fa ea 00 3c 	ld.d	r10,sp[60]
80005c8c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005c90:	e0 a0 10 90 	rcall	80007db0 <__avr32_f64_mul>
80005c94:	40 1c       	lddsp	r12,sp[0x4]
80005c96:	50 63       	stdsp	sp[0x18],r3
80005c98:	30 25       	mov	r5,2
80005c9a:	0c 93       	mov	r3,r6
80005c9c:	fa eb 00 08 	st.d	sp[8],r10
80005ca0:	18 96       	mov	r6,r12
80005ca2:	c0 f8       	rjmp	80005cc0 <_dtoa_r+0x410>
80005ca4:	fa ea 00 08 	ld.d	r10,sp[8]
80005ca8:	ed b4 00 00 	bld	r4,0x0
80005cac:	c0 81       	brne	80005cbc <_dtoa_r+0x40c>
80005cae:	ec e8 00 00 	ld.d	r8,r6[0]
80005cb2:	2f f5       	sub	r5,-1
80005cb4:	e0 a0 10 7e 	rcall	80007db0 <__avr32_f64_mul>
80005cb8:	fa eb 00 08 	st.d	sp[8],r10
80005cbc:	a1 54       	asr	r4,0x1
80005cbe:	2f 86       	sub	r6,-8
80005cc0:	58 04       	cp.w	r4,0
80005cc2:	cf 11       	brne	80005ca4 <_dtoa_r+0x3f4>
80005cc4:	06 96       	mov	r6,r3
80005cc6:	40 63       	lddsp	r3,sp[0x18]
80005cc8:	41 4a       	lddsp	r10,sp[0x50]
80005cca:	58 0a       	cp.w	r10,0
80005ccc:	c2 a0       	breq	80005d20 <_dtoa_r+0x470>
80005cce:	fa e8 00 08 	ld.d	r8,sp[8]
80005cd2:	58 01       	cp.w	r1,0
80005cd4:	5f 94       	srgt	r4
80005cd6:	fa e9 00 18 	st.d	sp[24],r8
80005cda:	30 08       	mov	r8,0
80005cdc:	fc 19 3f f0 	movh	r9,0x3ff0
80005ce0:	fa ea 00 18 	ld.d	r10,sp[24]
80005ce4:	e0 a0 13 78 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005ce8:	f9 bc 00 00 	moveq	r12,0
80005cec:	f9 bc 01 01 	movne	r12,1
80005cf0:	e9 ec 00 0c 	and	r12,r4,r12
80005cf4:	c1 60       	breq	80005d20 <_dtoa_r+0x470>
80005cf6:	40 98       	lddsp	r8,sp[0x24]
80005cf8:	58 08       	cp.w	r8,0
80005cfa:	e0 8a 00 f1 	brle	80005edc <_dtoa_r+0x62c>
80005cfe:	30 08       	mov	r8,0
80005d00:	fc 19 40 24 	movh	r9,0x4024
80005d04:	ec c4 00 01 	sub	r4,r6,1
80005d08:	fa ea 00 18 	ld.d	r10,sp[24]
80005d0c:	2f f5       	sub	r5,-1
80005d0e:	50 64       	stdsp	sp[0x18],r4
80005d10:	e0 a0 10 50 	rcall	80007db0 <__avr32_f64_mul>
80005d14:	40 94       	lddsp	r4,sp[0x24]
80005d16:	14 98       	mov	r8,r10
80005d18:	16 99       	mov	r9,r11
80005d1a:	fa e9 00 08 	st.d	sp[8],r8
80005d1e:	c0 38       	rjmp	80005d24 <_dtoa_r+0x474>
80005d20:	50 66       	stdsp	sp[0x18],r6
80005d22:	02 94       	mov	r4,r1
80005d24:	0a 9c       	mov	r12,r5
80005d26:	e0 a0 12 a0 	rcall	80008266 <__avr32_s32_to_f64>
80005d2a:	fa e8 00 08 	ld.d	r8,sp[8]
80005d2e:	e0 a0 10 41 	rcall	80007db0 <__avr32_f64_mul>
80005d32:	30 08       	mov	r8,0
80005d34:	fc 19 40 1c 	movh	r9,0x401c
80005d38:	e0 a0 11 f6 	rcall	80008124 <__avr32_f64_add>
80005d3c:	14 98       	mov	r8,r10
80005d3e:	16 99       	mov	r9,r11
80005d40:	fa e9 00 28 	st.d	sp[40],r8
80005d44:	fc 18 fc c0 	movh	r8,0xfcc0
80005d48:	40 a5       	lddsp	r5,sp[0x28]
80005d4a:	10 05       	add	r5,r8
80005d4c:	50 a5       	stdsp	sp[0x28],r5
80005d4e:	58 04       	cp.w	r4,0
80005d50:	c2 11       	brne	80005d92 <_dtoa_r+0x4e2>
80005d52:	fa ea 00 08 	ld.d	r10,sp[8]
80005d56:	30 08       	mov	r8,0
80005d58:	fc 19 40 14 	movh	r9,0x4014
80005d5c:	e0 a0 11 16 	rcall	80007f88 <__avr32_f64_sub>
80005d60:	40 bc       	lddsp	r12,sp[0x2c]
80005d62:	fa eb 00 08 	st.d	sp[8],r10
80005d66:	14 98       	mov	r8,r10
80005d68:	16 99       	mov	r9,r11
80005d6a:	18 9a       	mov	r10,r12
80005d6c:	0a 9b       	mov	r11,r5
80005d6e:	e0 a0 13 33 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005d72:	e0 81 02 54 	brne	8000621a <_dtoa_r+0x96a>
80005d76:	0a 98       	mov	r8,r5
80005d78:	40 b9       	lddsp	r9,sp[0x2c]
80005d7a:	ee 18 80 00 	eorh	r8,0x8000
80005d7e:	fa ea 00 08 	ld.d	r10,sp[8]
80005d82:	10 95       	mov	r5,r8
80005d84:	12 98       	mov	r8,r9
80005d86:	0a 99       	mov	r9,r5
80005d88:	e0 a0 13 26 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005d8c:	e0 81 02 3e 	brne	80006208 <_dtoa_r+0x958>
80005d90:	ca 68       	rjmp	80005edc <_dtoa_r+0x62c>
80005d92:	fe c9 c9 3a 	sub	r9,pc,-14022
80005d96:	e8 c8 00 01 	sub	r8,r4,1
80005d9a:	40 d5       	lddsp	r5,sp[0x34]
80005d9c:	58 05       	cp.w	r5,0
80005d9e:	c4 f0       	breq	80005e3c <_dtoa_r+0x58c>
80005da0:	30 0c       	mov	r12,0
80005da2:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80005da6:	51 3c       	stdsp	sp[0x4c],r12
80005da8:	30 0a       	mov	r10,0
80005daa:	fc 1b 3f e0 	movh	r11,0x3fe0
80005dae:	e0 a0 13 47 	rcall	8000843c <__avr32_f64_div>
80005db2:	fa e8 00 28 	ld.d	r8,sp[40]
80005db6:	40 85       	lddsp	r5,sp[0x20]
80005db8:	e0 a0 10 e8 	rcall	80007f88 <__avr32_f64_sub>
80005dbc:	fa eb 00 28 	st.d	sp[40],r10
80005dc0:	fa ea 00 08 	ld.d	r10,sp[8]
80005dc4:	e0 a0 12 3a 	rcall	80008238 <__avr32_f64_to_s32>
80005dc8:	51 6c       	stdsp	sp[0x58],r12
80005dca:	e0 a0 12 4e 	rcall	80008266 <__avr32_s32_to_f64>
80005dce:	14 98       	mov	r8,r10
80005dd0:	16 99       	mov	r9,r11
80005dd2:	fa ea 00 08 	ld.d	r10,sp[8]
80005dd6:	e0 a0 10 d9 	rcall	80007f88 <__avr32_f64_sub>
80005dda:	fa eb 00 08 	st.d	sp[8],r10
80005dde:	41 68       	lddsp	r8,sp[0x58]
80005de0:	2d 08       	sub	r8,-48
80005de2:	0a c8       	st.b	r5++,r8
80005de4:	41 39       	lddsp	r9,sp[0x4c]
80005de6:	2f f9       	sub	r9,-1
80005de8:	51 39       	stdsp	sp[0x4c],r9
80005dea:	fa e8 00 28 	ld.d	r8,sp[40]
80005dee:	e0 a0 12 f3 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005df2:	e0 81 03 39 	brne	80006464 <_dtoa_r+0xbb4>
80005df6:	fa e8 00 08 	ld.d	r8,sp[8]
80005dfa:	30 0a       	mov	r10,0
80005dfc:	fc 1b 3f f0 	movh	r11,0x3ff0
80005e00:	e0 a0 10 c4 	rcall	80007f88 <__avr32_f64_sub>
80005e04:	fa e8 00 28 	ld.d	r8,sp[40]
80005e08:	e0 a0 12 e6 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005e0c:	fa ea 00 28 	ld.d	r10,sp[40]
80005e10:	30 08       	mov	r8,0
80005e12:	fc 19 40 24 	movh	r9,0x4024
80005e16:	e0 81 00 da 	brne	80005fca <_dtoa_r+0x71a>
80005e1a:	41 3c       	lddsp	r12,sp[0x4c]
80005e1c:	08 3c       	cp.w	r12,r4
80005e1e:	c5 f4       	brge	80005edc <_dtoa_r+0x62c>
80005e20:	e0 a0 0f c8 	rcall	80007db0 <__avr32_f64_mul>
80005e24:	30 08       	mov	r8,0
80005e26:	fa eb 00 28 	st.d	sp[40],r10
80005e2a:	fc 19 40 24 	movh	r9,0x4024
80005e2e:	fa ea 00 08 	ld.d	r10,sp[8]
80005e32:	e0 a0 0f bf 	rcall	80007db0 <__avr32_f64_mul>
80005e36:	fa eb 00 08 	st.d	sp[8],r10
80005e3a:	cc 3b       	rjmp	80005dc0 <_dtoa_r+0x510>
80005e3c:	40 85       	lddsp	r5,sp[0x20]
80005e3e:	08 05       	add	r5,r4
80005e40:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80005e44:	51 35       	stdsp	sp[0x4c],r5
80005e46:	fa e8 00 28 	ld.d	r8,sp[40]
80005e4a:	40 85       	lddsp	r5,sp[0x20]
80005e4c:	e0 a0 0f b2 	rcall	80007db0 <__avr32_f64_mul>
80005e50:	fa eb 00 28 	st.d	sp[40],r10
80005e54:	fa ea 00 08 	ld.d	r10,sp[8]
80005e58:	e0 a0 11 f0 	rcall	80008238 <__avr32_f64_to_s32>
80005e5c:	51 6c       	stdsp	sp[0x58],r12
80005e5e:	e0 a0 12 04 	rcall	80008266 <__avr32_s32_to_f64>
80005e62:	14 98       	mov	r8,r10
80005e64:	16 99       	mov	r9,r11
80005e66:	fa ea 00 08 	ld.d	r10,sp[8]
80005e6a:	e0 a0 10 8f 	rcall	80007f88 <__avr32_f64_sub>
80005e6e:	fa eb 00 08 	st.d	sp[8],r10
80005e72:	41 68       	lddsp	r8,sp[0x58]
80005e74:	2d 08       	sub	r8,-48
80005e76:	0a c8       	st.b	r5++,r8
80005e78:	41 3c       	lddsp	r12,sp[0x4c]
80005e7a:	18 35       	cp.w	r5,r12
80005e7c:	c2 81       	brne	80005ecc <_dtoa_r+0x61c>
80005e7e:	30 08       	mov	r8,0
80005e80:	fc 19 3f e0 	movh	r9,0x3fe0
80005e84:	fa ea 00 28 	ld.d	r10,sp[40]
80005e88:	e0 a0 11 4e 	rcall	80008124 <__avr32_f64_add>
80005e8c:	40 85       	lddsp	r5,sp[0x20]
80005e8e:	fa e8 00 08 	ld.d	r8,sp[8]
80005e92:	08 05       	add	r5,r4
80005e94:	e0 a0 12 a0 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005e98:	e0 81 00 99 	brne	80005fca <_dtoa_r+0x71a>
80005e9c:	fa e8 00 28 	ld.d	r8,sp[40]
80005ea0:	30 0a       	mov	r10,0
80005ea2:	fc 1b 3f e0 	movh	r11,0x3fe0
80005ea6:	e0 a0 10 71 	rcall	80007f88 <__avr32_f64_sub>
80005eaa:	14 98       	mov	r8,r10
80005eac:	16 99       	mov	r9,r11
80005eae:	fa ea 00 08 	ld.d	r10,sp[8]
80005eb2:	e0 a0 12 91 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005eb6:	c1 30       	breq	80005edc <_dtoa_r+0x62c>
80005eb8:	33 09       	mov	r9,48
80005eba:	0a 98       	mov	r8,r5
80005ebc:	11 7a       	ld.ub	r10,--r8
80005ebe:	f2 0a 18 00 	cp.b	r10,r9
80005ec2:	e0 81 02 d1 	brne	80006464 <_dtoa_r+0xbb4>
80005ec6:	10 95       	mov	r5,r8
80005ec8:	cf 9b       	rjmp	80005eba <_dtoa_r+0x60a>
80005eca:	d7 03       	nop
80005ecc:	30 08       	mov	r8,0
80005ece:	fc 19 40 24 	movh	r9,0x4024
80005ed2:	e0 a0 0f 6f 	rcall	80007db0 <__avr32_f64_mul>
80005ed6:	fa eb 00 08 	st.d	sp[8],r10
80005eda:	cb db       	rjmp	80005e54 <_dtoa_r+0x5a4>
80005edc:	fa ea 00 3c 	ld.d	r10,sp[60]
80005ee0:	fa eb 00 08 	st.d	sp[8],r10
80005ee4:	58 e6       	cp.w	r6,14
80005ee6:	5f ab       	srle	r11
80005ee8:	41 8a       	lddsp	r10,sp[0x60]
80005eea:	30 08       	mov	r8,0
80005eec:	f4 09 11 ff 	rsub	r9,r10,-1
80005ef0:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80005ef4:	f0 09 18 00 	cp.b	r9,r8
80005ef8:	e0 80 00 82 	breq	80005ffc <_dtoa_r+0x74c>
80005efc:	40 ea       	lddsp	r10,sp[0x38]
80005efe:	58 01       	cp.w	r1,0
80005f00:	5f a9       	srle	r9
80005f02:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80005f06:	fe ca ca ae 	sub	r10,pc,-13650
80005f0a:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80005f0e:	fa e5 00 10 	st.d	sp[16],r4
80005f12:	f0 09 18 00 	cp.b	r9,r8
80005f16:	c1 40       	breq	80005f3e <_dtoa_r+0x68e>
80005f18:	58 01       	cp.w	r1,0
80005f1a:	e0 81 01 77 	brne	80006208 <_dtoa_r+0x958>
80005f1e:	30 08       	mov	r8,0
80005f20:	fc 19 40 14 	movh	r9,0x4014
80005f24:	08 9a       	mov	r10,r4
80005f26:	0a 9b       	mov	r11,r5
80005f28:	e0 a0 0f 44 	rcall	80007db0 <__avr32_f64_mul>
80005f2c:	fa e8 00 08 	ld.d	r8,sp[8]
80005f30:	e0 a0 12 1e 	rcall	8000836c <__avr32_f64_cmp_ge>
80005f34:	e0 81 01 6a 	brne	80006208 <_dtoa_r+0x958>
80005f38:	02 92       	mov	r2,r1
80005f3a:	e0 8f 01 72 	bral	8000621e <_dtoa_r+0x96e>
80005f3e:	40 85       	lddsp	r5,sp[0x20]
80005f40:	30 14       	mov	r4,1
80005f42:	fa e8 00 10 	ld.d	r8,sp[16]
80005f46:	fa ea 00 08 	ld.d	r10,sp[8]
80005f4a:	e0 a0 12 79 	rcall	8000843c <__avr32_f64_div>
80005f4e:	e0 a0 11 75 	rcall	80008238 <__avr32_f64_to_s32>
80005f52:	18 92       	mov	r2,r12
80005f54:	e0 a0 11 89 	rcall	80008266 <__avr32_s32_to_f64>
80005f58:	fa e8 00 10 	ld.d	r8,sp[16]
80005f5c:	e0 a0 0f 2a 	rcall	80007db0 <__avr32_f64_mul>
80005f60:	14 98       	mov	r8,r10
80005f62:	16 99       	mov	r9,r11
80005f64:	fa ea 00 08 	ld.d	r10,sp[8]
80005f68:	e0 a0 10 10 	rcall	80007f88 <__avr32_f64_sub>
80005f6c:	fa eb 00 08 	st.d	sp[8],r10
80005f70:	e4 c8 ff d0 	sub	r8,r2,-48
80005f74:	0a c8       	st.b	r5++,r8
80005f76:	fc 19 40 24 	movh	r9,0x4024
80005f7a:	30 08       	mov	r8,0
80005f7c:	02 34       	cp.w	r4,r1
80005f7e:	c3 31       	brne	80005fe4 <_dtoa_r+0x734>
80005f80:	fa e8 00 08 	ld.d	r8,sp[8]
80005f84:	e0 a0 10 d0 	rcall	80008124 <__avr32_f64_add>
80005f88:	16 91       	mov	r1,r11
80005f8a:	14 90       	mov	r0,r10
80005f8c:	14 98       	mov	r8,r10
80005f8e:	02 99       	mov	r9,r1
80005f90:	fa ea 00 10 	ld.d	r10,sp[16]
80005f94:	e0 a0 12 20 	rcall	800083d4 <__avr32_f64_cmp_lt>
80005f98:	c1 a1       	brne	80005fcc <_dtoa_r+0x71c>
80005f9a:	fa e8 00 10 	ld.d	r8,sp[16]
80005f9e:	00 9a       	mov	r10,r0
80005fa0:	02 9b       	mov	r11,r1
80005fa2:	e0 a0 11 d2 	rcall	80008346 <__avr32_f64_cmp_eq>
80005fa6:	e0 80 02 5e 	breq	80006462 <_dtoa_r+0xbb2>
80005faa:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80005fae:	c0 f1       	brne	80005fcc <_dtoa_r+0x71c>
80005fb0:	e0 8f 02 59 	bral	80006462 <_dtoa_r+0xbb2>
80005fb4:	40 8a       	lddsp	r10,sp[0x20]
80005fb6:	14 38       	cp.w	r8,r10
80005fb8:	c0 30       	breq	80005fbe <_dtoa_r+0x70e>
80005fba:	10 95       	mov	r5,r8
80005fbc:	c0 98       	rjmp	80005fce <_dtoa_r+0x71e>
80005fbe:	33 08       	mov	r8,48
80005fc0:	40 89       	lddsp	r9,sp[0x20]
80005fc2:	2f f6       	sub	r6,-1
80005fc4:	b2 88       	st.b	r9[0x0],r8
80005fc6:	40 88       	lddsp	r8,sp[0x20]
80005fc8:	c0 88       	rjmp	80005fd8 <_dtoa_r+0x728>
80005fca:	40 66       	lddsp	r6,sp[0x18]
80005fcc:	33 99       	mov	r9,57
80005fce:	0a 98       	mov	r8,r5
80005fd0:	11 7a       	ld.ub	r10,--r8
80005fd2:	f2 0a 18 00 	cp.b	r10,r9
80005fd6:	ce f0       	breq	80005fb4 <_dtoa_r+0x704>
80005fd8:	50 66       	stdsp	sp[0x18],r6
80005fda:	11 89       	ld.ub	r9,r8[0x0]
80005fdc:	2f f9       	sub	r9,-1
80005fde:	b0 89       	st.b	r8[0x0],r9
80005fe0:	e0 8f 02 42 	bral	80006464 <_dtoa_r+0xbb4>
80005fe4:	e0 a0 0e e6 	rcall	80007db0 <__avr32_f64_mul>
80005fe8:	2f f4       	sub	r4,-1
80005fea:	fa eb 00 08 	st.d	sp[8],r10
80005fee:	30 08       	mov	r8,0
80005ff0:	30 09       	mov	r9,0
80005ff2:	e0 a0 11 aa 	rcall	80008346 <__avr32_f64_cmp_eq>
80005ff6:	ca 60       	breq	80005f42 <_dtoa_r+0x692>
80005ff8:	e0 8f 02 35 	bral	80006462 <_dtoa_r+0xbb2>
80005ffc:	40 d8       	lddsp	r8,sp[0x34]
80005ffe:	58 08       	cp.w	r8,0
80006000:	c0 51       	brne	8000600a <_dtoa_r+0x75a>
80006002:	04 98       	mov	r8,r2
80006004:	00 95       	mov	r5,r0
80006006:	40 d4       	lddsp	r4,sp[0x34]
80006008:	c3 78       	rjmp	80006076 <_dtoa_r+0x7c6>
8000600a:	40 c5       	lddsp	r5,sp[0x30]
8000600c:	58 15       	cp.w	r5,1
8000600e:	e0 89 00 0f 	brgt	8000602c <_dtoa_r+0x77c>
80006012:	41 74       	lddsp	r4,sp[0x5c]
80006014:	58 04       	cp.w	r4,0
80006016:	c0 40       	breq	8000601e <_dtoa_r+0x76e>
80006018:	f4 c9 fb cd 	sub	r9,r10,-1075
8000601c:	c0 48       	rjmp	80006024 <_dtoa_r+0x774>
8000601e:	41 99       	lddsp	r9,sp[0x64]
80006020:	f2 09 11 36 	rsub	r9,r9,54
80006024:	04 98       	mov	r8,r2
80006026:	00 95       	mov	r5,r0
80006028:	c1 c8       	rjmp	80006060 <_dtoa_r+0x7b0>
8000602a:	d7 03       	nop
8000602c:	e2 c8 00 01 	sub	r8,r1,1
80006030:	58 01       	cp.w	r1,0
80006032:	e0 05 17 40 	movge	r5,r0
80006036:	e2 09 17 40 	movge	r9,r1
8000603a:	e1 d1 e5 15 	sublt	r5,r0,r1
8000603e:	f9 b9 05 00 	movlt	r9,0
80006042:	10 32       	cp.w	r2,r8
80006044:	e5 d8 e4 18 	subge	r8,r2,r8
80006048:	f1 d2 e5 18 	sublt	r8,r8,r2
8000604c:	e5 d8 e5 02 	addlt	r2,r2,r8
80006050:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80006054:	f9 d8 e5 0c 	addlt	r12,r12,r8
80006058:	fb fc 5a 11 	st.wlt	sp[0x44],r12
8000605c:	f9 b8 05 00 	movlt	r8,0
80006060:	40 4b       	lddsp	r11,sp[0x10]
80006062:	12 0b       	add	r11,r9
80006064:	50 08       	stdsp	sp[0x0],r8
80006066:	50 4b       	stdsp	sp[0x10],r11
80006068:	12 00       	add	r0,r9
8000606a:	30 1b       	mov	r11,1
8000606c:	0e 9c       	mov	r12,r7
8000606e:	e0 a0 0a d1 	rcall	80007610 <__i2b>
80006072:	40 08       	lddsp	r8,sp[0x0]
80006074:	18 94       	mov	r4,r12
80006076:	40 4a       	lddsp	r10,sp[0x10]
80006078:	58 05       	cp.w	r5,0
8000607a:	5f 99       	srgt	r9
8000607c:	58 0a       	cp.w	r10,0
8000607e:	5f 9a       	srgt	r10
80006080:	f5 e9 00 09 	and	r9,r10,r9
80006084:	c0 80       	breq	80006094 <_dtoa_r+0x7e4>
80006086:	40 4c       	lddsp	r12,sp[0x10]
80006088:	f8 05 0d 49 	min	r9,r12,r5
8000608c:	12 1c       	sub	r12,r9
8000608e:	12 10       	sub	r0,r9
80006090:	50 4c       	stdsp	sp[0x10],r12
80006092:	12 15       	sub	r5,r9
80006094:	58 02       	cp.w	r2,0
80006096:	e0 8a 00 27 	brle	800060e4 <_dtoa_r+0x834>
8000609a:	40 db       	lddsp	r11,sp[0x34]
8000609c:	58 0b       	cp.w	r11,0
8000609e:	c1 d0       	breq	800060d8 <_dtoa_r+0x828>
800060a0:	58 08       	cp.w	r8,0
800060a2:	e0 8a 00 17 	brle	800060d0 <_dtoa_r+0x820>
800060a6:	10 9a       	mov	r10,r8
800060a8:	50 08       	stdsp	sp[0x0],r8
800060aa:	08 9b       	mov	r11,r4
800060ac:	0e 9c       	mov	r12,r7
800060ae:	e0 a0 0a f7 	rcall	8000769c <__pow5mult>
800060b2:	06 9a       	mov	r10,r3
800060b4:	18 9b       	mov	r11,r12
800060b6:	18 94       	mov	r4,r12
800060b8:	0e 9c       	mov	r12,r7
800060ba:	e0 a0 0a 2b 	rcall	80007510 <__multiply>
800060be:	18 99       	mov	r9,r12
800060c0:	06 9b       	mov	r11,r3
800060c2:	50 19       	stdsp	sp[0x4],r9
800060c4:	0e 9c       	mov	r12,r7
800060c6:	e0 a0 08 d7 	rcall	80007274 <_Bfree>
800060ca:	40 19       	lddsp	r9,sp[0x4]
800060cc:	40 08       	lddsp	r8,sp[0x0]
800060ce:	12 93       	mov	r3,r9
800060d0:	e4 08 01 0a 	sub	r10,r2,r8
800060d4:	c0 80       	breq	800060e4 <_dtoa_r+0x834>
800060d6:	c0 28       	rjmp	800060da <_dtoa_r+0x82a>
800060d8:	04 9a       	mov	r10,r2
800060da:	06 9b       	mov	r11,r3
800060dc:	0e 9c       	mov	r12,r7
800060de:	e0 a0 0a df 	rcall	8000769c <__pow5mult>
800060e2:	18 93       	mov	r3,r12
800060e4:	30 1b       	mov	r11,1
800060e6:	0e 9c       	mov	r12,r7
800060e8:	e0 a0 0a 94 	rcall	80007610 <__i2b>
800060ec:	41 1a       	lddsp	r10,sp[0x44]
800060ee:	18 92       	mov	r2,r12
800060f0:	58 0a       	cp.w	r10,0
800060f2:	e0 8a 00 07 	brle	80006100 <_dtoa_r+0x850>
800060f6:	18 9b       	mov	r11,r12
800060f8:	0e 9c       	mov	r12,r7
800060fa:	e0 a0 0a d1 	rcall	8000769c <__pow5mult>
800060fe:	18 92       	mov	r2,r12
80006100:	40 c9       	lddsp	r9,sp[0x30]
80006102:	58 19       	cp.w	r9,1
80006104:	e0 89 00 14 	brgt	8000612c <_dtoa_r+0x87c>
80006108:	40 38       	lddsp	r8,sp[0xc]
8000610a:	58 08       	cp.w	r8,0
8000610c:	c1 01       	brne	8000612c <_dtoa_r+0x87c>
8000610e:	40 29       	lddsp	r9,sp[0x8]
80006110:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80006114:	c0 c1       	brne	8000612c <_dtoa_r+0x87c>
80006116:	12 98       	mov	r8,r9
80006118:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000611c:	c0 80       	breq	8000612c <_dtoa_r+0x87c>
8000611e:	40 4c       	lddsp	r12,sp[0x10]
80006120:	30 1b       	mov	r11,1
80006122:	2f fc       	sub	r12,-1
80006124:	2f f0       	sub	r0,-1
80006126:	50 4c       	stdsp	sp[0x10],r12
80006128:	50 6b       	stdsp	sp[0x18],r11
8000612a:	c0 38       	rjmp	80006130 <_dtoa_r+0x880>
8000612c:	30 0a       	mov	r10,0
8000612e:	50 6a       	stdsp	sp[0x18],r10
80006130:	41 19       	lddsp	r9,sp[0x44]
80006132:	58 09       	cp.w	r9,0
80006134:	c0 31       	brne	8000613a <_dtoa_r+0x88a>
80006136:	30 1c       	mov	r12,1
80006138:	c0 98       	rjmp	8000614a <_dtoa_r+0x89a>
8000613a:	64 48       	ld.w	r8,r2[0x10]
8000613c:	2f c8       	sub	r8,-4
8000613e:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80006142:	e0 a0 08 08 	rcall	80007152 <__hi0bits>
80006146:	f8 0c 11 20 	rsub	r12,r12,32
8000614a:	40 4b       	lddsp	r11,sp[0x10]
8000614c:	f8 0b 00 08 	add	r8,r12,r11
80006150:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006154:	c0 c0       	breq	8000616c <_dtoa_r+0x8bc>
80006156:	f0 08 11 20 	rsub	r8,r8,32
8000615a:	58 48       	cp.w	r8,4
8000615c:	e0 8a 00 06 	brle	80006168 <_dtoa_r+0x8b8>
80006160:	20 48       	sub	r8,4
80006162:	10 0b       	add	r11,r8
80006164:	50 4b       	stdsp	sp[0x10],r11
80006166:	c0 78       	rjmp	80006174 <_dtoa_r+0x8c4>
80006168:	58 48       	cp.w	r8,4
8000616a:	c0 70       	breq	80006178 <_dtoa_r+0x8c8>
8000616c:	40 4a       	lddsp	r10,sp[0x10]
8000616e:	2e 48       	sub	r8,-28
80006170:	10 0a       	add	r10,r8
80006172:	50 4a       	stdsp	sp[0x10],r10
80006174:	10 00       	add	r0,r8
80006176:	10 05       	add	r5,r8
80006178:	58 00       	cp.w	r0,0
8000617a:	e0 8a 00 08 	brle	8000618a <_dtoa_r+0x8da>
8000617e:	06 9b       	mov	r11,r3
80006180:	00 9a       	mov	r10,r0
80006182:	0e 9c       	mov	r12,r7
80006184:	e0 a0 09 82 	rcall	80007488 <__lshift>
80006188:	18 93       	mov	r3,r12
8000618a:	40 49       	lddsp	r9,sp[0x10]
8000618c:	58 09       	cp.w	r9,0
8000618e:	e0 8a 00 08 	brle	8000619e <_dtoa_r+0x8ee>
80006192:	04 9b       	mov	r11,r2
80006194:	12 9a       	mov	r10,r9
80006196:	0e 9c       	mov	r12,r7
80006198:	e0 a0 09 78 	rcall	80007488 <__lshift>
8000619c:	18 92       	mov	r2,r12
8000619e:	41 48       	lddsp	r8,sp[0x50]
800061a0:	58 08       	cp.w	r8,0
800061a2:	c1 b0       	breq	800061d8 <_dtoa_r+0x928>
800061a4:	04 9b       	mov	r11,r2
800061a6:	06 9c       	mov	r12,r3
800061a8:	e0 a0 08 4c 	rcall	80007240 <__mcmp>
800061ac:	c1 64       	brge	800061d8 <_dtoa_r+0x928>
800061ae:	06 9b       	mov	r11,r3
800061b0:	30 09       	mov	r9,0
800061b2:	30 aa       	mov	r10,10
800061b4:	0e 9c       	mov	r12,r7
800061b6:	e0 a0 0a 35 	rcall	80007620 <__multadd>
800061ba:	20 16       	sub	r6,1
800061bc:	18 93       	mov	r3,r12
800061be:	40 dc       	lddsp	r12,sp[0x34]
800061c0:	58 0c       	cp.w	r12,0
800061c2:	c0 31       	brne	800061c8 <_dtoa_r+0x918>
800061c4:	40 91       	lddsp	r1,sp[0x24]
800061c6:	c0 98       	rjmp	800061d8 <_dtoa_r+0x928>
800061c8:	08 9b       	mov	r11,r4
800061ca:	40 91       	lddsp	r1,sp[0x24]
800061cc:	30 09       	mov	r9,0
800061ce:	30 aa       	mov	r10,10
800061d0:	0e 9c       	mov	r12,r7
800061d2:	e0 a0 0a 27 	rcall	80007620 <__multadd>
800061d6:	18 94       	mov	r4,r12
800061d8:	58 01       	cp.w	r1,0
800061da:	5f a9       	srle	r9
800061dc:	40 cb       	lddsp	r11,sp[0x30]
800061de:	58 2b       	cp.w	r11,2
800061e0:	5f 98       	srgt	r8
800061e2:	f3 e8 00 08 	and	r8,r9,r8
800061e6:	c2 50       	breq	80006230 <_dtoa_r+0x980>
800061e8:	58 01       	cp.w	r1,0
800061ea:	c1 11       	brne	8000620c <_dtoa_r+0x95c>
800061ec:	04 9b       	mov	r11,r2
800061ee:	02 99       	mov	r9,r1
800061f0:	30 5a       	mov	r10,5
800061f2:	0e 9c       	mov	r12,r7
800061f4:	e0 a0 0a 16 	rcall	80007620 <__multadd>
800061f8:	18 92       	mov	r2,r12
800061fa:	18 9b       	mov	r11,r12
800061fc:	06 9c       	mov	r12,r3
800061fe:	e0 a0 08 21 	rcall	80007240 <__mcmp>
80006202:	e0 89 00 0f 	brgt	80006220 <_dtoa_r+0x970>
80006206:	c0 38       	rjmp	8000620c <_dtoa_r+0x95c>
80006208:	30 02       	mov	r2,0
8000620a:	04 94       	mov	r4,r2
8000620c:	40 ea       	lddsp	r10,sp[0x38]
8000620e:	30 09       	mov	r9,0
80006210:	5c da       	com	r10
80006212:	40 85       	lddsp	r5,sp[0x20]
80006214:	50 6a       	stdsp	sp[0x18],r10
80006216:	50 49       	stdsp	sp[0x10],r9
80006218:	c0 f9       	rjmp	80006436 <_dtoa_r+0xb86>
8000621a:	08 92       	mov	r2,r4
8000621c:	40 66       	lddsp	r6,sp[0x18]
8000621e:	04 94       	mov	r4,r2
80006220:	2f f6       	sub	r6,-1
80006222:	50 66       	stdsp	sp[0x18],r6
80006224:	33 18       	mov	r8,49
80006226:	40 85       	lddsp	r5,sp[0x20]
80006228:	0a c8       	st.b	r5++,r8
8000622a:	30 08       	mov	r8,0
8000622c:	50 48       	stdsp	sp[0x10],r8
8000622e:	c0 49       	rjmp	80006436 <_dtoa_r+0xb86>
80006230:	40 dc       	lddsp	r12,sp[0x34]
80006232:	58 0c       	cp.w	r12,0
80006234:	e0 80 00 b5 	breq	8000639e <_dtoa_r+0xaee>
80006238:	58 05       	cp.w	r5,0
8000623a:	e0 8a 00 08 	brle	8000624a <_dtoa_r+0x99a>
8000623e:	08 9b       	mov	r11,r4
80006240:	0a 9a       	mov	r10,r5
80006242:	0e 9c       	mov	r12,r7
80006244:	e0 a0 09 22 	rcall	80007488 <__lshift>
80006248:	18 94       	mov	r4,r12
8000624a:	40 6b       	lddsp	r11,sp[0x18]
8000624c:	58 0b       	cp.w	r11,0
8000624e:	c0 31       	brne	80006254 <_dtoa_r+0x9a4>
80006250:	08 9c       	mov	r12,r4
80006252:	c1 38       	rjmp	80006278 <_dtoa_r+0x9c8>
80006254:	68 1b       	ld.w	r11,r4[0x4]
80006256:	0e 9c       	mov	r12,r7
80006258:	e0 a0 08 28 	rcall	800072a8 <_Balloc>
8000625c:	68 4a       	ld.w	r10,r4[0x10]
8000625e:	18 95       	mov	r5,r12
80006260:	e8 cb ff f4 	sub	r11,r4,-12
80006264:	2f ea       	sub	r10,-2
80006266:	2f 4c       	sub	r12,-12
80006268:	a3 6a       	lsl	r10,0x2
8000626a:	fe b0 e8 3f 	rcall	800032e8 <memcpy>
8000626e:	0a 9b       	mov	r11,r5
80006270:	30 1a       	mov	r10,1
80006272:	0e 9c       	mov	r12,r7
80006274:	e0 a0 09 0a 	rcall	80007488 <__lshift>
80006278:	50 44       	stdsp	sp[0x10],r4
8000627a:	40 3a       	lddsp	r10,sp[0xc]
8000627c:	30 19       	mov	r9,1
8000627e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80006282:	18 94       	mov	r4,r12
80006284:	50 da       	stdsp	sp[0x34],r10
80006286:	40 85       	lddsp	r5,sp[0x20]
80006288:	50 99       	stdsp	sp[0x24],r9
8000628a:	50 26       	stdsp	sp[0x8],r6
8000628c:	50 e1       	stdsp	sp[0x38],r1
8000628e:	04 9b       	mov	r11,r2
80006290:	06 9c       	mov	r12,r3
80006292:	fe b0 fa 7f 	rcall	80005790 <quorem>
80006296:	40 4b       	lddsp	r11,sp[0x10]
80006298:	f8 c0 ff d0 	sub	r0,r12,-48
8000629c:	06 9c       	mov	r12,r3
8000629e:	e0 a0 07 d1 	rcall	80007240 <__mcmp>
800062a2:	08 9a       	mov	r10,r4
800062a4:	50 6c       	stdsp	sp[0x18],r12
800062a6:	04 9b       	mov	r11,r2
800062a8:	0e 9c       	mov	r12,r7
800062aa:	e0 a0 08 87 	rcall	800073b8 <__mdiff>
800062ae:	18 91       	mov	r1,r12
800062b0:	78 38       	ld.w	r8,r12[0xc]
800062b2:	58 08       	cp.w	r8,0
800062b4:	c0 30       	breq	800062ba <_dtoa_r+0xa0a>
800062b6:	30 16       	mov	r6,1
800062b8:	c0 68       	rjmp	800062c4 <_dtoa_r+0xa14>
800062ba:	18 9b       	mov	r11,r12
800062bc:	06 9c       	mov	r12,r3
800062be:	e0 a0 07 c1 	rcall	80007240 <__mcmp>
800062c2:	18 96       	mov	r6,r12
800062c4:	0e 9c       	mov	r12,r7
800062c6:	02 9b       	mov	r11,r1
800062c8:	e0 a0 07 d6 	rcall	80007274 <_Bfree>
800062cc:	40 cc       	lddsp	r12,sp[0x30]
800062ce:	ed ec 10 08 	or	r8,r6,r12
800062d2:	c0 d1       	brne	800062ec <_dtoa_r+0xa3c>
800062d4:	40 db       	lddsp	r11,sp[0x34]
800062d6:	58 0b       	cp.w	r11,0
800062d8:	c0 a1       	brne	800062ec <_dtoa_r+0xa3c>
800062da:	40 26       	lddsp	r6,sp[0x8]
800062dc:	e0 40 00 39 	cp.w	r0,57
800062e0:	c3 00       	breq	80006340 <_dtoa_r+0xa90>
800062e2:	40 6a       	lddsp	r10,sp[0x18]
800062e4:	58 0a       	cp.w	r10,0
800062e6:	e0 89 00 24 	brgt	8000632e <_dtoa_r+0xa7e>
800062ea:	c2 f8       	rjmp	80006348 <_dtoa_r+0xa98>
800062ec:	40 69       	lddsp	r9,sp[0x18]
800062ee:	58 09       	cp.w	r9,0
800062f0:	c0 85       	brlt	80006300 <_dtoa_r+0xa50>
800062f2:	12 98       	mov	r8,r9
800062f4:	40 cc       	lddsp	r12,sp[0x30]
800062f6:	18 48       	or	r8,r12
800062f8:	c1 d1       	brne	80006332 <_dtoa_r+0xa82>
800062fa:	40 db       	lddsp	r11,sp[0x34]
800062fc:	58 0b       	cp.w	r11,0
800062fe:	c1 a1       	brne	80006332 <_dtoa_r+0xa82>
80006300:	0c 99       	mov	r9,r6
80006302:	40 26       	lddsp	r6,sp[0x8]
80006304:	58 09       	cp.w	r9,0
80006306:	e0 8a 00 21 	brle	80006348 <_dtoa_r+0xa98>
8000630a:	06 9b       	mov	r11,r3
8000630c:	30 1a       	mov	r10,1
8000630e:	0e 9c       	mov	r12,r7
80006310:	e0 a0 08 bc 	rcall	80007488 <__lshift>
80006314:	04 9b       	mov	r11,r2
80006316:	18 93       	mov	r3,r12
80006318:	e0 a0 07 94 	rcall	80007240 <__mcmp>
8000631c:	e0 89 00 06 	brgt	80006328 <_dtoa_r+0xa78>
80006320:	c1 41       	brne	80006348 <_dtoa_r+0xa98>
80006322:	ed b0 00 00 	bld	r0,0x0
80006326:	c1 11       	brne	80006348 <_dtoa_r+0xa98>
80006328:	e0 40 00 39 	cp.w	r0,57
8000632c:	c0 a0       	breq	80006340 <_dtoa_r+0xa90>
8000632e:	2f f0       	sub	r0,-1
80006330:	c0 c8       	rjmp	80006348 <_dtoa_r+0xa98>
80006332:	58 06       	cp.w	r6,0
80006334:	e0 8a 00 0c 	brle	8000634c <_dtoa_r+0xa9c>
80006338:	40 26       	lddsp	r6,sp[0x8]
8000633a:	e0 40 00 39 	cp.w	r0,57
8000633e:	c0 41       	brne	80006346 <_dtoa_r+0xa96>
80006340:	33 98       	mov	r8,57
80006342:	0a c8       	st.b	r5++,r8
80006344:	c6 78       	rjmp	80006412 <_dtoa_r+0xb62>
80006346:	2f f0       	sub	r0,-1
80006348:	0a c0       	st.b	r5++,r0
8000634a:	c7 58       	rjmp	80006434 <_dtoa_r+0xb84>
8000634c:	0a c0       	st.b	r5++,r0
8000634e:	40 9a       	lddsp	r10,sp[0x24]
80006350:	40 e9       	lddsp	r9,sp[0x38]
80006352:	12 3a       	cp.w	r10,r9
80006354:	c4 30       	breq	800063da <_dtoa_r+0xb2a>
80006356:	06 9b       	mov	r11,r3
80006358:	30 09       	mov	r9,0
8000635a:	30 aa       	mov	r10,10
8000635c:	0e 9c       	mov	r12,r7
8000635e:	e0 a0 09 61 	rcall	80007620 <__multadd>
80006362:	40 48       	lddsp	r8,sp[0x10]
80006364:	18 93       	mov	r3,r12
80006366:	08 38       	cp.w	r8,r4
80006368:	c0 91       	brne	8000637a <_dtoa_r+0xaca>
8000636a:	10 9b       	mov	r11,r8
8000636c:	30 09       	mov	r9,0
8000636e:	30 aa       	mov	r10,10
80006370:	0e 9c       	mov	r12,r7
80006372:	e0 a0 09 57 	rcall	80007620 <__multadd>
80006376:	50 4c       	stdsp	sp[0x10],r12
80006378:	c0 e8       	rjmp	80006394 <_dtoa_r+0xae4>
8000637a:	40 4b       	lddsp	r11,sp[0x10]
8000637c:	30 09       	mov	r9,0
8000637e:	30 aa       	mov	r10,10
80006380:	0e 9c       	mov	r12,r7
80006382:	e0 a0 09 4f 	rcall	80007620 <__multadd>
80006386:	08 9b       	mov	r11,r4
80006388:	50 4c       	stdsp	sp[0x10],r12
8000638a:	30 09       	mov	r9,0
8000638c:	30 aa       	mov	r10,10
8000638e:	0e 9c       	mov	r12,r7
80006390:	e0 a0 09 48 	rcall	80007620 <__multadd>
80006394:	18 94       	mov	r4,r12
80006396:	40 9c       	lddsp	r12,sp[0x24]
80006398:	2f fc       	sub	r12,-1
8000639a:	50 9c       	stdsp	sp[0x24],r12
8000639c:	c7 9b       	rjmp	8000628e <_dtoa_r+0x9de>
8000639e:	30 18       	mov	r8,1
800063a0:	06 90       	mov	r0,r3
800063a2:	40 85       	lddsp	r5,sp[0x20]
800063a4:	08 93       	mov	r3,r4
800063a6:	0c 94       	mov	r4,r6
800063a8:	10 96       	mov	r6,r8
800063aa:	04 9b       	mov	r11,r2
800063ac:	00 9c       	mov	r12,r0
800063ae:	fe b0 f9 f1 	rcall	80005790 <quorem>
800063b2:	2d 0c       	sub	r12,-48
800063b4:	0a cc       	st.b	r5++,r12
800063b6:	02 36       	cp.w	r6,r1
800063b8:	c0 a4       	brge	800063cc <_dtoa_r+0xb1c>
800063ba:	00 9b       	mov	r11,r0
800063bc:	30 09       	mov	r9,0
800063be:	30 aa       	mov	r10,10
800063c0:	0e 9c       	mov	r12,r7
800063c2:	2f f6       	sub	r6,-1
800063c4:	e0 a0 09 2e 	rcall	80007620 <__multadd>
800063c8:	18 90       	mov	r0,r12
800063ca:	cf 0b       	rjmp	800063aa <_dtoa_r+0xafa>
800063cc:	08 96       	mov	r6,r4
800063ce:	30 0b       	mov	r11,0
800063d0:	06 94       	mov	r4,r3
800063d2:	50 4b       	stdsp	sp[0x10],r11
800063d4:	00 93       	mov	r3,r0
800063d6:	18 90       	mov	r0,r12
800063d8:	c0 28       	rjmp	800063dc <_dtoa_r+0xb2c>
800063da:	40 26       	lddsp	r6,sp[0x8]
800063dc:	06 9b       	mov	r11,r3
800063de:	30 1a       	mov	r10,1
800063e0:	0e 9c       	mov	r12,r7
800063e2:	e0 a0 08 53 	rcall	80007488 <__lshift>
800063e6:	04 9b       	mov	r11,r2
800063e8:	18 93       	mov	r3,r12
800063ea:	e0 a0 07 2b 	rcall	80007240 <__mcmp>
800063ee:	e0 89 00 12 	brgt	80006412 <_dtoa_r+0xb62>
800063f2:	c1 b1       	brne	80006428 <_dtoa_r+0xb78>
800063f4:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800063f8:	c0 d1       	brne	80006412 <_dtoa_r+0xb62>
800063fa:	c1 78       	rjmp	80006428 <_dtoa_r+0xb78>
800063fc:	40 89       	lddsp	r9,sp[0x20]
800063fe:	12 38       	cp.w	r8,r9
80006400:	c0 30       	breq	80006406 <_dtoa_r+0xb56>
80006402:	10 95       	mov	r5,r8
80006404:	c0 88       	rjmp	80006414 <_dtoa_r+0xb64>
80006406:	2f f6       	sub	r6,-1
80006408:	50 66       	stdsp	sp[0x18],r6
8000640a:	33 18       	mov	r8,49
8000640c:	40 8c       	lddsp	r12,sp[0x20]
8000640e:	b8 88       	st.b	r12[0x0],r8
80006410:	c1 38       	rjmp	80006436 <_dtoa_r+0xb86>
80006412:	33 9a       	mov	r10,57
80006414:	0a 98       	mov	r8,r5
80006416:	11 79       	ld.ub	r9,--r8
80006418:	f4 09 18 00 	cp.b	r9,r10
8000641c:	cf 00       	breq	800063fc <_dtoa_r+0xb4c>
8000641e:	2f f9       	sub	r9,-1
80006420:	b0 89       	st.b	r8[0x0],r9
80006422:	c0 98       	rjmp	80006434 <_dtoa_r+0xb84>
80006424:	10 95       	mov	r5,r8
80006426:	c0 28       	rjmp	8000642a <_dtoa_r+0xb7a>
80006428:	33 09       	mov	r9,48
8000642a:	0a 98       	mov	r8,r5
8000642c:	11 7a       	ld.ub	r10,--r8
8000642e:	f2 0a 18 00 	cp.b	r10,r9
80006432:	cf 90       	breq	80006424 <_dtoa_r+0xb74>
80006434:	50 66       	stdsp	sp[0x18],r6
80006436:	04 9b       	mov	r11,r2
80006438:	0e 9c       	mov	r12,r7
8000643a:	e0 a0 07 1d 	rcall	80007274 <_Bfree>
8000643e:	58 04       	cp.w	r4,0
80006440:	c1 20       	breq	80006464 <_dtoa_r+0xbb4>
80006442:	40 4b       	lddsp	r11,sp[0x10]
80006444:	08 3b       	cp.w	r11,r4
80006446:	5f 19       	srne	r9
80006448:	58 0b       	cp.w	r11,0
8000644a:	5f 18       	srne	r8
8000644c:	f3 e8 00 08 	and	r8,r9,r8
80006450:	c0 40       	breq	80006458 <_dtoa_r+0xba8>
80006452:	0e 9c       	mov	r12,r7
80006454:	e0 a0 07 10 	rcall	80007274 <_Bfree>
80006458:	08 9b       	mov	r11,r4
8000645a:	0e 9c       	mov	r12,r7
8000645c:	e0 a0 07 0c 	rcall	80007274 <_Bfree>
80006460:	c0 28       	rjmp	80006464 <_dtoa_r+0xbb4>
80006462:	50 66       	stdsp	sp[0x18],r6
80006464:	0e 9c       	mov	r12,r7
80006466:	06 9b       	mov	r11,r3
80006468:	e0 a0 07 06 	rcall	80007274 <_Bfree>
8000646c:	30 08       	mov	r8,0
8000646e:	aa 88       	st.b	r5[0x0],r8
80006470:	40 68       	lddsp	r8,sp[0x18]
80006472:	41 5a       	lddsp	r10,sp[0x54]
80006474:	2f f8       	sub	r8,-1
80006476:	41 29       	lddsp	r9,sp[0x48]
80006478:	95 08       	st.w	r10[0x0],r8
8000647a:	40 8c       	lddsp	r12,sp[0x20]
8000647c:	58 09       	cp.w	r9,0
8000647e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80006482:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80006486:	2e 6d       	sub	sp,-104
80006488:	d8 32       	popm	r0-r7,pc
8000648a:	d7 03       	nop

8000648c <_fflush_r>:
8000648c:	d4 21       	pushm	r4-r7,lr
8000648e:	16 97       	mov	r7,r11
80006490:	18 96       	mov	r6,r12
80006492:	76 48       	ld.w	r8,r11[0x10]
80006494:	58 08       	cp.w	r8,0
80006496:	c7 f0       	breq	80006594 <_fflush_r+0x108>
80006498:	58 0c       	cp.w	r12,0
8000649a:	c0 50       	breq	800064a4 <_fflush_r+0x18>
8000649c:	78 68       	ld.w	r8,r12[0x18]
8000649e:	58 08       	cp.w	r8,0
800064a0:	c0 21       	brne	800064a4 <_fflush_r+0x18>
800064a2:	cc dc       	rcall	8000663c <__sinit>
800064a4:	fe c8 d0 f8 	sub	r8,pc,-12040
800064a8:	10 37       	cp.w	r7,r8
800064aa:	c0 31       	brne	800064b0 <_fflush_r+0x24>
800064ac:	6c 07       	ld.w	r7,r6[0x0]
800064ae:	c0 c8       	rjmp	800064c6 <_fflush_r+0x3a>
800064b0:	fe c8 d0 e4 	sub	r8,pc,-12060
800064b4:	10 37       	cp.w	r7,r8
800064b6:	c0 31       	brne	800064bc <_fflush_r+0x30>
800064b8:	6c 17       	ld.w	r7,r6[0x4]
800064ba:	c0 68       	rjmp	800064c6 <_fflush_r+0x3a>
800064bc:	fe c8 d0 d0 	sub	r8,pc,-12080
800064c0:	10 37       	cp.w	r7,r8
800064c2:	ed f7 00 02 	ld.weq	r7,r6[0x8]
800064c6:	8e 6a       	ld.sh	r10,r7[0xc]
800064c8:	14 98       	mov	r8,r10
800064ca:	ed ba 00 03 	bld	r10,0x3
800064ce:	c4 20       	breq	80006552 <_fflush_r+0xc6>
800064d0:	ab ba       	sbr	r10,0xb
800064d2:	ae 6a       	st.h	r7[0xc],r10
800064d4:	6e 18       	ld.w	r8,r7[0x4]
800064d6:	58 08       	cp.w	r8,0
800064d8:	e0 89 00 06 	brgt	800064e4 <_fflush_r+0x58>
800064dc:	6f 08       	ld.w	r8,r7[0x40]
800064de:	58 08       	cp.w	r8,0
800064e0:	e0 8a 00 5a 	brle	80006594 <_fflush_r+0x108>
800064e4:	6e b8       	ld.w	r8,r7[0x2c]
800064e6:	58 08       	cp.w	r8,0
800064e8:	c5 60       	breq	80006594 <_fflush_r+0x108>
800064ea:	e2 1a 10 00 	andl	r10,0x1000,COH
800064ee:	c0 30       	breq	800064f4 <_fflush_r+0x68>
800064f0:	6f 55       	ld.w	r5,r7[0x54]
800064f2:	c0 f8       	rjmp	80006510 <_fflush_r+0x84>
800064f4:	30 19       	mov	r9,1
800064f6:	6e 8b       	ld.w	r11,r7[0x20]
800064f8:	0c 9c       	mov	r12,r6
800064fa:	5d 18       	icall	r8
800064fc:	18 95       	mov	r5,r12
800064fe:	5b fc       	cp.w	r12,-1
80006500:	c0 81       	brne	80006510 <_fflush_r+0x84>
80006502:	6c 38       	ld.w	r8,r6[0xc]
80006504:	59 d8       	cp.w	r8,29
80006506:	c4 70       	breq	80006594 <_fflush_r+0x108>
80006508:	8e 68       	ld.sh	r8,r7[0xc]
8000650a:	a7 a8       	sbr	r8,0x6
8000650c:	ae 68       	st.h	r7[0xc],r8
8000650e:	d8 22       	popm	r4-r7,pc
80006510:	8e 68       	ld.sh	r8,r7[0xc]
80006512:	ed b8 00 02 	bld	r8,0x2
80006516:	c0 91       	brne	80006528 <_fflush_r+0x9c>
80006518:	6e 18       	ld.w	r8,r7[0x4]
8000651a:	10 15       	sub	r5,r8
8000651c:	6e d8       	ld.w	r8,r7[0x34]
8000651e:	58 08       	cp.w	r8,0
80006520:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80006524:	eb d8 e1 15 	subne	r5,r5,r8
80006528:	6e b8       	ld.w	r8,r7[0x2c]
8000652a:	0c 9c       	mov	r12,r6
8000652c:	30 09       	mov	r9,0
8000652e:	0a 9a       	mov	r10,r5
80006530:	6e 8b       	ld.w	r11,r7[0x20]
80006532:	5d 18       	icall	r8
80006534:	8e 68       	ld.sh	r8,r7[0xc]
80006536:	0a 3c       	cp.w	r12,r5
80006538:	c2 61       	brne	80006584 <_fflush_r+0xf8>
8000653a:	ab d8       	cbr	r8,0xb
8000653c:	30 0c       	mov	r12,0
8000653e:	6e 49       	ld.w	r9,r7[0x10]
80006540:	ae 68       	st.h	r7[0xc],r8
80006542:	8f 1c       	st.w	r7[0x4],r12
80006544:	8f 09       	st.w	r7[0x0],r9
80006546:	ed b8 00 0c 	bld	r8,0xc
8000654a:	c2 51       	brne	80006594 <_fflush_r+0x108>
8000654c:	ef 45 00 54 	st.w	r7[84],r5
80006550:	d8 22       	popm	r4-r7,pc
80006552:	6e 45       	ld.w	r5,r7[0x10]
80006554:	58 05       	cp.w	r5,0
80006556:	c1 f0       	breq	80006594 <_fflush_r+0x108>
80006558:	6e 04       	ld.w	r4,r7[0x0]
8000655a:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
8000655e:	8f 05       	st.w	r7[0x0],r5
80006560:	f9 b8 01 00 	movne	r8,0
80006564:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80006568:	0a 14       	sub	r4,r5
8000656a:	8f 28       	st.w	r7[0x8],r8
8000656c:	c1 18       	rjmp	8000658e <_fflush_r+0x102>
8000656e:	08 99       	mov	r9,r4
80006570:	0a 9a       	mov	r10,r5
80006572:	6e a8       	ld.w	r8,r7[0x28]
80006574:	6e 8b       	ld.w	r11,r7[0x20]
80006576:	0c 9c       	mov	r12,r6
80006578:	5d 18       	icall	r8
8000657a:	18 14       	sub	r4,r12
8000657c:	58 0c       	cp.w	r12,0
8000657e:	e0 89 00 07 	brgt	8000658c <_fflush_r+0x100>
80006582:	8e 68       	ld.sh	r8,r7[0xc]
80006584:	a7 a8       	sbr	r8,0x6
80006586:	3f fc       	mov	r12,-1
80006588:	ae 68       	st.h	r7[0xc],r8
8000658a:	d8 22       	popm	r4-r7,pc
8000658c:	18 05       	add	r5,r12
8000658e:	58 04       	cp.w	r4,0
80006590:	fe 99 ff ef 	brgt	8000656e <_fflush_r+0xe2>
80006594:	d8 2a       	popm	r4-r7,pc,r12=0
80006596:	d7 03       	nop

80006598 <__sfp_lock_acquire>:
80006598:	5e fc       	retal	r12

8000659a <__sfp_lock_release>:
8000659a:	5e fc       	retal	r12

8000659c <_cleanup_r>:
8000659c:	d4 01       	pushm	lr
8000659e:	fe cb e8 6a 	sub	r11,pc,-6038
800065a2:	e0 a0 02 fd 	rcall	80006b9c <_fwalk>
800065a6:	d8 02       	popm	pc

800065a8 <__sfmoreglue>:
800065a8:	d4 21       	pushm	r4-r7,lr
800065aa:	16 95       	mov	r5,r11
800065ac:	f6 06 10 5c 	mul	r6,r11,92
800065b0:	ec cb ff f4 	sub	r11,r6,-12
800065b4:	e0 a0 03 84 	rcall	80006cbc <_malloc_r>
800065b8:	18 97       	mov	r7,r12
800065ba:	c0 90       	breq	800065cc <__sfmoreglue+0x24>
800065bc:	99 15       	st.w	r12[0x4],r5
800065be:	30 0b       	mov	r11,0
800065c0:	2f 4c       	sub	r12,-12
800065c2:	0c 9a       	mov	r10,r6
800065c4:	8f 2c       	st.w	r7[0x8],r12
800065c6:	8f 0b       	st.w	r7[0x0],r11
800065c8:	e0 a0 05 bc 	rcall	80007140 <memset>
800065cc:	0e 9c       	mov	r12,r7
800065ce:	d8 22       	popm	r4-r7,pc

800065d0 <__sfp>:
800065d0:	d4 21       	pushm	r4-r7,lr
800065d2:	fe c8 d6 0e 	sub	r8,pc,-10738
800065d6:	18 96       	mov	r6,r12
800065d8:	70 07       	ld.w	r7,r8[0x0]
800065da:	6e 68       	ld.w	r8,r7[0x18]
800065dc:	58 08       	cp.w	r8,0
800065de:	c0 31       	brne	800065e4 <__sfp+0x14>
800065e0:	0e 9c       	mov	r12,r7
800065e2:	c2 dc       	rcall	8000663c <__sinit>
800065e4:	ee c7 ff 28 	sub	r7,r7,-216
800065e8:	30 05       	mov	r5,0
800065ea:	6e 2c       	ld.w	r12,r7[0x8]
800065ec:	6e 18       	ld.w	r8,r7[0x4]
800065ee:	c0 68       	rjmp	800065fa <__sfp+0x2a>
800065f0:	98 69       	ld.sh	r9,r12[0xc]
800065f2:	ea 09 19 00 	cp.h	r9,r5
800065f6:	c1 10       	breq	80006618 <__sfp+0x48>
800065f8:	2a 4c       	sub	r12,-92
800065fa:	20 18       	sub	r8,1
800065fc:	cf a7       	brpl	800065f0 <__sfp+0x20>
800065fe:	6e 08       	ld.w	r8,r7[0x0]
80006600:	58 08       	cp.w	r8,0
80006602:	c0 61       	brne	8000660e <__sfp+0x3e>
80006604:	30 4b       	mov	r11,4
80006606:	0c 9c       	mov	r12,r6
80006608:	cd 0f       	rcall	800065a8 <__sfmoreglue>
8000660a:	8f 0c       	st.w	r7[0x0],r12
8000660c:	c0 30       	breq	80006612 <__sfp+0x42>
8000660e:	6e 07       	ld.w	r7,r7[0x0]
80006610:	ce db       	rjmp	800065ea <__sfp+0x1a>
80006612:	30 c8       	mov	r8,12
80006614:	8d 38       	st.w	r6[0xc],r8
80006616:	d8 22       	popm	r4-r7,pc
80006618:	30 08       	mov	r8,0
8000661a:	f9 48 00 4c 	st.w	r12[76],r8
8000661e:	99 08       	st.w	r12[0x0],r8
80006620:	99 28       	st.w	r12[0x8],r8
80006622:	99 18       	st.w	r12[0x4],r8
80006624:	99 48       	st.w	r12[0x10],r8
80006626:	99 58       	st.w	r12[0x14],r8
80006628:	99 68       	st.w	r12[0x18],r8
8000662a:	99 d8       	st.w	r12[0x34],r8
8000662c:	99 e8       	st.w	r12[0x38],r8
8000662e:	f9 48 00 48 	st.w	r12[72],r8
80006632:	3f f8       	mov	r8,-1
80006634:	b8 78       	st.h	r12[0xe],r8
80006636:	30 18       	mov	r8,1
80006638:	b8 68       	st.h	r12[0xc],r8
8000663a:	d8 22       	popm	r4-r7,pc

8000663c <__sinit>:
8000663c:	d4 21       	pushm	r4-r7,lr
8000663e:	18 96       	mov	r6,r12
80006640:	78 67       	ld.w	r7,r12[0x18]
80006642:	58 07       	cp.w	r7,0
80006644:	c4 91       	brne	800066d6 <__sinit+0x9a>
80006646:	fe c8 00 aa 	sub	r8,pc,170
8000664a:	30 15       	mov	r5,1
8000664c:	99 a8       	st.w	r12[0x28],r8
8000664e:	f9 47 00 d8 	st.w	r12[216],r7
80006652:	f9 47 00 dc 	st.w	r12[220],r7
80006656:	f9 47 00 e0 	st.w	r12[224],r7
8000665a:	99 65       	st.w	r12[0x18],r5
8000665c:	cb af       	rcall	800065d0 <__sfp>
8000665e:	8d 0c       	st.w	r6[0x0],r12
80006660:	0c 9c       	mov	r12,r6
80006662:	cb 7f       	rcall	800065d0 <__sfp>
80006664:	8d 1c       	st.w	r6[0x4],r12
80006666:	0c 9c       	mov	r12,r6
80006668:	cb 4f       	rcall	800065d0 <__sfp>
8000666a:	6c 09       	ld.w	r9,r6[0x0]
8000666c:	30 48       	mov	r8,4
8000666e:	93 07       	st.w	r9[0x0],r7
80006670:	b2 68       	st.h	r9[0xc],r8
80006672:	93 17       	st.w	r9[0x4],r7
80006674:	93 27       	st.w	r9[0x8],r7
80006676:	6c 18       	ld.w	r8,r6[0x4]
80006678:	b2 77       	st.h	r9[0xe],r7
8000667a:	93 47       	st.w	r9[0x10],r7
8000667c:	93 57       	st.w	r9[0x14],r7
8000667e:	93 67       	st.w	r9[0x18],r7
80006680:	93 89       	st.w	r9[0x20],r9
80006682:	91 07       	st.w	r8[0x0],r7
80006684:	91 17       	st.w	r8[0x4],r7
80006686:	91 27       	st.w	r8[0x8],r7
80006688:	fe ce eb e4 	sub	lr,pc,-5148
8000668c:	fe cb ec 14 	sub	r11,pc,-5100
80006690:	93 9e       	st.w	r9[0x24],lr
80006692:	93 ab       	st.w	r9[0x28],r11
80006694:	fe ca ec 3c 	sub	r10,pc,-5060
80006698:	fe c4 ec 48 	sub	r4,pc,-5048
8000669c:	93 ba       	st.w	r9[0x2c],r10
8000669e:	93 c4       	st.w	r9[0x30],r4
800066a0:	30 99       	mov	r9,9
800066a2:	b0 69       	st.h	r8[0xc],r9
800066a4:	b0 75       	st.h	r8[0xe],r5
800066a6:	91 c4       	st.w	r8[0x30],r4
800066a8:	91 47       	st.w	r8[0x10],r7
800066aa:	91 57       	st.w	r8[0x14],r7
800066ac:	91 67       	st.w	r8[0x18],r7
800066ae:	91 88       	st.w	r8[0x20],r8
800066b0:	91 9e       	st.w	r8[0x24],lr
800066b2:	91 ab       	st.w	r8[0x28],r11
800066b4:	91 ba       	st.w	r8[0x2c],r10
800066b6:	8d 2c       	st.w	r6[0x8],r12
800066b8:	31 28       	mov	r8,18
800066ba:	99 07       	st.w	r12[0x0],r7
800066bc:	b8 68       	st.h	r12[0xc],r8
800066be:	99 17       	st.w	r12[0x4],r7
800066c0:	99 27       	st.w	r12[0x8],r7
800066c2:	30 28       	mov	r8,2
800066c4:	b8 78       	st.h	r12[0xe],r8
800066c6:	99 c4       	st.w	r12[0x30],r4
800066c8:	99 67       	st.w	r12[0x18],r7
800066ca:	99 9e       	st.w	r12[0x24],lr
800066cc:	99 ab       	st.w	r12[0x28],r11
800066ce:	99 ba       	st.w	r12[0x2c],r10
800066d0:	99 47       	st.w	r12[0x10],r7
800066d2:	99 57       	st.w	r12[0x14],r7
800066d4:	99 8c       	st.w	r12[0x20],r12
800066d6:	d8 22       	popm	r4-r7,pc

800066d8 <_malloc_trim_r>:
800066d8:	d4 21       	pushm	r4-r7,lr
800066da:	16 95       	mov	r5,r11
800066dc:	18 97       	mov	r7,r12
800066de:	e0 a0 05 38 	rcall	8000714e <__malloc_lock>
800066e2:	e0 64 01 04 	mov	r4,260
800066e6:	68 28       	ld.w	r8,r4[0x8]
800066e8:	70 16       	ld.w	r6,r8[0x4]
800066ea:	e0 16 ff fc 	andl	r6,0xfffc
800066ee:	ec c8 ff 91 	sub	r8,r6,-111
800066f2:	f0 05 01 05 	sub	r5,r8,r5
800066f6:	e0 15 ff 80 	andl	r5,0xff80
800066fa:	ea c5 00 80 	sub	r5,r5,128
800066fe:	e0 45 00 7f 	cp.w	r5,127
80006702:	e0 8a 00 25 	brle	8000674c <_malloc_trim_r+0x74>
80006706:	30 0b       	mov	r11,0
80006708:	0e 9c       	mov	r12,r7
8000670a:	e0 a0 09 93 	rcall	80007a30 <_sbrk_r>
8000670e:	68 28       	ld.w	r8,r4[0x8]
80006710:	0c 08       	add	r8,r6
80006712:	10 3c       	cp.w	r12,r8
80006714:	c1 c1       	brne	8000674c <_malloc_trim_r+0x74>
80006716:	ea 0b 11 00 	rsub	r11,r5,0
8000671a:	0e 9c       	mov	r12,r7
8000671c:	e0 a0 09 8a 	rcall	80007a30 <_sbrk_r>
80006720:	5b fc       	cp.w	r12,-1
80006722:	c1 91       	brne	80006754 <_malloc_trim_r+0x7c>
80006724:	30 0b       	mov	r11,0
80006726:	0e 9c       	mov	r12,r7
80006728:	e0 a0 09 84 	rcall	80007a30 <_sbrk_r>
8000672c:	68 28       	ld.w	r8,r4[0x8]
8000672e:	f8 08 01 09 	sub	r9,r12,r8
80006732:	58 f9       	cp.w	r9,15
80006734:	e0 8a 00 0c 	brle	8000674c <_malloc_trim_r+0x74>
80006738:	a1 a9       	sbr	r9,0x0
8000673a:	91 19       	st.w	r8[0x4],r9
8000673c:	e0 68 05 10 	mov	r8,1296
80006740:	70 09       	ld.w	r9,r8[0x0]
80006742:	e0 68 06 34 	mov	r8,1588
80006746:	f8 09 01 09 	sub	r9,r12,r9
8000674a:	91 09       	st.w	r8[0x0],r9
8000674c:	0e 9c       	mov	r12,r7
8000674e:	e0 a0 05 01 	rcall	80007150 <__malloc_unlock>
80006752:	d8 2a       	popm	r4-r7,pc,r12=0
80006754:	68 28       	ld.w	r8,r4[0x8]
80006756:	0a 16       	sub	r6,r5
80006758:	a1 a6       	sbr	r6,0x0
8000675a:	91 16       	st.w	r8[0x4],r6
8000675c:	e0 68 06 34 	mov	r8,1588
80006760:	70 09       	ld.w	r9,r8[0x0]
80006762:	0a 19       	sub	r9,r5
80006764:	0e 9c       	mov	r12,r7
80006766:	91 09       	st.w	r8[0x0],r9
80006768:	e0 a0 04 f4 	rcall	80007150 <__malloc_unlock>
8000676c:	da 2a       	popm	r4-r7,pc,r12=1
8000676e:	d7 03       	nop

80006770 <_free_r>:
80006770:	d4 21       	pushm	r4-r7,lr
80006772:	16 96       	mov	r6,r11
80006774:	18 97       	mov	r7,r12
80006776:	58 0b       	cp.w	r11,0
80006778:	e0 80 00 c0 	breq	800068f8 <_free_r+0x188>
8000677c:	e0 a0 04 e9 	rcall	8000714e <__malloc_lock>
80006780:	20 86       	sub	r6,8
80006782:	e0 6a 01 04 	mov	r10,260
80006786:	6c 18       	ld.w	r8,r6[0x4]
80006788:	74 2e       	ld.w	lr,r10[0x8]
8000678a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000678e:	a1 c8       	cbr	r8,0x0
80006790:	ec 08 00 09 	add	r9,r6,r8
80006794:	72 1b       	ld.w	r11,r9[0x4]
80006796:	e0 1b ff fc 	andl	r11,0xfffc
8000679a:	1c 39       	cp.w	r9,lr
8000679c:	c1 e1       	brne	800067d8 <_free_r+0x68>
8000679e:	f6 08 00 08 	add	r8,r11,r8
800067a2:	58 0c       	cp.w	r12,0
800067a4:	c0 81       	brne	800067b4 <_free_r+0x44>
800067a6:	6c 09       	ld.w	r9,r6[0x0]
800067a8:	12 16       	sub	r6,r9
800067aa:	12 08       	add	r8,r9
800067ac:	6c 3b       	ld.w	r11,r6[0xc]
800067ae:	6c 29       	ld.w	r9,r6[0x8]
800067b0:	97 29       	st.w	r11[0x8],r9
800067b2:	93 3b       	st.w	r9[0xc],r11
800067b4:	10 99       	mov	r9,r8
800067b6:	95 26       	st.w	r10[0x8],r6
800067b8:	a1 a9       	sbr	r9,0x0
800067ba:	8d 19       	st.w	r6[0x4],r9
800067bc:	e0 69 05 0c 	mov	r9,1292
800067c0:	72 09       	ld.w	r9,r9[0x0]
800067c2:	12 38       	cp.w	r8,r9
800067c4:	c0 63       	brcs	800067d0 <_free_r+0x60>
800067c6:	e0 68 06 30 	mov	r8,1584
800067ca:	0e 9c       	mov	r12,r7
800067cc:	70 0b       	ld.w	r11,r8[0x0]
800067ce:	c8 5f       	rcall	800066d8 <_malloc_trim_r>
800067d0:	0e 9c       	mov	r12,r7
800067d2:	e0 a0 04 bf 	rcall	80007150 <__malloc_unlock>
800067d6:	d8 22       	popm	r4-r7,pc
800067d8:	93 1b       	st.w	r9[0x4],r11
800067da:	58 0c       	cp.w	r12,0
800067dc:	c0 30       	breq	800067e2 <_free_r+0x72>
800067de:	30 0c       	mov	r12,0
800067e0:	c1 08       	rjmp	80006800 <_free_r+0x90>
800067e2:	6c 0e       	ld.w	lr,r6[0x0]
800067e4:	f4 c5 ff f8 	sub	r5,r10,-8
800067e8:	1c 16       	sub	r6,lr
800067ea:	1c 08       	add	r8,lr
800067ec:	6c 2e       	ld.w	lr,r6[0x8]
800067ee:	0a 3e       	cp.w	lr,r5
800067f0:	f9 bc 00 01 	moveq	r12,1
800067f4:	ed f5 10 03 	ld.wne	r5,r6[0xc]
800067f8:	eb fe 1a 02 	st.wne	r5[0x8],lr
800067fc:	fd f5 1a 03 	st.wne	lr[0xc],r5
80006800:	f2 0b 00 0e 	add	lr,r9,r11
80006804:	7c 1e       	ld.w	lr,lr[0x4]
80006806:	ed be 00 00 	bld	lr,0x0
8000680a:	c1 40       	breq	80006832 <_free_r+0xc2>
8000680c:	16 08       	add	r8,r11
8000680e:	58 0c       	cp.w	r12,0
80006810:	c0 d1       	brne	8000682a <_free_r+0xba>
80006812:	e0 6e 01 04 	mov	lr,260
80006816:	72 2b       	ld.w	r11,r9[0x8]
80006818:	2f 8e       	sub	lr,-8
8000681a:	1c 3b       	cp.w	r11,lr
8000681c:	c0 71       	brne	8000682a <_free_r+0xba>
8000681e:	97 36       	st.w	r11[0xc],r6
80006820:	97 26       	st.w	r11[0x8],r6
80006822:	8d 2b       	st.w	r6[0x8],r11
80006824:	8d 3b       	st.w	r6[0xc],r11
80006826:	30 1c       	mov	r12,1
80006828:	c0 58       	rjmp	80006832 <_free_r+0xc2>
8000682a:	72 2b       	ld.w	r11,r9[0x8]
8000682c:	72 39       	ld.w	r9,r9[0xc]
8000682e:	93 2b       	st.w	r9[0x8],r11
80006830:	97 39       	st.w	r11[0xc],r9
80006832:	10 99       	mov	r9,r8
80006834:	ec 08 09 08 	st.w	r6[r8],r8
80006838:	a1 a9       	sbr	r9,0x0
8000683a:	8d 19       	st.w	r6[0x4],r9
8000683c:	58 0c       	cp.w	r12,0
8000683e:	c5 a1       	brne	800068f2 <_free_r+0x182>
80006840:	e0 48 01 ff 	cp.w	r8,511
80006844:	e0 8b 00 13 	brhi	8000686a <_free_r+0xfa>
80006848:	a3 98       	lsr	r8,0x3
8000684a:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000684e:	72 2b       	ld.w	r11,r9[0x8]
80006850:	8d 39       	st.w	r6[0xc],r9
80006852:	8d 2b       	st.w	r6[0x8],r11
80006854:	97 36       	st.w	r11[0xc],r6
80006856:	93 26       	st.w	r9[0x8],r6
80006858:	a3 48       	asr	r8,0x2
8000685a:	74 19       	ld.w	r9,r10[0x4]
8000685c:	30 1b       	mov	r11,1
8000685e:	f6 08 09 48 	lsl	r8,r11,r8
80006862:	f3 e8 10 08 	or	r8,r9,r8
80006866:	95 18       	st.w	r10[0x4],r8
80006868:	c4 58       	rjmp	800068f2 <_free_r+0x182>
8000686a:	f0 0b 16 09 	lsr	r11,r8,0x9
8000686e:	58 4b       	cp.w	r11,4
80006870:	e0 8b 00 06 	brhi	8000687c <_free_r+0x10c>
80006874:	f0 0b 16 06 	lsr	r11,r8,0x6
80006878:	2c 8b       	sub	r11,-56
8000687a:	c2 08       	rjmp	800068ba <_free_r+0x14a>
8000687c:	59 4b       	cp.w	r11,20
8000687e:	e0 8b 00 04 	brhi	80006886 <_free_r+0x116>
80006882:	2a 5b       	sub	r11,-91
80006884:	c1 b8       	rjmp	800068ba <_free_r+0x14a>
80006886:	e0 4b 00 54 	cp.w	r11,84
8000688a:	e0 8b 00 06 	brhi	80006896 <_free_r+0x126>
8000688e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80006892:	29 2b       	sub	r11,-110
80006894:	c1 38       	rjmp	800068ba <_free_r+0x14a>
80006896:	e0 4b 01 54 	cp.w	r11,340
8000689a:	e0 8b 00 06 	brhi	800068a6 <_free_r+0x136>
8000689e:	f0 0b 16 0f 	lsr	r11,r8,0xf
800068a2:	28 9b       	sub	r11,-119
800068a4:	c0 b8       	rjmp	800068ba <_free_r+0x14a>
800068a6:	e0 4b 05 54 	cp.w	r11,1364
800068aa:	e0 88 00 05 	brls	800068b4 <_free_r+0x144>
800068ae:	37 eb       	mov	r11,126
800068b0:	c0 58       	rjmp	800068ba <_free_r+0x14a>
800068b2:	d7 03       	nop
800068b4:	f0 0b 16 12 	lsr	r11,r8,0x12
800068b8:	28 4b       	sub	r11,-124
800068ba:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
800068be:	78 29       	ld.w	r9,r12[0x8]
800068c0:	18 39       	cp.w	r9,r12
800068c2:	c0 e1       	brne	800068de <_free_r+0x16e>
800068c4:	74 18       	ld.w	r8,r10[0x4]
800068c6:	a3 4b       	asr	r11,0x2
800068c8:	30 1c       	mov	r12,1
800068ca:	f8 0b 09 4b 	lsl	r11,r12,r11
800068ce:	f1 eb 10 0b 	or	r11,r8,r11
800068d2:	12 98       	mov	r8,r9
800068d4:	95 1b       	st.w	r10[0x4],r11
800068d6:	c0 a8       	rjmp	800068ea <_free_r+0x17a>
800068d8:	72 29       	ld.w	r9,r9[0x8]
800068da:	18 39       	cp.w	r9,r12
800068dc:	c0 60       	breq	800068e8 <_free_r+0x178>
800068de:	72 1a       	ld.w	r10,r9[0x4]
800068e0:	e0 1a ff fc 	andl	r10,0xfffc
800068e4:	14 38       	cp.w	r8,r10
800068e6:	cf 93       	brcs	800068d8 <_free_r+0x168>
800068e8:	72 38       	ld.w	r8,r9[0xc]
800068ea:	8d 38       	st.w	r6[0xc],r8
800068ec:	8d 29       	st.w	r6[0x8],r9
800068ee:	93 36       	st.w	r9[0xc],r6
800068f0:	91 26       	st.w	r8[0x8],r6
800068f2:	0e 9c       	mov	r12,r7
800068f4:	e0 a0 04 2e 	rcall	80007150 <__malloc_unlock>
800068f8:	d8 22       	popm	r4-r7,pc
800068fa:	d7 03       	nop

800068fc <__sfvwrite_r>:
800068fc:	d4 31       	pushm	r0-r7,lr
800068fe:	20 3d       	sub	sp,12
80006900:	14 94       	mov	r4,r10
80006902:	18 95       	mov	r5,r12
80006904:	16 97       	mov	r7,r11
80006906:	74 28       	ld.w	r8,r10[0x8]
80006908:	58 08       	cp.w	r8,0
8000690a:	e0 80 01 45 	breq	80006b94 <__sfvwrite_r+0x298>
8000690e:	96 68       	ld.sh	r8,r11[0xc]
80006910:	ed b8 00 03 	bld	r8,0x3
80006914:	c0 41       	brne	8000691c <__sfvwrite_r+0x20>
80006916:	76 48       	ld.w	r8,r11[0x10]
80006918:	58 08       	cp.w	r8,0
8000691a:	c0 c1       	brne	80006932 <__sfvwrite_r+0x36>
8000691c:	0e 9b       	mov	r11,r7
8000691e:	0a 9c       	mov	r12,r5
80006920:	fe b0 f6 ca 	rcall	800056b4 <__swsetup_r>
80006924:	c0 70       	breq	80006932 <__sfvwrite_r+0x36>
80006926:	8e 68       	ld.sh	r8,r7[0xc]
80006928:	a7 a8       	sbr	r8,0x6
8000692a:	ae 68       	st.h	r7[0xc],r8
8000692c:	30 98       	mov	r8,9
8000692e:	8b 38       	st.w	r5[0xc],r8
80006930:	c3 09       	rjmp	80006b90 <__sfvwrite_r+0x294>
80006932:	8e 63       	ld.sh	r3,r7[0xc]
80006934:	68 00       	ld.w	r0,r4[0x0]
80006936:	06 96       	mov	r6,r3
80006938:	e2 16 00 02 	andl	r6,0x2,COH
8000693c:	c2 10       	breq	8000697e <__sfvwrite_r+0x82>
8000693e:	30 03       	mov	r3,0
80006940:	e0 62 04 00 	mov	r2,1024
80006944:	06 96       	mov	r6,r3
80006946:	c0 48       	rjmp	8000694e <__sfvwrite_r+0x52>
80006948:	60 03       	ld.w	r3,r0[0x0]
8000694a:	60 16       	ld.w	r6,r0[0x4]
8000694c:	2f 80       	sub	r0,-8
8000694e:	58 06       	cp.w	r6,0
80006950:	cf c0       	breq	80006948 <__sfvwrite_r+0x4c>
80006952:	e0 46 04 00 	cp.w	r6,1024
80006956:	ec 09 17 80 	movls	r9,r6
8000695a:	e4 09 17 b0 	movhi	r9,r2
8000695e:	06 9a       	mov	r10,r3
80006960:	6e a8       	ld.w	r8,r7[0x28]
80006962:	6e 8b       	ld.w	r11,r7[0x20]
80006964:	0a 9c       	mov	r12,r5
80006966:	5d 18       	icall	r8
80006968:	18 16       	sub	r6,r12
8000696a:	58 0c       	cp.w	r12,0
8000696c:	e0 8a 01 0f 	brle	80006b8a <__sfvwrite_r+0x28e>
80006970:	68 28       	ld.w	r8,r4[0x8]
80006972:	18 18       	sub	r8,r12
80006974:	89 28       	st.w	r4[0x8],r8
80006976:	e0 80 01 0f 	breq	80006b94 <__sfvwrite_r+0x298>
8000697a:	18 03       	add	r3,r12
8000697c:	ce 9b       	rjmp	8000694e <__sfvwrite_r+0x52>
8000697e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80006982:	c0 70       	breq	80006990 <__sfvwrite_r+0x94>
80006984:	50 06       	stdsp	sp[0x0],r6
80006986:	0c 93       	mov	r3,r6
80006988:	0c 91       	mov	r1,r6
8000698a:	50 15       	stdsp	sp[0x4],r5
8000698c:	08 92       	mov	r2,r4
8000698e:	c9 e8       	rjmp	80006aca <__sfvwrite_r+0x1ce>
80006990:	06 96       	mov	r6,r3
80006992:	08 91       	mov	r1,r4
80006994:	c0 48       	rjmp	8000699c <__sfvwrite_r+0xa0>
80006996:	60 03       	ld.w	r3,r0[0x0]
80006998:	60 16       	ld.w	r6,r0[0x4]
8000699a:	2f 80       	sub	r0,-8
8000699c:	58 06       	cp.w	r6,0
8000699e:	cf c0       	breq	80006996 <__sfvwrite_r+0x9a>
800069a0:	8e 68       	ld.sh	r8,r7[0xc]
800069a2:	6e 24       	ld.w	r4,r7[0x8]
800069a4:	10 99       	mov	r9,r8
800069a6:	e2 19 02 00 	andl	r9,0x200,COH
800069aa:	c5 50       	breq	80006a54 <__sfvwrite_r+0x158>
800069ac:	08 36       	cp.w	r6,r4
800069ae:	c4 33       	brcs	80006a34 <__sfvwrite_r+0x138>
800069b0:	10 99       	mov	r9,r8
800069b2:	e2 19 04 80 	andl	r9,0x480,COH
800069b6:	c3 f0       	breq	80006a34 <__sfvwrite_r+0x138>
800069b8:	6e 4b       	ld.w	r11,r7[0x10]
800069ba:	6e 09       	ld.w	r9,r7[0x0]
800069bc:	16 19       	sub	r9,r11
800069be:	50 09       	stdsp	sp[0x0],r9
800069c0:	6e 59       	ld.w	r9,r7[0x14]
800069c2:	10 9c       	mov	r12,r8
800069c4:	f2 09 00 1a 	add	r10,r9,r9<<0x1
800069c8:	30 28       	mov	r8,2
800069ca:	f4 08 0c 08 	divs	r8,r10,r8
800069ce:	fa e9 00 04 	st.d	sp[4],r8
800069d2:	10 94       	mov	r4,r8
800069d4:	40 09       	lddsp	r9,sp[0x0]
800069d6:	e2 1c 04 00 	andl	r12,0x400,COH
800069da:	2f f9       	sub	r9,-1
800069dc:	0c 09       	add	r9,r6
800069de:	12 38       	cp.w	r8,r9
800069e0:	f2 04 17 30 	movlo	r4,r9
800069e4:	58 0c       	cp.w	r12,0
800069e6:	c1 00       	breq	80006a06 <__sfvwrite_r+0x10a>
800069e8:	08 9b       	mov	r11,r4
800069ea:	0a 9c       	mov	r12,r5
800069ec:	c6 8d       	rcall	80006cbc <_malloc_r>
800069ee:	18 92       	mov	r2,r12
800069f0:	c1 40       	breq	80006a18 <__sfvwrite_r+0x11c>
800069f2:	40 0a       	lddsp	r10,sp[0x0]
800069f4:	6e 4b       	ld.w	r11,r7[0x10]
800069f6:	fe b0 e4 79 	rcall	800032e8 <memcpy>
800069fa:	8e 68       	ld.sh	r8,r7[0xc]
800069fc:	e0 18 fb 7f 	andl	r8,0xfb7f
80006a00:	a7 b8       	sbr	r8,0x7
80006a02:	ae 68       	st.h	r7[0xc],r8
80006a04:	c0 d8       	rjmp	80006a1e <__sfvwrite_r+0x122>
80006a06:	08 9a       	mov	r10,r4
80006a08:	0a 9c       	mov	r12,r5
80006a0a:	e0 a0 06 8f 	rcall	80007728 <_realloc_r>
80006a0e:	18 92       	mov	r2,r12
80006a10:	c0 71       	brne	80006a1e <__sfvwrite_r+0x122>
80006a12:	6e 4b       	ld.w	r11,r7[0x10]
80006a14:	0a 9c       	mov	r12,r5
80006a16:	ca de       	rcall	80006770 <_free_r>
80006a18:	30 c8       	mov	r8,12
80006a1a:	8b 38       	st.w	r5[0xc],r8
80006a1c:	cb 78       	rjmp	80006b8a <__sfvwrite_r+0x28e>
80006a1e:	40 0a       	lddsp	r10,sp[0x0]
80006a20:	40 09       	lddsp	r9,sp[0x0]
80006a22:	e8 0a 01 0a 	sub	r10,r4,r10
80006a26:	e4 09 00 08 	add	r8,r2,r9
80006a2a:	8f 54       	st.w	r7[0x14],r4
80006a2c:	8f 2a       	st.w	r7[0x8],r10
80006a2e:	8f 08       	st.w	r7[0x0],r8
80006a30:	8f 42       	st.w	r7[0x10],r2
80006a32:	0c 94       	mov	r4,r6
80006a34:	08 36       	cp.w	r6,r4
80006a36:	ec 04 17 30 	movlo	r4,r6
80006a3a:	06 9b       	mov	r11,r3
80006a3c:	08 9a       	mov	r10,r4
80006a3e:	6e 0c       	ld.w	r12,r7[0x0]
80006a40:	e0 a0 03 61 	rcall	80007102 <memmove>
80006a44:	6e 08       	ld.w	r8,r7[0x0]
80006a46:	08 08       	add	r8,r4
80006a48:	8f 08       	st.w	r7[0x0],r8
80006a4a:	6e 28       	ld.w	r8,r7[0x8]
80006a4c:	08 18       	sub	r8,r4
80006a4e:	0c 94       	mov	r4,r6
80006a50:	8f 28       	st.w	r7[0x8],r8
80006a52:	c3 08       	rjmp	80006ab2 <__sfvwrite_r+0x1b6>
80006a54:	08 36       	cp.w	r6,r4
80006a56:	5f ba       	srhi	r10
80006a58:	6e 0c       	ld.w	r12,r7[0x0]
80006a5a:	6e 48       	ld.w	r8,r7[0x10]
80006a5c:	10 3c       	cp.w	r12,r8
80006a5e:	5f b8       	srhi	r8
80006a60:	f5 e8 00 08 	and	r8,r10,r8
80006a64:	f2 08 18 00 	cp.b	r8,r9
80006a68:	c0 e0       	breq	80006a84 <__sfvwrite_r+0x188>
80006a6a:	06 9b       	mov	r11,r3
80006a6c:	08 9a       	mov	r10,r4
80006a6e:	e0 a0 03 4a 	rcall	80007102 <memmove>
80006a72:	6e 08       	ld.w	r8,r7[0x0]
80006a74:	08 08       	add	r8,r4
80006a76:	0e 9b       	mov	r11,r7
80006a78:	8f 08       	st.w	r7[0x0],r8
80006a7a:	0a 9c       	mov	r12,r5
80006a7c:	fe b0 fd 08 	rcall	8000648c <_fflush_r>
80006a80:	c1 90       	breq	80006ab2 <__sfvwrite_r+0x1b6>
80006a82:	c8 48       	rjmp	80006b8a <__sfvwrite_r+0x28e>
80006a84:	6e 59       	ld.w	r9,r7[0x14]
80006a86:	12 36       	cp.w	r6,r9
80006a88:	c0 a3       	brcs	80006a9c <__sfvwrite_r+0x1a0>
80006a8a:	6e a8       	ld.w	r8,r7[0x28]
80006a8c:	06 9a       	mov	r10,r3
80006a8e:	6e 8b       	ld.w	r11,r7[0x20]
80006a90:	0a 9c       	mov	r12,r5
80006a92:	5d 18       	icall	r8
80006a94:	18 94       	mov	r4,r12
80006a96:	e0 89 00 0e 	brgt	80006ab2 <__sfvwrite_r+0x1b6>
80006a9a:	c7 88       	rjmp	80006b8a <__sfvwrite_r+0x28e>
80006a9c:	0c 9a       	mov	r10,r6
80006a9e:	06 9b       	mov	r11,r3
80006aa0:	e0 a0 03 31 	rcall	80007102 <memmove>
80006aa4:	6e 08       	ld.w	r8,r7[0x0]
80006aa6:	0c 08       	add	r8,r6
80006aa8:	0c 94       	mov	r4,r6
80006aaa:	8f 08       	st.w	r7[0x0],r8
80006aac:	6e 28       	ld.w	r8,r7[0x8]
80006aae:	0c 18       	sub	r8,r6
80006ab0:	8f 28       	st.w	r7[0x8],r8
80006ab2:	62 28       	ld.w	r8,r1[0x8]
80006ab4:	08 18       	sub	r8,r4
80006ab6:	83 28       	st.w	r1[0x8],r8
80006ab8:	c6 e0       	breq	80006b94 <__sfvwrite_r+0x298>
80006aba:	08 16       	sub	r6,r4
80006abc:	08 03       	add	r3,r4
80006abe:	c6 fb       	rjmp	8000699c <__sfvwrite_r+0xa0>
80006ac0:	60 03       	ld.w	r3,r0[0x0]
80006ac2:	60 11       	ld.w	r1,r0[0x4]
80006ac4:	30 08       	mov	r8,0
80006ac6:	2f 80       	sub	r0,-8
80006ac8:	50 08       	stdsp	sp[0x0],r8
80006aca:	58 01       	cp.w	r1,0
80006acc:	cf a0       	breq	80006ac0 <__sfvwrite_r+0x1c4>
80006ace:	40 0a       	lddsp	r10,sp[0x0]
80006ad0:	58 0a       	cp.w	r10,0
80006ad2:	c1 51       	brne	80006afc <__sfvwrite_r+0x200>
80006ad4:	e2 c6 ff ff 	sub	r6,r1,-1
80006ad8:	02 9a       	mov	r10,r1
80006ada:	30 ab       	mov	r11,10
80006adc:	06 9c       	mov	r12,r3
80006ade:	e0 a0 03 07 	rcall	800070ec <memchr>
80006ae2:	f8 c8 ff ff 	sub	r8,r12,-1
80006ae6:	58 0c       	cp.w	r12,0
80006ae8:	f1 d3 e1 16 	subne	r6,r8,r3
80006aec:	f9 b9 01 01 	movne	r9,1
80006af0:	fb f9 1a 00 	st.wne	sp[0x0],r9
80006af4:	f9 b8 00 01 	moveq	r8,1
80006af8:	fb f8 0a 00 	st.weq	sp[0x0],r8
80006afc:	02 36       	cp.w	r6,r1
80006afe:	ec 04 17 80 	movls	r4,r6
80006b02:	e2 04 17 b0 	movhi	r4,r1
80006b06:	6e 59       	ld.w	r9,r7[0x14]
80006b08:	6e 25       	ld.w	r5,r7[0x8]
80006b0a:	f2 05 00 05 	add	r5,r9,r5
80006b0e:	0a 34       	cp.w	r4,r5
80006b10:	5f 9a       	srgt	r10
80006b12:	6e 0c       	ld.w	r12,r7[0x0]
80006b14:	6e 48       	ld.w	r8,r7[0x10]
80006b16:	10 3c       	cp.w	r12,r8
80006b18:	5f b8       	srhi	r8
80006b1a:	f5 e8 00 08 	and	r8,r10,r8
80006b1e:	30 0a       	mov	r10,0
80006b20:	f4 08 18 00 	cp.b	r8,r10
80006b24:	c0 e0       	breq	80006b40 <__sfvwrite_r+0x244>
80006b26:	06 9b       	mov	r11,r3
80006b28:	0a 9a       	mov	r10,r5
80006b2a:	e0 a0 02 ec 	rcall	80007102 <memmove>
80006b2e:	6e 08       	ld.w	r8,r7[0x0]
80006b30:	0a 08       	add	r8,r5
80006b32:	0e 9b       	mov	r11,r7
80006b34:	8f 08       	st.w	r7[0x0],r8
80006b36:	40 1c       	lddsp	r12,sp[0x4]
80006b38:	fe b0 fc aa 	rcall	8000648c <_fflush_r>
80006b3c:	c1 80       	breq	80006b6c <__sfvwrite_r+0x270>
80006b3e:	c2 68       	rjmp	80006b8a <__sfvwrite_r+0x28e>
80006b40:	12 34       	cp.w	r4,r9
80006b42:	c0 a5       	brlt	80006b56 <__sfvwrite_r+0x25a>
80006b44:	6e a8       	ld.w	r8,r7[0x28]
80006b46:	06 9a       	mov	r10,r3
80006b48:	6e 8b       	ld.w	r11,r7[0x20]
80006b4a:	40 1c       	lddsp	r12,sp[0x4]
80006b4c:	5d 18       	icall	r8
80006b4e:	18 95       	mov	r5,r12
80006b50:	e0 89 00 0e 	brgt	80006b6c <__sfvwrite_r+0x270>
80006b54:	c1 b8       	rjmp	80006b8a <__sfvwrite_r+0x28e>
80006b56:	08 9a       	mov	r10,r4
80006b58:	06 9b       	mov	r11,r3
80006b5a:	e0 a0 02 d4 	rcall	80007102 <memmove>
80006b5e:	6e 08       	ld.w	r8,r7[0x0]
80006b60:	08 08       	add	r8,r4
80006b62:	08 95       	mov	r5,r4
80006b64:	8f 08       	st.w	r7[0x0],r8
80006b66:	6e 28       	ld.w	r8,r7[0x8]
80006b68:	08 18       	sub	r8,r4
80006b6a:	8f 28       	st.w	r7[0x8],r8
80006b6c:	0a 16       	sub	r6,r5
80006b6e:	c0 71       	brne	80006b7c <__sfvwrite_r+0x280>
80006b70:	0e 9b       	mov	r11,r7
80006b72:	40 1c       	lddsp	r12,sp[0x4]
80006b74:	fe b0 fc 8c 	rcall	8000648c <_fflush_r>
80006b78:	c0 91       	brne	80006b8a <__sfvwrite_r+0x28e>
80006b7a:	50 06       	stdsp	sp[0x0],r6
80006b7c:	64 28       	ld.w	r8,r2[0x8]
80006b7e:	0a 18       	sub	r8,r5
80006b80:	85 28       	st.w	r2[0x8],r8
80006b82:	c0 90       	breq	80006b94 <__sfvwrite_r+0x298>
80006b84:	0a 11       	sub	r1,r5
80006b86:	0a 03       	add	r3,r5
80006b88:	ca 1b       	rjmp	80006aca <__sfvwrite_r+0x1ce>
80006b8a:	8e 68       	ld.sh	r8,r7[0xc]
80006b8c:	a7 a8       	sbr	r8,0x6
80006b8e:	ae 68       	st.h	r7[0xc],r8
80006b90:	3f fc       	mov	r12,-1
80006b92:	c0 28       	rjmp	80006b96 <__sfvwrite_r+0x29a>
80006b94:	30 0c       	mov	r12,0
80006b96:	2f dd       	sub	sp,-12
80006b98:	d8 32       	popm	r0-r7,pc
80006b9a:	d7 03       	nop

80006b9c <_fwalk>:
80006b9c:	d4 31       	pushm	r0-r7,lr
80006b9e:	30 05       	mov	r5,0
80006ba0:	16 91       	mov	r1,r11
80006ba2:	f8 c7 ff 28 	sub	r7,r12,-216
80006ba6:	0a 92       	mov	r2,r5
80006ba8:	fe b0 fc f8 	rcall	80006598 <__sfp_lock_acquire>
80006bac:	3f f3       	mov	r3,-1
80006bae:	c1 68       	rjmp	80006bda <_fwalk+0x3e>
80006bb0:	6e 26       	ld.w	r6,r7[0x8]
80006bb2:	6e 14       	ld.w	r4,r7[0x4]
80006bb4:	2f 46       	sub	r6,-12
80006bb6:	c0 c8       	rjmp	80006bce <_fwalk+0x32>
80006bb8:	8c 08       	ld.sh	r8,r6[0x0]
80006bba:	e4 08 19 00 	cp.h	r8,r2
80006bbe:	c0 70       	breq	80006bcc <_fwalk+0x30>
80006bc0:	8c 18       	ld.sh	r8,r6[0x2]
80006bc2:	e6 08 19 00 	cp.h	r8,r3
80006bc6:	c0 30       	breq	80006bcc <_fwalk+0x30>
80006bc8:	5d 11       	icall	r1
80006bca:	18 45       	or	r5,r12
80006bcc:	2a 46       	sub	r6,-92
80006bce:	20 14       	sub	r4,1
80006bd0:	ec cc 00 0c 	sub	r12,r6,12
80006bd4:	58 04       	cp.w	r4,0
80006bd6:	cf 14       	brge	80006bb8 <_fwalk+0x1c>
80006bd8:	6e 07       	ld.w	r7,r7[0x0]
80006bda:	58 07       	cp.w	r7,0
80006bdc:	ce a1       	brne	80006bb0 <_fwalk+0x14>
80006bde:	fe b0 fc de 	rcall	8000659a <__sfp_lock_release>
80006be2:	0a 9c       	mov	r12,r5
80006be4:	d8 32       	popm	r0-r7,pc
80006be6:	d7 03       	nop

80006be8 <_localeconv_r>:
80006be8:	fe cc d7 dc 	sub	r12,pc,-10276
80006bec:	5e fc       	retal	r12
80006bee:	d7 03       	nop

80006bf0 <__smakebuf_r>:
80006bf0:	d4 21       	pushm	r4-r7,lr
80006bf2:	20 fd       	sub	sp,60
80006bf4:	96 68       	ld.sh	r8,r11[0xc]
80006bf6:	16 97       	mov	r7,r11
80006bf8:	18 96       	mov	r6,r12
80006bfa:	e2 18 00 02 	andl	r8,0x2,COH
80006bfe:	c3 c1       	brne	80006c76 <__smakebuf_r+0x86>
80006c00:	96 7b       	ld.sh	r11,r11[0xe]
80006c02:	f0 0b 19 00 	cp.h	r11,r8
80006c06:	c0 55       	brlt	80006c10 <__smakebuf_r+0x20>
80006c08:	1a 9a       	mov	r10,sp
80006c0a:	e0 a0 08 9d 	rcall	80007d44 <_fstat_r>
80006c0e:	c0 f4       	brge	80006c2c <__smakebuf_r+0x3c>
80006c10:	8e 65       	ld.sh	r5,r7[0xc]
80006c12:	0a 98       	mov	r8,r5
80006c14:	ab b8       	sbr	r8,0xb
80006c16:	e2 15 00 80 	andl	r5,0x80,COH
80006c1a:	ae 68       	st.h	r7[0xc],r8
80006c1c:	30 04       	mov	r4,0
80006c1e:	e0 68 04 00 	mov	r8,1024
80006c22:	f9 b5 01 40 	movne	r5,64
80006c26:	f0 05 17 00 	moveq	r5,r8
80006c2a:	c1 c8       	rjmp	80006c62 <__smakebuf_r+0x72>
80006c2c:	40 18       	lddsp	r8,sp[0x4]
80006c2e:	e2 18 f0 00 	andl	r8,0xf000,COH
80006c32:	e0 48 20 00 	cp.w	r8,8192
80006c36:	5f 04       	sreq	r4
80006c38:	e0 48 80 00 	cp.w	r8,32768
80006c3c:	c0 e1       	brne	80006c58 <__smakebuf_r+0x68>
80006c3e:	6e b9       	ld.w	r9,r7[0x2c]
80006c40:	fe c8 f1 e8 	sub	r8,pc,-3608
80006c44:	10 39       	cp.w	r9,r8
80006c46:	c0 91       	brne	80006c58 <__smakebuf_r+0x68>
80006c48:	8e 68       	ld.sh	r8,r7[0xc]
80006c4a:	e0 65 04 00 	mov	r5,1024
80006c4e:	ab a8       	sbr	r8,0xa
80006c50:	ef 45 00 50 	st.w	r7[80],r5
80006c54:	ae 68       	st.h	r7[0xc],r8
80006c56:	c0 68       	rjmp	80006c62 <__smakebuf_r+0x72>
80006c58:	8e 68       	ld.sh	r8,r7[0xc]
80006c5a:	e0 65 04 00 	mov	r5,1024
80006c5e:	ab b8       	sbr	r8,0xb
80006c60:	ae 68       	st.h	r7[0xc],r8
80006c62:	0a 9b       	mov	r11,r5
80006c64:	0c 9c       	mov	r12,r6
80006c66:	c2 bc       	rcall	80006cbc <_malloc_r>
80006c68:	8e 68       	ld.sh	r8,r7[0xc]
80006c6a:	c0 d1       	brne	80006c84 <__smakebuf_r+0x94>
80006c6c:	ed b8 00 09 	bld	r8,0x9
80006c70:	c1 b0       	breq	80006ca6 <__smakebuf_r+0xb6>
80006c72:	a1 b8       	sbr	r8,0x1
80006c74:	ae 68       	st.h	r7[0xc],r8
80006c76:	ee c8 ff b9 	sub	r8,r7,-71
80006c7a:	8f 48       	st.w	r7[0x10],r8
80006c7c:	8f 08       	st.w	r7[0x0],r8
80006c7e:	30 18       	mov	r8,1
80006c80:	8f 58       	st.w	r7[0x14],r8
80006c82:	c1 28       	rjmp	80006ca6 <__smakebuf_r+0xb6>
80006c84:	a7 b8       	sbr	r8,0x7
80006c86:	8f 4c       	st.w	r7[0x10],r12
80006c88:	ae 68       	st.h	r7[0xc],r8
80006c8a:	8f 55       	st.w	r7[0x14],r5
80006c8c:	fe c8 06 f0 	sub	r8,pc,1776
80006c90:	8f 0c       	st.w	r7[0x0],r12
80006c92:	8d a8       	st.w	r6[0x28],r8
80006c94:	58 04       	cp.w	r4,0
80006c96:	c0 80       	breq	80006ca6 <__smakebuf_r+0xb6>
80006c98:	8e 7c       	ld.sh	r12,r7[0xe]
80006c9a:	e0 a0 07 47 	rcall	80007b28 <isatty>
80006c9e:	c0 40       	breq	80006ca6 <__smakebuf_r+0xb6>
80006ca0:	8e 68       	ld.sh	r8,r7[0xc]
80006ca2:	a1 a8       	sbr	r8,0x0
80006ca4:	ae 68       	st.h	r7[0xc],r8
80006ca6:	2f 1d       	sub	sp,-60
80006ca8:	d8 22       	popm	r4-r7,pc
80006caa:	d7 03       	nop

80006cac <malloc>:
80006cac:	d4 01       	pushm	lr
80006cae:	e0 68 01 00 	mov	r8,256
80006cb2:	18 9b       	mov	r11,r12
80006cb4:	70 0c       	ld.w	r12,r8[0x0]
80006cb6:	c0 3c       	rcall	80006cbc <_malloc_r>
80006cb8:	d8 02       	popm	pc
80006cba:	d7 03       	nop

80006cbc <_malloc_r>:
80006cbc:	d4 31       	pushm	r0-r7,lr
80006cbe:	f6 c8 ff f5 	sub	r8,r11,-11
80006cc2:	18 95       	mov	r5,r12
80006cc4:	10 97       	mov	r7,r8
80006cc6:	e0 17 ff f8 	andl	r7,0xfff8
80006cca:	59 68       	cp.w	r8,22
80006ccc:	f9 b7 08 10 	movls	r7,16
80006cd0:	16 37       	cp.w	r7,r11
80006cd2:	5f 38       	srlo	r8
80006cd4:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80006cd8:	c0 50       	breq	80006ce2 <_malloc_r+0x26>
80006cda:	30 c8       	mov	r8,12
80006cdc:	99 38       	st.w	r12[0xc],r8
80006cde:	e0 8f 01 f7 	bral	800070cc <_malloc_r+0x410>
80006ce2:	e0 a0 02 36 	rcall	8000714e <__malloc_lock>
80006ce6:	e0 47 01 f7 	cp.w	r7,503
80006cea:	e0 8b 00 1d 	brhi	80006d24 <_malloc_r+0x68>
80006cee:	ee 03 16 03 	lsr	r3,r7,0x3
80006cf2:	e0 68 01 04 	mov	r8,260
80006cf6:	f0 03 00 38 	add	r8,r8,r3<<0x3
80006cfa:	70 36       	ld.w	r6,r8[0xc]
80006cfc:	10 36       	cp.w	r6,r8
80006cfe:	c0 61       	brne	80006d0a <_malloc_r+0x4e>
80006d00:	ec c8 ff f8 	sub	r8,r6,-8
80006d04:	70 36       	ld.w	r6,r8[0xc]
80006d06:	10 36       	cp.w	r6,r8
80006d08:	c0 c0       	breq	80006d20 <_malloc_r+0x64>
80006d0a:	6c 18       	ld.w	r8,r6[0x4]
80006d0c:	e0 18 ff fc 	andl	r8,0xfffc
80006d10:	6c 3a       	ld.w	r10,r6[0xc]
80006d12:	ec 08 00 09 	add	r9,r6,r8
80006d16:	0a 9c       	mov	r12,r5
80006d18:	6c 28       	ld.w	r8,r6[0x8]
80006d1a:	95 28       	st.w	r10[0x8],r8
80006d1c:	91 3a       	st.w	r8[0xc],r10
80006d1e:	c4 78       	rjmp	80006dac <_malloc_r+0xf0>
80006d20:	2f e3       	sub	r3,-2
80006d22:	c4 d8       	rjmp	80006dbc <_malloc_r+0x100>
80006d24:	ee 03 16 09 	lsr	r3,r7,0x9
80006d28:	c0 41       	brne	80006d30 <_malloc_r+0x74>
80006d2a:	ee 03 16 03 	lsr	r3,r7,0x3
80006d2e:	c2 68       	rjmp	80006d7a <_malloc_r+0xbe>
80006d30:	58 43       	cp.w	r3,4
80006d32:	e0 8b 00 06 	brhi	80006d3e <_malloc_r+0x82>
80006d36:	ee 03 16 06 	lsr	r3,r7,0x6
80006d3a:	2c 83       	sub	r3,-56
80006d3c:	c1 f8       	rjmp	80006d7a <_malloc_r+0xbe>
80006d3e:	59 43       	cp.w	r3,20
80006d40:	e0 8b 00 04 	brhi	80006d48 <_malloc_r+0x8c>
80006d44:	2a 53       	sub	r3,-91
80006d46:	c1 a8       	rjmp	80006d7a <_malloc_r+0xbe>
80006d48:	e0 43 00 54 	cp.w	r3,84
80006d4c:	e0 8b 00 06 	brhi	80006d58 <_malloc_r+0x9c>
80006d50:	ee 03 16 0c 	lsr	r3,r7,0xc
80006d54:	29 23       	sub	r3,-110
80006d56:	c1 28       	rjmp	80006d7a <_malloc_r+0xbe>
80006d58:	e0 43 01 54 	cp.w	r3,340
80006d5c:	e0 8b 00 06 	brhi	80006d68 <_malloc_r+0xac>
80006d60:	ee 03 16 0f 	lsr	r3,r7,0xf
80006d64:	28 93       	sub	r3,-119
80006d66:	c0 a8       	rjmp	80006d7a <_malloc_r+0xbe>
80006d68:	e0 43 05 54 	cp.w	r3,1364
80006d6c:	e0 88 00 04 	brls	80006d74 <_malloc_r+0xb8>
80006d70:	37 e3       	mov	r3,126
80006d72:	c0 48       	rjmp	80006d7a <_malloc_r+0xbe>
80006d74:	ee 03 16 12 	lsr	r3,r7,0x12
80006d78:	28 43       	sub	r3,-124
80006d7a:	e0 6a 01 04 	mov	r10,260
80006d7e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80006d82:	74 36       	ld.w	r6,r10[0xc]
80006d84:	c1 98       	rjmp	80006db6 <_malloc_r+0xfa>
80006d86:	6c 19       	ld.w	r9,r6[0x4]
80006d88:	e0 19 ff fc 	andl	r9,0xfffc
80006d8c:	f2 07 01 0b 	sub	r11,r9,r7
80006d90:	58 fb       	cp.w	r11,15
80006d92:	e0 8a 00 04 	brle	80006d9a <_malloc_r+0xde>
80006d96:	20 13       	sub	r3,1
80006d98:	c1 18       	rjmp	80006dba <_malloc_r+0xfe>
80006d9a:	6c 38       	ld.w	r8,r6[0xc]
80006d9c:	58 0b       	cp.w	r11,0
80006d9e:	c0 b5       	brlt	80006db4 <_malloc_r+0xf8>
80006da0:	6c 2a       	ld.w	r10,r6[0x8]
80006da2:	ec 09 00 09 	add	r9,r6,r9
80006da6:	0a 9c       	mov	r12,r5
80006da8:	91 2a       	st.w	r8[0x8],r10
80006daa:	95 38       	st.w	r10[0xc],r8
80006dac:	72 18       	ld.w	r8,r9[0x4]
80006dae:	a1 a8       	sbr	r8,0x0
80006db0:	93 18       	st.w	r9[0x4],r8
80006db2:	cb c8       	rjmp	80006f2a <_malloc_r+0x26e>
80006db4:	10 96       	mov	r6,r8
80006db6:	14 36       	cp.w	r6,r10
80006db8:	ce 71       	brne	80006d86 <_malloc_r+0xca>
80006dba:	2f f3       	sub	r3,-1
80006dbc:	e0 6a 01 04 	mov	r10,260
80006dc0:	f4 cc ff f8 	sub	r12,r10,-8
80006dc4:	78 26       	ld.w	r6,r12[0x8]
80006dc6:	18 36       	cp.w	r6,r12
80006dc8:	c6 c0       	breq	80006ea0 <_malloc_r+0x1e4>
80006dca:	6c 19       	ld.w	r9,r6[0x4]
80006dcc:	e0 19 ff fc 	andl	r9,0xfffc
80006dd0:	f2 07 01 08 	sub	r8,r9,r7
80006dd4:	58 f8       	cp.w	r8,15
80006dd6:	e0 89 00 8f 	brgt	80006ef4 <_malloc_r+0x238>
80006dda:	99 3c       	st.w	r12[0xc],r12
80006ddc:	99 2c       	st.w	r12[0x8],r12
80006dde:	58 08       	cp.w	r8,0
80006de0:	c0 55       	brlt	80006dea <_malloc_r+0x12e>
80006de2:	ec 09 00 09 	add	r9,r6,r9
80006de6:	0a 9c       	mov	r12,r5
80006de8:	ce 2b       	rjmp	80006dac <_malloc_r+0xf0>
80006dea:	e0 49 01 ff 	cp.w	r9,511
80006dee:	e0 8b 00 13 	brhi	80006e14 <_malloc_r+0x158>
80006df2:	a3 99       	lsr	r9,0x3
80006df4:	f4 09 00 38 	add	r8,r10,r9<<0x3
80006df8:	70 2b       	ld.w	r11,r8[0x8]
80006dfa:	8d 38       	st.w	r6[0xc],r8
80006dfc:	8d 2b       	st.w	r6[0x8],r11
80006dfe:	97 36       	st.w	r11[0xc],r6
80006e00:	91 26       	st.w	r8[0x8],r6
80006e02:	a3 49       	asr	r9,0x2
80006e04:	74 18       	ld.w	r8,r10[0x4]
80006e06:	30 1b       	mov	r11,1
80006e08:	f6 09 09 49 	lsl	r9,r11,r9
80006e0c:	f1 e9 10 09 	or	r9,r8,r9
80006e10:	95 19       	st.w	r10[0x4],r9
80006e12:	c4 78       	rjmp	80006ea0 <_malloc_r+0x1e4>
80006e14:	f2 0a 16 09 	lsr	r10,r9,0x9
80006e18:	58 4a       	cp.w	r10,4
80006e1a:	e0 8b 00 07 	brhi	80006e28 <_malloc_r+0x16c>
80006e1e:	f2 0a 16 06 	lsr	r10,r9,0x6
80006e22:	2c 8a       	sub	r10,-56
80006e24:	c2 08       	rjmp	80006e64 <_malloc_r+0x1a8>
80006e26:	d7 03       	nop
80006e28:	59 4a       	cp.w	r10,20
80006e2a:	e0 8b 00 04 	brhi	80006e32 <_malloc_r+0x176>
80006e2e:	2a 5a       	sub	r10,-91
80006e30:	c1 a8       	rjmp	80006e64 <_malloc_r+0x1a8>
80006e32:	e0 4a 00 54 	cp.w	r10,84
80006e36:	e0 8b 00 06 	brhi	80006e42 <_malloc_r+0x186>
80006e3a:	f2 0a 16 0c 	lsr	r10,r9,0xc
80006e3e:	29 2a       	sub	r10,-110
80006e40:	c1 28       	rjmp	80006e64 <_malloc_r+0x1a8>
80006e42:	e0 4a 01 54 	cp.w	r10,340
80006e46:	e0 8b 00 06 	brhi	80006e52 <_malloc_r+0x196>
80006e4a:	f2 0a 16 0f 	lsr	r10,r9,0xf
80006e4e:	28 9a       	sub	r10,-119
80006e50:	c0 a8       	rjmp	80006e64 <_malloc_r+0x1a8>
80006e52:	e0 4a 05 54 	cp.w	r10,1364
80006e56:	e0 88 00 04 	brls	80006e5e <_malloc_r+0x1a2>
80006e5a:	37 ea       	mov	r10,126
80006e5c:	c0 48       	rjmp	80006e64 <_malloc_r+0x1a8>
80006e5e:	f2 0a 16 12 	lsr	r10,r9,0x12
80006e62:	28 4a       	sub	r10,-124
80006e64:	e0 6b 01 04 	mov	r11,260
80006e68:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80006e6c:	68 28       	ld.w	r8,r4[0x8]
80006e6e:	08 38       	cp.w	r8,r4
80006e70:	c0 e1       	brne	80006e8c <_malloc_r+0x1d0>
80006e72:	76 19       	ld.w	r9,r11[0x4]
80006e74:	a3 4a       	asr	r10,0x2
80006e76:	30 1e       	mov	lr,1
80006e78:	fc 0a 09 4a 	lsl	r10,lr,r10
80006e7c:	f3 ea 10 0a 	or	r10,r9,r10
80006e80:	10 99       	mov	r9,r8
80006e82:	97 1a       	st.w	r11[0x4],r10
80006e84:	c0 a8       	rjmp	80006e98 <_malloc_r+0x1dc>
80006e86:	70 28       	ld.w	r8,r8[0x8]
80006e88:	08 38       	cp.w	r8,r4
80006e8a:	c0 60       	breq	80006e96 <_malloc_r+0x1da>
80006e8c:	70 1a       	ld.w	r10,r8[0x4]
80006e8e:	e0 1a ff fc 	andl	r10,0xfffc
80006e92:	14 39       	cp.w	r9,r10
80006e94:	cf 93       	brcs	80006e86 <_malloc_r+0x1ca>
80006e96:	70 39       	ld.w	r9,r8[0xc]
80006e98:	8d 39       	st.w	r6[0xc],r9
80006e9a:	8d 28       	st.w	r6[0x8],r8
80006e9c:	91 36       	st.w	r8[0xc],r6
80006e9e:	93 26       	st.w	r9[0x8],r6
80006ea0:	e6 08 14 02 	asr	r8,r3,0x2
80006ea4:	30 1b       	mov	r11,1
80006ea6:	e0 64 01 04 	mov	r4,260
80006eaa:	f6 08 09 4b 	lsl	r11,r11,r8
80006eae:	68 18       	ld.w	r8,r4[0x4]
80006eb0:	10 3b       	cp.w	r11,r8
80006eb2:	e0 8b 00 69 	brhi	80006f84 <_malloc_r+0x2c8>
80006eb6:	f7 e8 00 09 	and	r9,r11,r8
80006eba:	c0 b1       	brne	80006ed0 <_malloc_r+0x214>
80006ebc:	e0 13 ff fc 	andl	r3,0xfffc
80006ec0:	a1 7b       	lsl	r11,0x1
80006ec2:	2f c3       	sub	r3,-4
80006ec4:	c0 38       	rjmp	80006eca <_malloc_r+0x20e>
80006ec6:	2f c3       	sub	r3,-4
80006ec8:	a1 7b       	lsl	r11,0x1
80006eca:	f7 e8 00 09 	and	r9,r11,r8
80006ece:	cf c0       	breq	80006ec6 <_malloc_r+0x20a>
80006ed0:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80006ed4:	06 92       	mov	r2,r3
80006ed6:	1c 91       	mov	r1,lr
80006ed8:	62 36       	ld.w	r6,r1[0xc]
80006eda:	c2 d8       	rjmp	80006f34 <_malloc_r+0x278>
80006edc:	6c 1a       	ld.w	r10,r6[0x4]
80006ede:	e0 1a ff fc 	andl	r10,0xfffc
80006ee2:	f4 07 01 08 	sub	r8,r10,r7
80006ee6:	58 f8       	cp.w	r8,15
80006ee8:	e0 8a 00 15 	brle	80006f12 <_malloc_r+0x256>
80006eec:	6c 3a       	ld.w	r10,r6[0xc]
80006eee:	6c 29       	ld.w	r9,r6[0x8]
80006ef0:	95 29       	st.w	r10[0x8],r9
80006ef2:	93 3a       	st.w	r9[0xc],r10
80006ef4:	0e 99       	mov	r9,r7
80006ef6:	ec 07 00 07 	add	r7,r6,r7
80006efa:	a1 a9       	sbr	r9,0x0
80006efc:	99 37       	st.w	r12[0xc],r7
80006efe:	99 27       	st.w	r12[0x8],r7
80006f00:	8d 19       	st.w	r6[0x4],r9
80006f02:	ee 08 09 08 	st.w	r7[r8],r8
80006f06:	8f 2c       	st.w	r7[0x8],r12
80006f08:	8f 3c       	st.w	r7[0xc],r12
80006f0a:	a1 a8       	sbr	r8,0x0
80006f0c:	0a 9c       	mov	r12,r5
80006f0e:	8f 18       	st.w	r7[0x4],r8
80006f10:	c0 d8       	rjmp	80006f2a <_malloc_r+0x26e>
80006f12:	6c 39       	ld.w	r9,r6[0xc]
80006f14:	58 08       	cp.w	r8,0
80006f16:	c0 e5       	brlt	80006f32 <_malloc_r+0x276>
80006f18:	ec 0a 00 0a 	add	r10,r6,r10
80006f1c:	74 18       	ld.w	r8,r10[0x4]
80006f1e:	a1 a8       	sbr	r8,0x0
80006f20:	0a 9c       	mov	r12,r5
80006f22:	95 18       	st.w	r10[0x4],r8
80006f24:	6c 28       	ld.w	r8,r6[0x8]
80006f26:	93 28       	st.w	r9[0x8],r8
80006f28:	91 39       	st.w	r8[0xc],r9
80006f2a:	c1 3d       	rcall	80007150 <__malloc_unlock>
80006f2c:	ec cc ff f8 	sub	r12,r6,-8
80006f30:	d8 32       	popm	r0-r7,pc
80006f32:	12 96       	mov	r6,r9
80006f34:	02 36       	cp.w	r6,r1
80006f36:	cd 31       	brne	80006edc <_malloc_r+0x220>
80006f38:	2f f2       	sub	r2,-1
80006f3a:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80006f3e:	c0 30       	breq	80006f44 <_malloc_r+0x288>
80006f40:	2f 81       	sub	r1,-8
80006f42:	cc bb       	rjmp	80006ed8 <_malloc_r+0x21c>
80006f44:	1c 98       	mov	r8,lr
80006f46:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80006f4a:	c0 81       	brne	80006f5a <_malloc_r+0x29e>
80006f4c:	68 19       	ld.w	r9,r4[0x4]
80006f4e:	f6 08 11 ff 	rsub	r8,r11,-1
80006f52:	f3 e8 00 08 	and	r8,r9,r8
80006f56:	89 18       	st.w	r4[0x4],r8
80006f58:	c0 78       	rjmp	80006f66 <_malloc_r+0x2aa>
80006f5a:	f0 c9 00 08 	sub	r9,r8,8
80006f5e:	20 13       	sub	r3,1
80006f60:	70 08       	ld.w	r8,r8[0x0]
80006f62:	12 38       	cp.w	r8,r9
80006f64:	cf 10       	breq	80006f46 <_malloc_r+0x28a>
80006f66:	a1 7b       	lsl	r11,0x1
80006f68:	68 18       	ld.w	r8,r4[0x4]
80006f6a:	10 3b       	cp.w	r11,r8
80006f6c:	e0 8b 00 0c 	brhi	80006f84 <_malloc_r+0x2c8>
80006f70:	58 0b       	cp.w	r11,0
80006f72:	c0 90       	breq	80006f84 <_malloc_r+0x2c8>
80006f74:	04 93       	mov	r3,r2
80006f76:	c0 38       	rjmp	80006f7c <_malloc_r+0x2c0>
80006f78:	2f c3       	sub	r3,-4
80006f7a:	a1 7b       	lsl	r11,0x1
80006f7c:	f7 e8 00 09 	and	r9,r11,r8
80006f80:	ca 81       	brne	80006ed0 <_malloc_r+0x214>
80006f82:	cf bb       	rjmp	80006f78 <_malloc_r+0x2bc>
80006f84:	68 23       	ld.w	r3,r4[0x8]
80006f86:	66 12       	ld.w	r2,r3[0x4]
80006f88:	e0 12 ff fc 	andl	r2,0xfffc
80006f8c:	0e 32       	cp.w	r2,r7
80006f8e:	5f 39       	srlo	r9
80006f90:	e4 07 01 08 	sub	r8,r2,r7
80006f94:	58 f8       	cp.w	r8,15
80006f96:	5f aa       	srle	r10
80006f98:	f5 e9 10 09 	or	r9,r10,r9
80006f9c:	e0 80 00 9a 	breq	800070d0 <_malloc_r+0x414>
80006fa0:	e0 68 06 30 	mov	r8,1584
80006fa4:	70 01       	ld.w	r1,r8[0x0]
80006fa6:	e0 68 05 10 	mov	r8,1296
80006faa:	2f 01       	sub	r1,-16
80006fac:	70 08       	ld.w	r8,r8[0x0]
80006fae:	0e 01       	add	r1,r7
80006fb0:	5b f8       	cp.w	r8,-1
80006fb2:	c0 40       	breq	80006fba <_malloc_r+0x2fe>
80006fb4:	28 11       	sub	r1,-127
80006fb6:	e0 11 ff 80 	andl	r1,0xff80
80006fba:	02 9b       	mov	r11,r1
80006fbc:	0a 9c       	mov	r12,r5
80006fbe:	e0 a0 05 39 	rcall	80007a30 <_sbrk_r>
80006fc2:	18 96       	mov	r6,r12
80006fc4:	5b fc       	cp.w	r12,-1
80006fc6:	c7 50       	breq	800070b0 <_malloc_r+0x3f4>
80006fc8:	e6 02 00 08 	add	r8,r3,r2
80006fcc:	10 3c       	cp.w	r12,r8
80006fce:	c0 32       	brcc	80006fd4 <_malloc_r+0x318>
80006fd0:	08 33       	cp.w	r3,r4
80006fd2:	c6 f1       	brne	800070b0 <_malloc_r+0x3f4>
80006fd4:	e0 6a 06 34 	mov	r10,1588
80006fd8:	74 09       	ld.w	r9,r10[0x0]
80006fda:	e2 09 00 09 	add	r9,r1,r9
80006fde:	95 09       	st.w	r10[0x0],r9
80006fe0:	10 36       	cp.w	r6,r8
80006fe2:	c0 a1       	brne	80006ff6 <_malloc_r+0x33a>
80006fe4:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80006fe8:	c0 71       	brne	80006ff6 <_malloc_r+0x33a>
80006fea:	e2 02 00 02 	add	r2,r1,r2
80006fee:	68 28       	ld.w	r8,r4[0x8]
80006ff0:	a1 a2       	sbr	r2,0x0
80006ff2:	91 12       	st.w	r8[0x4],r2
80006ff4:	c4 f8       	rjmp	80007092 <_malloc_r+0x3d6>
80006ff6:	e0 6a 05 10 	mov	r10,1296
80006ffa:	74 0b       	ld.w	r11,r10[0x0]
80006ffc:	5b fb       	cp.w	r11,-1
80006ffe:	c0 31       	brne	80007004 <_malloc_r+0x348>
80007000:	95 06       	st.w	r10[0x0],r6
80007002:	c0 78       	rjmp	80007010 <_malloc_r+0x354>
80007004:	ec 09 00 09 	add	r9,r6,r9
80007008:	e0 6a 06 34 	mov	r10,1588
8000700c:	10 19       	sub	r9,r8
8000700e:	95 09       	st.w	r10[0x0],r9
80007010:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80007014:	f0 09 11 08 	rsub	r9,r8,8
80007018:	58 08       	cp.w	r8,0
8000701a:	f2 08 17 10 	movne	r8,r9
8000701e:	ed d8 e1 06 	addne	r6,r6,r8
80007022:	28 08       	sub	r8,-128
80007024:	ec 01 00 01 	add	r1,r6,r1
80007028:	0a 9c       	mov	r12,r5
8000702a:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000702e:	f0 01 01 01 	sub	r1,r8,r1
80007032:	02 9b       	mov	r11,r1
80007034:	e0 a0 04 fe 	rcall	80007a30 <_sbrk_r>
80007038:	e0 68 06 34 	mov	r8,1588
8000703c:	5b fc       	cp.w	r12,-1
8000703e:	ec 0c 17 00 	moveq	r12,r6
80007042:	f9 b1 00 00 	moveq	r1,0
80007046:	70 09       	ld.w	r9,r8[0x0]
80007048:	0c 1c       	sub	r12,r6
8000704a:	89 26       	st.w	r4[0x8],r6
8000704c:	02 0c       	add	r12,r1
8000704e:	12 01       	add	r1,r9
80007050:	a1 ac       	sbr	r12,0x0
80007052:	91 01       	st.w	r8[0x0],r1
80007054:	8d 1c       	st.w	r6[0x4],r12
80007056:	08 33       	cp.w	r3,r4
80007058:	c1 d0       	breq	80007092 <_malloc_r+0x3d6>
8000705a:	58 f2       	cp.w	r2,15
8000705c:	e0 8b 00 05 	brhi	80007066 <_malloc_r+0x3aa>
80007060:	30 18       	mov	r8,1
80007062:	8d 18       	st.w	r6[0x4],r8
80007064:	c2 68       	rjmp	800070b0 <_malloc_r+0x3f4>
80007066:	30 59       	mov	r9,5
80007068:	20 c2       	sub	r2,12
8000706a:	e0 12 ff f8 	andl	r2,0xfff8
8000706e:	e6 02 00 08 	add	r8,r3,r2
80007072:	91 29       	st.w	r8[0x8],r9
80007074:	91 19       	st.w	r8[0x4],r9
80007076:	66 18       	ld.w	r8,r3[0x4]
80007078:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000707c:	e5 e8 10 08 	or	r8,r2,r8
80007080:	87 18       	st.w	r3[0x4],r8
80007082:	58 f2       	cp.w	r2,15
80007084:	e0 88 00 07 	brls	80007092 <_malloc_r+0x3d6>
80007088:	e6 cb ff f8 	sub	r11,r3,-8
8000708c:	0a 9c       	mov	r12,r5
8000708e:	fe b0 fb 71 	rcall	80006770 <_free_r>
80007092:	e0 69 06 2c 	mov	r9,1580
80007096:	72 0a       	ld.w	r10,r9[0x0]
80007098:	e0 68 06 34 	mov	r8,1588
8000709c:	70 08       	ld.w	r8,r8[0x0]
8000709e:	14 38       	cp.w	r8,r10
800070a0:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800070a4:	e0 69 06 28 	mov	r9,1576
800070a8:	72 0a       	ld.w	r10,r9[0x0]
800070aa:	14 38       	cp.w	r8,r10
800070ac:	f3 f8 ba 00 	st.whi	r9[0x0],r8
800070b0:	68 28       	ld.w	r8,r4[0x8]
800070b2:	70 18       	ld.w	r8,r8[0x4]
800070b4:	e0 18 ff fc 	andl	r8,0xfffc
800070b8:	0e 38       	cp.w	r8,r7
800070ba:	5f 39       	srlo	r9
800070bc:	0e 18       	sub	r8,r7
800070be:	58 f8       	cp.w	r8,15
800070c0:	5f aa       	srle	r10
800070c2:	f5 e9 10 09 	or	r9,r10,r9
800070c6:	c0 50       	breq	800070d0 <_malloc_r+0x414>
800070c8:	0a 9c       	mov	r12,r5
800070ca:	c4 3c       	rcall	80007150 <__malloc_unlock>
800070cc:	d8 3a       	popm	r0-r7,pc,r12=0
800070ce:	d7 03       	nop
800070d0:	68 26       	ld.w	r6,r4[0x8]
800070d2:	a1 a8       	sbr	r8,0x0
800070d4:	0e 99       	mov	r9,r7
800070d6:	a1 a9       	sbr	r9,0x0
800070d8:	8d 19       	st.w	r6[0x4],r9
800070da:	ec 07 00 07 	add	r7,r6,r7
800070de:	0a 9c       	mov	r12,r5
800070e0:	89 27       	st.w	r4[0x8],r7
800070e2:	8f 18       	st.w	r7[0x4],r8
800070e4:	c3 6c       	rcall	80007150 <__malloc_unlock>
800070e6:	ec cc ff f8 	sub	r12,r6,-8
800070ea:	d8 32       	popm	r0-r7,pc

800070ec <memchr>:
800070ec:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
800070f0:	c0 68       	rjmp	800070fc <memchr+0x10>
800070f2:	20 1a       	sub	r10,1
800070f4:	19 88       	ld.ub	r8,r12[0x0]
800070f6:	16 38       	cp.w	r8,r11
800070f8:	5e 0c       	reteq	r12
800070fa:	2f fc       	sub	r12,-1
800070fc:	58 0a       	cp.w	r10,0
800070fe:	cf a1       	brne	800070f2 <memchr+0x6>
80007100:	5e fa       	retal	r10

80007102 <memmove>:
80007102:	d4 01       	pushm	lr
80007104:	18 3b       	cp.w	r11,r12
80007106:	c1 92       	brcc	80007138 <memmove+0x36>
80007108:	f6 0a 00 09 	add	r9,r11,r10
8000710c:	12 3c       	cp.w	r12,r9
8000710e:	c1 52       	brcc	80007138 <memmove+0x36>
80007110:	f8 0a 00 0b 	add	r11,r12,r10
80007114:	30 08       	mov	r8,0
80007116:	c0 68       	rjmp	80007122 <memmove+0x20>
80007118:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000711c:	20 1a       	sub	r10,1
8000711e:	f6 08 0b 0e 	st.b	r11[r8],lr
80007122:	20 18       	sub	r8,1
80007124:	58 0a       	cp.w	r10,0
80007126:	cf 91       	brne	80007118 <memmove+0x16>
80007128:	d8 02       	popm	pc
8000712a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000712e:	20 1a       	sub	r10,1
80007130:	f8 08 0b 09 	st.b	r12[r8],r9
80007134:	2f f8       	sub	r8,-1
80007136:	c0 28       	rjmp	8000713a <memmove+0x38>
80007138:	30 08       	mov	r8,0
8000713a:	58 0a       	cp.w	r10,0
8000713c:	cf 71       	brne	8000712a <memmove+0x28>
8000713e:	d8 02       	popm	pc

80007140 <memset>:
80007140:	18 98       	mov	r8,r12
80007142:	c0 38       	rjmp	80007148 <memset+0x8>
80007144:	10 cb       	st.b	r8++,r11
80007146:	20 1a       	sub	r10,1
80007148:	58 0a       	cp.w	r10,0
8000714a:	cf d1       	brne	80007144 <memset+0x4>
8000714c:	5e fc       	retal	r12

8000714e <__malloc_lock>:
8000714e:	5e fc       	retal	r12

80007150 <__malloc_unlock>:
80007150:	5e fc       	retal	r12

80007152 <__hi0bits>:
80007152:	18 98       	mov	r8,r12
80007154:	e0 1c 00 00 	andl	r12,0x0
80007158:	f0 09 15 10 	lsl	r9,r8,0x10
8000715c:	58 0c       	cp.w	r12,0
8000715e:	f2 08 17 00 	moveq	r8,r9
80007162:	f9 bc 00 10 	moveq	r12,16
80007166:	f9 bc 01 00 	movne	r12,0
8000716a:	10 9a       	mov	r10,r8
8000716c:	f0 09 15 08 	lsl	r9,r8,0x8
80007170:	e6 1a ff 00 	andh	r10,0xff00,COH
80007174:	f7 bc 00 f8 	subeq	r12,-8
80007178:	f2 08 17 00 	moveq	r8,r9
8000717c:	10 9a       	mov	r10,r8
8000717e:	f0 09 15 04 	lsl	r9,r8,0x4
80007182:	e6 1a f0 00 	andh	r10,0xf000,COH
80007186:	f7 bc 00 fc 	subeq	r12,-4
8000718a:	f2 08 17 00 	moveq	r8,r9
8000718e:	10 9a       	mov	r10,r8
80007190:	f0 09 15 02 	lsl	r9,r8,0x2
80007194:	e6 1a c0 00 	andh	r10,0xc000,COH
80007198:	f7 bc 00 fe 	subeq	r12,-2
8000719c:	f2 08 17 00 	moveq	r8,r9
800071a0:	58 08       	cp.w	r8,0
800071a2:	5e 5c       	retlt	r12
800071a4:	ed b8 00 1e 	bld	r8,0x1e
800071a8:	f9 bc 01 20 	movne	r12,32
800071ac:	f7 bc 00 ff 	subeq	r12,-1
800071b0:	5e fc       	retal	r12

800071b2 <__lo0bits>:
800071b2:	18 99       	mov	r9,r12
800071b4:	78 08       	ld.w	r8,r12[0x0]
800071b6:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
800071ba:	c1 50       	breq	800071e4 <__lo0bits+0x32>
800071bc:	ed b8 00 00 	bld	r8,0x0
800071c0:	c0 21       	brne	800071c4 <__lo0bits+0x12>
800071c2:	5e fd       	retal	0
800071c4:	10 9b       	mov	r11,r8
800071c6:	f0 0a 16 01 	lsr	r10,r8,0x1
800071ca:	e2 1b 00 02 	andl	r11,0x2,COH
800071ce:	a3 88       	lsr	r8,0x2
800071d0:	58 0b       	cp.w	r11,0
800071d2:	f3 fa 1a 00 	st.wne	r9[0x0],r10
800071d6:	f9 bc 01 01 	movne	r12,1
800071da:	f3 f8 0a 00 	st.weq	r9[0x0],r8
800071de:	f9 bc 00 02 	moveq	r12,2
800071e2:	5e fc       	retal	r12
800071e4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800071e8:	f0 0b 16 10 	lsr	r11,r8,0x10
800071ec:	58 0a       	cp.w	r10,0
800071ee:	f6 08 17 00 	moveq	r8,r11
800071f2:	f9 bc 00 10 	moveq	r12,16
800071f6:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
800071fa:	f0 0a 16 08 	lsr	r10,r8,0x8
800071fe:	58 0b       	cp.w	r11,0
80007200:	f7 bc 00 f8 	subeq	r12,-8
80007204:	f4 08 17 00 	moveq	r8,r10
80007208:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000720c:	f0 0a 16 04 	lsr	r10,r8,0x4
80007210:	58 0b       	cp.w	r11,0
80007212:	f7 bc 00 fc 	subeq	r12,-4
80007216:	f4 08 17 00 	moveq	r8,r10
8000721a:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000721e:	f0 0a 16 02 	lsr	r10,r8,0x2
80007222:	58 0b       	cp.w	r11,0
80007224:	f7 bc 00 fe 	subeq	r12,-2
80007228:	f4 08 17 00 	moveq	r8,r10
8000722c:	ed b8 00 00 	bld	r8,0x0
80007230:	c0 60       	breq	8000723c <__lo0bits+0x8a>
80007232:	a1 98       	lsr	r8,0x1
80007234:	c0 31       	brne	8000723a <__lo0bits+0x88>
80007236:	32 0c       	mov	r12,32
80007238:	5e fc       	retal	r12
8000723a:	2f fc       	sub	r12,-1
8000723c:	93 08       	st.w	r9[0x0],r8
8000723e:	5e fc       	retal	r12

80007240 <__mcmp>:
80007240:	d4 01       	pushm	lr
80007242:	18 98       	mov	r8,r12
80007244:	76 49       	ld.w	r9,r11[0x10]
80007246:	78 4c       	ld.w	r12,r12[0x10]
80007248:	12 1c       	sub	r12,r9
8000724a:	c1 31       	brne	80007270 <__mcmp+0x30>
8000724c:	2f b9       	sub	r9,-5
8000724e:	a3 69       	lsl	r9,0x2
80007250:	12 0b       	add	r11,r9
80007252:	f0 09 00 09 	add	r9,r8,r9
80007256:	2e c8       	sub	r8,-20
80007258:	13 4e       	ld.w	lr,--r9
8000725a:	17 4a       	ld.w	r10,--r11
8000725c:	14 3e       	cp.w	lr,r10
8000725e:	c0 60       	breq	8000726a <__mcmp+0x2a>
80007260:	f9 bc 03 ff 	movlo	r12,-1
80007264:	f9 bc 02 01 	movhs	r12,1
80007268:	d8 02       	popm	pc
8000726a:	10 39       	cp.w	r9,r8
8000726c:	fe 9b ff f6 	brhi	80007258 <__mcmp+0x18>
80007270:	d8 02       	popm	pc
80007272:	d7 03       	nop

80007274 <_Bfree>:
80007274:	d4 21       	pushm	r4-r7,lr
80007276:	18 97       	mov	r7,r12
80007278:	16 95       	mov	r5,r11
8000727a:	78 96       	ld.w	r6,r12[0x24]
8000727c:	58 06       	cp.w	r6,0
8000727e:	c0 91       	brne	80007290 <_Bfree+0x1c>
80007280:	31 0c       	mov	r12,16
80007282:	fe b0 fd 15 	rcall	80006cac <malloc>
80007286:	99 36       	st.w	r12[0xc],r6
80007288:	8f 9c       	st.w	r7[0x24],r12
8000728a:	99 16       	st.w	r12[0x4],r6
8000728c:	99 26       	st.w	r12[0x8],r6
8000728e:	99 06       	st.w	r12[0x0],r6
80007290:	58 05       	cp.w	r5,0
80007292:	c0 90       	breq	800072a4 <_Bfree+0x30>
80007294:	6a 19       	ld.w	r9,r5[0x4]
80007296:	6e 98       	ld.w	r8,r7[0x24]
80007298:	70 38       	ld.w	r8,r8[0xc]
8000729a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000729e:	8b 0a       	st.w	r5[0x0],r10
800072a0:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
800072a4:	d8 22       	popm	r4-r7,pc
800072a6:	d7 03       	nop

800072a8 <_Balloc>:
800072a8:	d4 21       	pushm	r4-r7,lr
800072aa:	18 97       	mov	r7,r12
800072ac:	16 96       	mov	r6,r11
800072ae:	78 95       	ld.w	r5,r12[0x24]
800072b0:	58 05       	cp.w	r5,0
800072b2:	c0 91       	brne	800072c4 <_Balloc+0x1c>
800072b4:	31 0c       	mov	r12,16
800072b6:	fe b0 fc fb 	rcall	80006cac <malloc>
800072ba:	99 35       	st.w	r12[0xc],r5
800072bc:	8f 9c       	st.w	r7[0x24],r12
800072be:	99 15       	st.w	r12[0x4],r5
800072c0:	99 25       	st.w	r12[0x8],r5
800072c2:	99 05       	st.w	r12[0x0],r5
800072c4:	6e 95       	ld.w	r5,r7[0x24]
800072c6:	6a 38       	ld.w	r8,r5[0xc]
800072c8:	58 08       	cp.w	r8,0
800072ca:	c0 b1       	brne	800072e0 <_Balloc+0x38>
800072cc:	31 0a       	mov	r10,16
800072ce:	30 4b       	mov	r11,4
800072d0:	0e 9c       	mov	r12,r7
800072d2:	e0 a0 04 93 	rcall	80007bf8 <_calloc_r>
800072d6:	8b 3c       	st.w	r5[0xc],r12
800072d8:	6e 98       	ld.w	r8,r7[0x24]
800072da:	70 3c       	ld.w	r12,r8[0xc]
800072dc:	58 0c       	cp.w	r12,0
800072de:	c1 b0       	breq	80007314 <_Balloc+0x6c>
800072e0:	6e 98       	ld.w	r8,r7[0x24]
800072e2:	70 38       	ld.w	r8,r8[0xc]
800072e4:	f0 06 00 28 	add	r8,r8,r6<<0x2
800072e8:	70 0c       	ld.w	r12,r8[0x0]
800072ea:	58 0c       	cp.w	r12,0
800072ec:	c0 40       	breq	800072f4 <_Balloc+0x4c>
800072ee:	78 09       	ld.w	r9,r12[0x0]
800072f0:	91 09       	st.w	r8[0x0],r9
800072f2:	c0 e8       	rjmp	8000730e <_Balloc+0x66>
800072f4:	0e 9c       	mov	r12,r7
800072f6:	30 17       	mov	r7,1
800072f8:	0e 9b       	mov	r11,r7
800072fa:	ee 06 09 47 	lsl	r7,r7,r6
800072fe:	ee ca ff fb 	sub	r10,r7,-5
80007302:	a3 6a       	lsl	r10,0x2
80007304:	e0 a0 04 7a 	rcall	80007bf8 <_calloc_r>
80007308:	c0 60       	breq	80007314 <_Balloc+0x6c>
8000730a:	99 16       	st.w	r12[0x4],r6
8000730c:	99 27       	st.w	r12[0x8],r7
8000730e:	30 08       	mov	r8,0
80007310:	99 38       	st.w	r12[0xc],r8
80007312:	99 48       	st.w	r12[0x10],r8
80007314:	d8 22       	popm	r4-r7,pc
80007316:	d7 03       	nop

80007318 <__d2b>:
80007318:	d4 31       	pushm	r0-r7,lr
8000731a:	20 2d       	sub	sp,8
8000731c:	16 93       	mov	r3,r11
8000731e:	12 96       	mov	r6,r9
80007320:	10 95       	mov	r5,r8
80007322:	14 92       	mov	r2,r10
80007324:	30 1b       	mov	r11,1
80007326:	cc 1f       	rcall	800072a8 <_Balloc>
80007328:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000732c:	50 09       	stdsp	sp[0x0],r9
8000732e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80007332:	b5 a9       	sbr	r9,0x14
80007334:	f0 01 16 14 	lsr	r1,r8,0x14
80007338:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000733c:	18 94       	mov	r4,r12
8000733e:	58 02       	cp.w	r2,0
80007340:	c1 d0       	breq	8000737a <__d2b+0x62>
80007342:	fa cc ff f8 	sub	r12,sp,-8
80007346:	18 d2       	st.w	--r12,r2
80007348:	c3 5f       	rcall	800071b2 <__lo0bits>
8000734a:	40 18       	lddsp	r8,sp[0x4]
8000734c:	c0 d0       	breq	80007366 <__d2b+0x4e>
8000734e:	40 09       	lddsp	r9,sp[0x0]
80007350:	f8 0a 11 20 	rsub	r10,r12,32
80007354:	f2 0a 09 4a 	lsl	r10,r9,r10
80007358:	f5 e8 10 08 	or	r8,r10,r8
8000735c:	89 58       	st.w	r4[0x14],r8
8000735e:	f2 0c 0a 49 	lsr	r9,r9,r12
80007362:	50 09       	stdsp	sp[0x0],r9
80007364:	c0 28       	rjmp	80007368 <__d2b+0x50>
80007366:	89 58       	st.w	r4[0x14],r8
80007368:	40 08       	lddsp	r8,sp[0x0]
8000736a:	58 08       	cp.w	r8,0
8000736c:	f9 b3 01 02 	movne	r3,2
80007370:	f9 b3 00 01 	moveq	r3,1
80007374:	89 68       	st.w	r4[0x18],r8
80007376:	89 43       	st.w	r4[0x10],r3
80007378:	c0 88       	rjmp	80007388 <__d2b+0x70>
8000737a:	1a 9c       	mov	r12,sp
8000737c:	c1 bf       	rcall	800071b2 <__lo0bits>
8000737e:	30 13       	mov	r3,1
80007380:	40 08       	lddsp	r8,sp[0x0]
80007382:	2e 0c       	sub	r12,-32
80007384:	89 43       	st.w	r4[0x10],r3
80007386:	89 58       	st.w	r4[0x14],r8
80007388:	58 01       	cp.w	r1,0
8000738a:	c0 90       	breq	8000739c <__d2b+0x84>
8000738c:	e2 c1 04 33 	sub	r1,r1,1075
80007390:	18 01       	add	r1,r12
80007392:	8d 01       	st.w	r6[0x0],r1
80007394:	f8 0c 11 35 	rsub	r12,r12,53
80007398:	8b 0c       	st.w	r5[0x0],r12
8000739a:	c0 c8       	rjmp	800073b2 <__d2b+0x9a>
8000739c:	e6 c8 ff fc 	sub	r8,r3,-4
800073a0:	f8 cc 04 32 	sub	r12,r12,1074
800073a4:	a5 73       	lsl	r3,0x5
800073a6:	8d 0c       	st.w	r6[0x0],r12
800073a8:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
800073ac:	cd 3e       	rcall	80007152 <__hi0bits>
800073ae:	18 13       	sub	r3,r12
800073b0:	8b 03       	st.w	r5[0x0],r3
800073b2:	08 9c       	mov	r12,r4
800073b4:	2f ed       	sub	sp,-8
800073b6:	d8 32       	popm	r0-r7,pc

800073b8 <__mdiff>:
800073b8:	d4 31       	pushm	r0-r7,lr
800073ba:	74 48       	ld.w	r8,r10[0x10]
800073bc:	76 45       	ld.w	r5,r11[0x10]
800073be:	16 97       	mov	r7,r11
800073c0:	14 96       	mov	r6,r10
800073c2:	10 15       	sub	r5,r8
800073c4:	c1 31       	brne	800073ea <__mdiff+0x32>
800073c6:	2f b8       	sub	r8,-5
800073c8:	ee ce ff ec 	sub	lr,r7,-20
800073cc:	a3 68       	lsl	r8,0x2
800073ce:	f4 08 00 0b 	add	r11,r10,r8
800073d2:	ee 08 00 08 	add	r8,r7,r8
800073d6:	11 4a       	ld.w	r10,--r8
800073d8:	17 49       	ld.w	r9,--r11
800073da:	12 3a       	cp.w	r10,r9
800073dc:	c0 30       	breq	800073e2 <__mdiff+0x2a>
800073de:	c0 e2       	brcc	800073fa <__mdiff+0x42>
800073e0:	c0 78       	rjmp	800073ee <__mdiff+0x36>
800073e2:	1c 38       	cp.w	r8,lr
800073e4:	fe 9b ff f9 	brhi	800073d6 <__mdiff+0x1e>
800073e8:	c4 98       	rjmp	8000747a <__mdiff+0xc2>
800073ea:	58 05       	cp.w	r5,0
800073ec:	c0 64       	brge	800073f8 <__mdiff+0x40>
800073ee:	0e 98       	mov	r8,r7
800073f0:	30 15       	mov	r5,1
800073f2:	0c 97       	mov	r7,r6
800073f4:	10 96       	mov	r6,r8
800073f6:	c0 28       	rjmp	800073fa <__mdiff+0x42>
800073f8:	30 05       	mov	r5,0
800073fa:	6e 1b       	ld.w	r11,r7[0x4]
800073fc:	c5 6f       	rcall	800072a8 <_Balloc>
800073fe:	6e 49       	ld.w	r9,r7[0x10]
80007400:	6c 44       	ld.w	r4,r6[0x10]
80007402:	99 35       	st.w	r12[0xc],r5
80007404:	2f b4       	sub	r4,-5
80007406:	f2 c5 ff fb 	sub	r5,r9,-5
8000740a:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000740e:	ee 05 00 25 	add	r5,r7,r5<<0x2
80007412:	2e c6       	sub	r6,-20
80007414:	2e c7       	sub	r7,-20
80007416:	f8 c8 ff ec 	sub	r8,r12,-20
8000741a:	30 0a       	mov	r10,0
8000741c:	0f 0e       	ld.w	lr,r7++
8000741e:	0d 0b       	ld.w	r11,r6++
80007420:	fc 02 16 10 	lsr	r2,lr,0x10
80007424:	f6 03 16 10 	lsr	r3,r11,0x10
80007428:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000742c:	e4 03 01 03 	sub	r3,r2,r3
80007430:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80007434:	fc 0b 01 0b 	sub	r11,lr,r11
80007438:	f6 0a 00 0a 	add	r10,r11,r10
8000743c:	b0 1a       	st.h	r8[0x2],r10
8000743e:	b1 4a       	asr	r10,0x10
80007440:	e6 0a 00 0a 	add	r10,r3,r10
80007444:	b0 0a       	st.h	r8[0x0],r10
80007446:	2f c8       	sub	r8,-4
80007448:	b1 4a       	asr	r10,0x10
8000744a:	08 36       	cp.w	r6,r4
8000744c:	ce 83       	brcs	8000741c <__mdiff+0x64>
8000744e:	c0 d8       	rjmp	80007468 <__mdiff+0xb0>
80007450:	0f 0b       	ld.w	r11,r7++
80007452:	f6 0e 16 10 	lsr	lr,r11,0x10
80007456:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000745a:	16 0a       	add	r10,r11
8000745c:	b0 1a       	st.h	r8[0x2],r10
8000745e:	b1 4a       	asr	r10,0x10
80007460:	1c 0a       	add	r10,lr
80007462:	b0 0a       	st.h	r8[0x0],r10
80007464:	2f c8       	sub	r8,-4
80007466:	b1 4a       	asr	r10,0x10
80007468:	0a 37       	cp.w	r7,r5
8000746a:	cf 33       	brcs	80007450 <__mdiff+0x98>
8000746c:	c0 28       	rjmp	80007470 <__mdiff+0xb8>
8000746e:	20 19       	sub	r9,1
80007470:	11 4a       	ld.w	r10,--r8
80007472:	58 0a       	cp.w	r10,0
80007474:	cf d0       	breq	8000746e <__mdiff+0xb6>
80007476:	99 49       	st.w	r12[0x10],r9
80007478:	d8 32       	popm	r0-r7,pc
8000747a:	30 0b       	mov	r11,0
8000747c:	c1 6f       	rcall	800072a8 <_Balloc>
8000747e:	30 18       	mov	r8,1
80007480:	99 48       	st.w	r12[0x10],r8
80007482:	30 08       	mov	r8,0
80007484:	99 58       	st.w	r12[0x14],r8
80007486:	d8 32       	popm	r0-r7,pc

80007488 <__lshift>:
80007488:	d4 31       	pushm	r0-r7,lr
8000748a:	16 97       	mov	r7,r11
8000748c:	76 46       	ld.w	r6,r11[0x10]
8000748e:	f4 02 14 05 	asr	r2,r10,0x5
80007492:	2f f6       	sub	r6,-1
80007494:	14 93       	mov	r3,r10
80007496:	18 94       	mov	r4,r12
80007498:	04 06       	add	r6,r2
8000749a:	76 1b       	ld.w	r11,r11[0x4]
8000749c:	6e 28       	ld.w	r8,r7[0x8]
8000749e:	c0 38       	rjmp	800074a4 <__lshift+0x1c>
800074a0:	2f fb       	sub	r11,-1
800074a2:	a1 78       	lsl	r8,0x1
800074a4:	10 36       	cp.w	r6,r8
800074a6:	fe 99 ff fd 	brgt	800074a0 <__lshift+0x18>
800074aa:	08 9c       	mov	r12,r4
800074ac:	cf ee       	rcall	800072a8 <_Balloc>
800074ae:	30 09       	mov	r9,0
800074b0:	18 95       	mov	r5,r12
800074b2:	f8 c8 ff ec 	sub	r8,r12,-20
800074b6:	12 9a       	mov	r10,r9
800074b8:	c0 38       	rjmp	800074be <__lshift+0x36>
800074ba:	10 aa       	st.w	r8++,r10
800074bc:	2f f9       	sub	r9,-1
800074be:	04 39       	cp.w	r9,r2
800074c0:	cf d5       	brlt	800074ba <__lshift+0x32>
800074c2:	6e 4b       	ld.w	r11,r7[0x10]
800074c4:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
800074c8:	2f bb       	sub	r11,-5
800074ca:	ee c9 ff ec 	sub	r9,r7,-20
800074ce:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
800074d2:	58 03       	cp.w	r3,0
800074d4:	c1 30       	breq	800074fa <__lshift+0x72>
800074d6:	e6 0c 11 20 	rsub	r12,r3,32
800074da:	30 0a       	mov	r10,0
800074dc:	72 02       	ld.w	r2,r9[0x0]
800074de:	e4 03 09 42 	lsl	r2,r2,r3
800074e2:	04 4a       	or	r10,r2
800074e4:	10 aa       	st.w	r8++,r10
800074e6:	13 0a       	ld.w	r10,r9++
800074e8:	f4 0c 0a 4a 	lsr	r10,r10,r12
800074ec:	16 39       	cp.w	r9,r11
800074ee:	cf 73       	brcs	800074dc <__lshift+0x54>
800074f0:	91 0a       	st.w	r8[0x0],r10
800074f2:	58 0a       	cp.w	r10,0
800074f4:	c0 70       	breq	80007502 <__lshift+0x7a>
800074f6:	2f f6       	sub	r6,-1
800074f8:	c0 58       	rjmp	80007502 <__lshift+0x7a>
800074fa:	13 0a       	ld.w	r10,r9++
800074fc:	10 aa       	st.w	r8++,r10
800074fe:	16 39       	cp.w	r9,r11
80007500:	cf d3       	brcs	800074fa <__lshift+0x72>
80007502:	08 9c       	mov	r12,r4
80007504:	20 16       	sub	r6,1
80007506:	0e 9b       	mov	r11,r7
80007508:	8b 46       	st.w	r5[0x10],r6
8000750a:	cb 5e       	rcall	80007274 <_Bfree>
8000750c:	0a 9c       	mov	r12,r5
8000750e:	d8 32       	popm	r0-r7,pc

80007510 <__multiply>:
80007510:	d4 31       	pushm	r0-r7,lr
80007512:	20 2d       	sub	sp,8
80007514:	76 49       	ld.w	r9,r11[0x10]
80007516:	74 48       	ld.w	r8,r10[0x10]
80007518:	16 96       	mov	r6,r11
8000751a:	14 95       	mov	r5,r10
8000751c:	10 39       	cp.w	r9,r8
8000751e:	ec 08 17 50 	movlt	r8,r6
80007522:	ea 06 17 50 	movlt	r6,r5
80007526:	f0 05 17 50 	movlt	r5,r8
8000752a:	6c 28       	ld.w	r8,r6[0x8]
8000752c:	76 43       	ld.w	r3,r11[0x10]
8000752e:	74 42       	ld.w	r2,r10[0x10]
80007530:	76 1b       	ld.w	r11,r11[0x4]
80007532:	e4 03 00 07 	add	r7,r2,r3
80007536:	10 37       	cp.w	r7,r8
80007538:	f7 bb 09 ff 	subgt	r11,-1
8000753c:	cb 6e       	rcall	800072a8 <_Balloc>
8000753e:	ee c4 ff fb 	sub	r4,r7,-5
80007542:	f8 c9 ff ec 	sub	r9,r12,-20
80007546:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000754a:	30 0a       	mov	r10,0
8000754c:	12 98       	mov	r8,r9
8000754e:	c0 28       	rjmp	80007552 <__multiply+0x42>
80007550:	10 aa       	st.w	r8++,r10
80007552:	08 38       	cp.w	r8,r4
80007554:	cf e3       	brcs	80007550 <__multiply+0x40>
80007556:	2f b3       	sub	r3,-5
80007558:	2f b2       	sub	r2,-5
8000755a:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000755e:	ea 02 00 22 	add	r2,r5,r2<<0x2
80007562:	ec cb ff ec 	sub	r11,r6,-20
80007566:	50 12       	stdsp	sp[0x4],r2
80007568:	ea ca ff ec 	sub	r10,r5,-20
8000756c:	c4 48       	rjmp	800075f4 <__multiply+0xe4>
8000756e:	94 95       	ld.uh	r5,r10[0x2]
80007570:	58 05       	cp.w	r5,0
80007572:	c2 00       	breq	800075b2 <__multiply+0xa2>
80007574:	12 98       	mov	r8,r9
80007576:	16 96       	mov	r6,r11
80007578:	30 0e       	mov	lr,0
8000757a:	50 09       	stdsp	sp[0x0],r9
8000757c:	0d 02       	ld.w	r2,r6++
8000757e:	e4 00 16 10 	lsr	r0,r2,0x10
80007582:	70 01       	ld.w	r1,r8[0x0]
80007584:	70 09       	ld.w	r9,r8[0x0]
80007586:	b1 81       	lsr	r1,0x10
80007588:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000758c:	e0 05 03 41 	mac	r1,r0,r5
80007590:	ab 32       	mul	r2,r5
80007592:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80007596:	00 02       	add	r2,r0
80007598:	e4 0e 00 0e 	add	lr,r2,lr
8000759c:	b0 1e       	st.h	r8[0x2],lr
8000759e:	b1 8e       	lsr	lr,0x10
800075a0:	1c 01       	add	r1,lr
800075a2:	b0 01       	st.h	r8[0x0],r1
800075a4:	e2 0e 16 10 	lsr	lr,r1,0x10
800075a8:	2f c8       	sub	r8,-4
800075aa:	06 36       	cp.w	r6,r3
800075ac:	ce 83       	brcs	8000757c <__multiply+0x6c>
800075ae:	40 09       	lddsp	r9,sp[0x0]
800075b0:	91 0e       	st.w	r8[0x0],lr
800075b2:	94 86       	ld.uh	r6,r10[0x0]
800075b4:	58 06       	cp.w	r6,0
800075b6:	c1 d0       	breq	800075f0 <__multiply+0xe0>
800075b8:	72 02       	ld.w	r2,r9[0x0]
800075ba:	12 98       	mov	r8,r9
800075bc:	16 9e       	mov	lr,r11
800075be:	30 05       	mov	r5,0
800075c0:	b0 12       	st.h	r8[0x2],r2
800075c2:	1d 01       	ld.w	r1,lr++
800075c4:	90 82       	ld.uh	r2,r8[0x0]
800075c6:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
800075ca:	ad 30       	mul	r0,r6
800075cc:	e0 02 00 02 	add	r2,r0,r2
800075d0:	e4 05 00 05 	add	r5,r2,r5
800075d4:	b0 05       	st.h	r8[0x0],r5
800075d6:	b1 85       	lsr	r5,0x10
800075d8:	b1 81       	lsr	r1,0x10
800075da:	2f c8       	sub	r8,-4
800075dc:	ad 31       	mul	r1,r6
800075de:	90 92       	ld.uh	r2,r8[0x2]
800075e0:	e2 02 00 02 	add	r2,r1,r2
800075e4:	0a 02       	add	r2,r5
800075e6:	e4 05 16 10 	lsr	r5,r2,0x10
800075ea:	06 3e       	cp.w	lr,r3
800075ec:	ce a3       	brcs	800075c0 <__multiply+0xb0>
800075ee:	91 02       	st.w	r8[0x0],r2
800075f0:	2f ca       	sub	r10,-4
800075f2:	2f c9       	sub	r9,-4
800075f4:	40 18       	lddsp	r8,sp[0x4]
800075f6:	10 3a       	cp.w	r10,r8
800075f8:	cb b3       	brcs	8000756e <__multiply+0x5e>
800075fa:	c0 28       	rjmp	800075fe <__multiply+0xee>
800075fc:	20 17       	sub	r7,1
800075fe:	58 07       	cp.w	r7,0
80007600:	e0 8a 00 05 	brle	8000760a <__multiply+0xfa>
80007604:	09 48       	ld.w	r8,--r4
80007606:	58 08       	cp.w	r8,0
80007608:	cf a0       	breq	800075fc <__multiply+0xec>
8000760a:	99 47       	st.w	r12[0x10],r7
8000760c:	2f ed       	sub	sp,-8
8000760e:	d8 32       	popm	r0-r7,pc

80007610 <__i2b>:
80007610:	d4 21       	pushm	r4-r7,lr
80007612:	16 97       	mov	r7,r11
80007614:	30 1b       	mov	r11,1
80007616:	c4 9e       	rcall	800072a8 <_Balloc>
80007618:	30 19       	mov	r9,1
8000761a:	99 57       	st.w	r12[0x14],r7
8000761c:	99 49       	st.w	r12[0x10],r9
8000761e:	d8 22       	popm	r4-r7,pc

80007620 <__multadd>:
80007620:	d4 31       	pushm	r0-r7,lr
80007622:	30 08       	mov	r8,0
80007624:	12 95       	mov	r5,r9
80007626:	16 97       	mov	r7,r11
80007628:	18 96       	mov	r6,r12
8000762a:	76 44       	ld.w	r4,r11[0x10]
8000762c:	f6 c9 ff ec 	sub	r9,r11,-20
80007630:	72 0b       	ld.w	r11,r9[0x0]
80007632:	f6 0c 16 10 	lsr	r12,r11,0x10
80007636:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000763a:	f4 0c 02 4c 	mul	r12,r10,r12
8000763e:	f4 0b 03 45 	mac	r5,r10,r11
80007642:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80007646:	b1 85       	lsr	r5,0x10
80007648:	18 05       	add	r5,r12
8000764a:	ea 0c 15 10 	lsl	r12,r5,0x10
8000764e:	f8 0b 00 0b 	add	r11,r12,r11
80007652:	12 ab       	st.w	r9++,r11
80007654:	2f f8       	sub	r8,-1
80007656:	b1 85       	lsr	r5,0x10
80007658:	08 38       	cp.w	r8,r4
8000765a:	ce b5       	brlt	80007630 <__multadd+0x10>
8000765c:	58 05       	cp.w	r5,0
8000765e:	c1 c0       	breq	80007696 <__multadd+0x76>
80007660:	6e 28       	ld.w	r8,r7[0x8]
80007662:	10 34       	cp.w	r4,r8
80007664:	c1 35       	brlt	8000768a <__multadd+0x6a>
80007666:	6e 1b       	ld.w	r11,r7[0x4]
80007668:	0c 9c       	mov	r12,r6
8000766a:	2f fb       	sub	r11,-1
8000766c:	c1 ee       	rcall	800072a8 <_Balloc>
8000766e:	6e 4a       	ld.w	r10,r7[0x10]
80007670:	ee cb ff f4 	sub	r11,r7,-12
80007674:	18 93       	mov	r3,r12
80007676:	2f ea       	sub	r10,-2
80007678:	2f 4c       	sub	r12,-12
8000767a:	a3 6a       	lsl	r10,0x2
8000767c:	fe b0 de 36 	rcall	800032e8 <memcpy>
80007680:	0e 9b       	mov	r11,r7
80007682:	0c 9c       	mov	r12,r6
80007684:	fe b0 fd f8 	rcall	80007274 <_Bfree>
80007688:	06 97       	mov	r7,r3
8000768a:	e8 c8 ff ff 	sub	r8,r4,-1
8000768e:	2f b4       	sub	r4,-5
80007690:	8f 48       	st.w	r7[0x10],r8
80007692:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80007696:	0e 9c       	mov	r12,r7
80007698:	d8 32       	popm	r0-r7,pc
8000769a:	d7 03       	nop

8000769c <__pow5mult>:
8000769c:	d4 31       	pushm	r0-r7,lr
8000769e:	14 96       	mov	r6,r10
800076a0:	18 97       	mov	r7,r12
800076a2:	16 94       	mov	r4,r11
800076a4:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
800076a8:	c0 90       	breq	800076ba <__pow5mult+0x1e>
800076aa:	20 18       	sub	r8,1
800076ac:	fe c9 e2 60 	sub	r9,pc,-7584
800076b0:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
800076b4:	30 09       	mov	r9,0
800076b6:	cb 5f       	rcall	80007620 <__multadd>
800076b8:	18 94       	mov	r4,r12
800076ba:	a3 46       	asr	r6,0x2
800076bc:	c3 40       	breq	80007724 <__pow5mult+0x88>
800076be:	6e 95       	ld.w	r5,r7[0x24]
800076c0:	58 05       	cp.w	r5,0
800076c2:	c0 91       	brne	800076d4 <__pow5mult+0x38>
800076c4:	31 0c       	mov	r12,16
800076c6:	fe b0 fa f3 	rcall	80006cac <malloc>
800076ca:	99 35       	st.w	r12[0xc],r5
800076cc:	8f 9c       	st.w	r7[0x24],r12
800076ce:	99 15       	st.w	r12[0x4],r5
800076d0:	99 25       	st.w	r12[0x8],r5
800076d2:	99 05       	st.w	r12[0x0],r5
800076d4:	6e 93       	ld.w	r3,r7[0x24]
800076d6:	66 25       	ld.w	r5,r3[0x8]
800076d8:	58 05       	cp.w	r5,0
800076da:	c0 c1       	brne	800076f2 <__pow5mult+0x56>
800076dc:	e0 6b 02 71 	mov	r11,625
800076e0:	0e 9c       	mov	r12,r7
800076e2:	c9 7f       	rcall	80007610 <__i2b>
800076e4:	87 2c       	st.w	r3[0x8],r12
800076e6:	30 08       	mov	r8,0
800076e8:	18 95       	mov	r5,r12
800076ea:	99 08       	st.w	r12[0x0],r8
800076ec:	c0 38       	rjmp	800076f2 <__pow5mult+0x56>
800076ee:	06 9c       	mov	r12,r3
800076f0:	18 95       	mov	r5,r12
800076f2:	ed b6 00 00 	bld	r6,0x0
800076f6:	c0 b1       	brne	8000770c <__pow5mult+0x70>
800076f8:	08 9b       	mov	r11,r4
800076fa:	0a 9a       	mov	r10,r5
800076fc:	0e 9c       	mov	r12,r7
800076fe:	c0 9f       	rcall	80007510 <__multiply>
80007700:	08 9b       	mov	r11,r4
80007702:	18 93       	mov	r3,r12
80007704:	0e 9c       	mov	r12,r7
80007706:	06 94       	mov	r4,r3
80007708:	fe b0 fd b6 	rcall	80007274 <_Bfree>
8000770c:	a1 56       	asr	r6,0x1
8000770e:	c0 b0       	breq	80007724 <__pow5mult+0x88>
80007710:	6a 03       	ld.w	r3,r5[0x0]
80007712:	58 03       	cp.w	r3,0
80007714:	ce d1       	brne	800076ee <__pow5mult+0x52>
80007716:	0a 9a       	mov	r10,r5
80007718:	0a 9b       	mov	r11,r5
8000771a:	0e 9c       	mov	r12,r7
8000771c:	cf ae       	rcall	80007510 <__multiply>
8000771e:	8b 0c       	st.w	r5[0x0],r12
80007720:	99 03       	st.w	r12[0x0],r3
80007722:	ce 7b       	rjmp	800076f0 <__pow5mult+0x54>
80007724:	08 9c       	mov	r12,r4
80007726:	d8 32       	popm	r0-r7,pc

80007728 <_realloc_r>:
80007728:	d4 31       	pushm	r0-r7,lr
8000772a:	20 1d       	sub	sp,4
8000772c:	16 94       	mov	r4,r11
8000772e:	18 92       	mov	r2,r12
80007730:	14 9b       	mov	r11,r10
80007732:	58 04       	cp.w	r4,0
80007734:	c0 51       	brne	8000773e <_realloc_r+0x16>
80007736:	fe b0 fa c3 	rcall	80006cbc <_malloc_r>
8000773a:	18 95       	mov	r5,r12
8000773c:	c5 39       	rjmp	800079e2 <_realloc_r+0x2ba>
8000773e:	50 0a       	stdsp	sp[0x0],r10
80007740:	fe b0 fd 07 	rcall	8000714e <__malloc_lock>
80007744:	40 0b       	lddsp	r11,sp[0x0]
80007746:	f6 c8 ff f5 	sub	r8,r11,-11
8000774a:	e8 c1 00 08 	sub	r1,r4,8
8000774e:	10 96       	mov	r6,r8
80007750:	62 1c       	ld.w	r12,r1[0x4]
80007752:	e0 16 ff f8 	andl	r6,0xfff8
80007756:	59 68       	cp.w	r8,22
80007758:	f9 b6 08 10 	movls	r6,16
8000775c:	16 36       	cp.w	r6,r11
8000775e:	5f 38       	srlo	r8
80007760:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80007764:	c0 50       	breq	8000776e <_realloc_r+0x46>
80007766:	30 c8       	mov	r8,12
80007768:	30 05       	mov	r5,0
8000776a:	85 38       	st.w	r2[0xc],r8
8000776c:	c3 b9       	rjmp	800079e2 <_realloc_r+0x2ba>
8000776e:	18 90       	mov	r0,r12
80007770:	e0 10 ff fc 	andl	r0,0xfffc
80007774:	0c 30       	cp.w	r0,r6
80007776:	e0 84 01 0b 	brge	8000798c <_realloc_r+0x264>
8000777a:	e0 68 01 04 	mov	r8,260
8000777e:	e2 00 00 09 	add	r9,r1,r0
80007782:	70 25       	ld.w	r5,r8[0x8]
80007784:	0a 39       	cp.w	r9,r5
80007786:	c0 90       	breq	80007798 <_realloc_r+0x70>
80007788:	72 1a       	ld.w	r10,r9[0x4]
8000778a:	a1 ca       	cbr	r10,0x0
8000778c:	f2 0a 00 0a 	add	r10,r9,r10
80007790:	74 1a       	ld.w	r10,r10[0x4]
80007792:	ed ba 00 00 	bld	r10,0x0
80007796:	c2 20       	breq	800077da <_realloc_r+0xb2>
80007798:	72 1a       	ld.w	r10,r9[0x4]
8000779a:	e0 1a ff fc 	andl	r10,0xfffc
8000779e:	f4 00 00 03 	add	r3,r10,r0
800077a2:	0a 39       	cp.w	r9,r5
800077a4:	c1 31       	brne	800077ca <_realloc_r+0xa2>
800077a6:	ec c7 ff f0 	sub	r7,r6,-16
800077aa:	0e 33       	cp.w	r3,r7
800077ac:	c1 95       	brlt	800077de <_realloc_r+0xb6>
800077ae:	e2 06 00 09 	add	r9,r1,r6
800077b2:	0c 13       	sub	r3,r6
800077b4:	a1 a3       	sbr	r3,0x0
800077b6:	93 13       	st.w	r9[0x4],r3
800077b8:	91 29       	st.w	r8[0x8],r9
800077ba:	04 9c       	mov	r12,r2
800077bc:	62 18       	ld.w	r8,r1[0x4]
800077be:	08 95       	mov	r5,r4
800077c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800077c4:	10 46       	or	r6,r8
800077c6:	83 16       	st.w	r1[0x4],r6
800077c8:	c0 b9       	rjmp	800079de <_realloc_r+0x2b6>
800077ca:	0c 33       	cp.w	r3,r6
800077cc:	c0 95       	brlt	800077de <_realloc_r+0xb6>
800077ce:	72 28       	ld.w	r8,r9[0x8]
800077d0:	02 97       	mov	r7,r1
800077d2:	72 39       	ld.w	r9,r9[0xc]
800077d4:	93 28       	st.w	r9[0x8],r8
800077d6:	91 39       	st.w	r8[0xc],r9
800077d8:	cd c8       	rjmp	80007990 <_realloc_r+0x268>
800077da:	30 0a       	mov	r10,0
800077dc:	14 99       	mov	r9,r10
800077de:	ed bc 00 00 	bld	r12,0x0
800077e2:	e0 80 00 95 	breq	8000790c <_realloc_r+0x1e4>
800077e6:	62 07       	ld.w	r7,r1[0x0]
800077e8:	e2 07 01 07 	sub	r7,r1,r7
800077ec:	6e 1c       	ld.w	r12,r7[0x4]
800077ee:	e0 1c ff fc 	andl	r12,0xfffc
800077f2:	58 09       	cp.w	r9,0
800077f4:	c5 60       	breq	800078a0 <_realloc_r+0x178>
800077f6:	f8 00 00 03 	add	r3,r12,r0
800077fa:	0a 39       	cp.w	r9,r5
800077fc:	c4 81       	brne	8000788c <_realloc_r+0x164>
800077fe:	14 03       	add	r3,r10
80007800:	ec c9 ff f0 	sub	r9,r6,-16
80007804:	12 33       	cp.w	r3,r9
80007806:	c4 d5       	brlt	800078a0 <_realloc_r+0x178>
80007808:	6e 3a       	ld.w	r10,r7[0xc]
8000780a:	6e 29       	ld.w	r9,r7[0x8]
8000780c:	95 29       	st.w	r10[0x8],r9
8000780e:	93 3a       	st.w	r9[0xc],r10
80007810:	ee c5 ff f8 	sub	r5,r7,-8
80007814:	e0 ca 00 04 	sub	r10,r0,4
80007818:	e0 4a 00 24 	cp.w	r10,36
8000781c:	e0 8b 00 25 	brhi	80007866 <_realloc_r+0x13e>
80007820:	0a 99       	mov	r9,r5
80007822:	59 3a       	cp.w	r10,19
80007824:	e0 88 00 1a 	brls	80007858 <_realloc_r+0x130>
80007828:	09 09       	ld.w	r9,r4++
8000782a:	8b 09       	st.w	r5[0x0],r9
8000782c:	09 09       	ld.w	r9,r4++
8000782e:	8f 39       	st.w	r7[0xc],r9
80007830:	ee c9 ff f0 	sub	r9,r7,-16
80007834:	59 ba       	cp.w	r10,27
80007836:	e0 88 00 11 	brls	80007858 <_realloc_r+0x130>
8000783a:	09 0b       	ld.w	r11,r4++
8000783c:	93 0b       	st.w	r9[0x0],r11
8000783e:	09 09       	ld.w	r9,r4++
80007840:	8f 59       	st.w	r7[0x14],r9
80007842:	ee c9 ff e8 	sub	r9,r7,-24
80007846:	e0 4a 00 24 	cp.w	r10,36
8000784a:	c0 71       	brne	80007858 <_realloc_r+0x130>
8000784c:	09 0a       	ld.w	r10,r4++
8000784e:	93 0a       	st.w	r9[0x0],r10
80007850:	ee c9 ff e0 	sub	r9,r7,-32
80007854:	09 0a       	ld.w	r10,r4++
80007856:	8f 7a       	st.w	r7[0x1c],r10
80007858:	09 0a       	ld.w	r10,r4++
8000785a:	12 aa       	st.w	r9++,r10
8000785c:	68 0a       	ld.w	r10,r4[0x0]
8000785e:	93 0a       	st.w	r9[0x0],r10
80007860:	68 1a       	ld.w	r10,r4[0x4]
80007862:	93 1a       	st.w	r9[0x4],r10
80007864:	c0 78       	rjmp	80007872 <_realloc_r+0x14a>
80007866:	50 08       	stdsp	sp[0x0],r8
80007868:	08 9b       	mov	r11,r4
8000786a:	0a 9c       	mov	r12,r5
8000786c:	fe b0 fc 4b 	rcall	80007102 <memmove>
80007870:	40 08       	lddsp	r8,sp[0x0]
80007872:	ee 06 00 09 	add	r9,r7,r6
80007876:	0c 13       	sub	r3,r6
80007878:	a1 a3       	sbr	r3,0x0
8000787a:	93 13       	st.w	r9[0x4],r3
8000787c:	91 29       	st.w	r8[0x8],r9
8000787e:	04 9c       	mov	r12,r2
80007880:	6e 18       	ld.w	r8,r7[0x4]
80007882:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007886:	10 46       	or	r6,r8
80007888:	8f 16       	st.w	r7[0x4],r6
8000788a:	ca a8       	rjmp	800079de <_realloc_r+0x2b6>
8000788c:	14 03       	add	r3,r10
8000788e:	0c 33       	cp.w	r3,r6
80007890:	c0 85       	brlt	800078a0 <_realloc_r+0x178>
80007892:	72 28       	ld.w	r8,r9[0x8]
80007894:	72 39       	ld.w	r9,r9[0xc]
80007896:	93 28       	st.w	r9[0x8],r8
80007898:	91 39       	st.w	r8[0xc],r9
8000789a:	6e 28       	ld.w	r8,r7[0x8]
8000789c:	6e 39       	ld.w	r9,r7[0xc]
8000789e:	c0 78       	rjmp	800078ac <_realloc_r+0x184>
800078a0:	f8 00 00 03 	add	r3,r12,r0
800078a4:	0c 33       	cp.w	r3,r6
800078a6:	c3 35       	brlt	8000790c <_realloc_r+0x1e4>
800078a8:	6e 39       	ld.w	r9,r7[0xc]
800078aa:	6e 28       	ld.w	r8,r7[0x8]
800078ac:	93 28       	st.w	r9[0x8],r8
800078ae:	91 39       	st.w	r8[0xc],r9
800078b0:	e0 ca 00 04 	sub	r10,r0,4
800078b4:	ee cc ff f8 	sub	r12,r7,-8
800078b8:	e0 4a 00 24 	cp.w	r10,36
800078bc:	e0 8b 00 24 	brhi	80007904 <_realloc_r+0x1dc>
800078c0:	59 3a       	cp.w	r10,19
800078c2:	e0 88 00 1a 	brls	800078f6 <_realloc_r+0x1ce>
800078c6:	09 08       	ld.w	r8,r4++
800078c8:	99 08       	st.w	r12[0x0],r8
800078ca:	09 08       	ld.w	r8,r4++
800078cc:	8f 38       	st.w	r7[0xc],r8
800078ce:	ee cc ff f0 	sub	r12,r7,-16
800078d2:	59 ba       	cp.w	r10,27
800078d4:	e0 88 00 11 	brls	800078f6 <_realloc_r+0x1ce>
800078d8:	09 08       	ld.w	r8,r4++
800078da:	99 08       	st.w	r12[0x0],r8
800078dc:	09 08       	ld.w	r8,r4++
800078de:	8f 58       	st.w	r7[0x14],r8
800078e0:	ee cc ff e8 	sub	r12,r7,-24
800078e4:	e0 4a 00 24 	cp.w	r10,36
800078e8:	c0 71       	brne	800078f6 <_realloc_r+0x1ce>
800078ea:	09 08       	ld.w	r8,r4++
800078ec:	99 08       	st.w	r12[0x0],r8
800078ee:	ee cc ff e0 	sub	r12,r7,-32
800078f2:	09 08       	ld.w	r8,r4++
800078f4:	8f 78       	st.w	r7[0x1c],r8
800078f6:	09 08       	ld.w	r8,r4++
800078f8:	18 a8       	st.w	r12++,r8
800078fa:	68 08       	ld.w	r8,r4[0x0]
800078fc:	99 08       	st.w	r12[0x0],r8
800078fe:	68 18       	ld.w	r8,r4[0x4]
80007900:	99 18       	st.w	r12[0x4],r8
80007902:	c4 78       	rjmp	80007990 <_realloc_r+0x268>
80007904:	08 9b       	mov	r11,r4
80007906:	fe b0 fb fe 	rcall	80007102 <memmove>
8000790a:	c4 38       	rjmp	80007990 <_realloc_r+0x268>
8000790c:	04 9c       	mov	r12,r2
8000790e:	fe b0 f9 d7 	rcall	80006cbc <_malloc_r>
80007912:	18 95       	mov	r5,r12
80007914:	c3 a0       	breq	80007988 <_realloc_r+0x260>
80007916:	62 18       	ld.w	r8,r1[0x4]
80007918:	f8 c9 00 08 	sub	r9,r12,8
8000791c:	a1 c8       	cbr	r8,0x0
8000791e:	e2 08 00 08 	add	r8,r1,r8
80007922:	10 39       	cp.w	r9,r8
80007924:	c0 71       	brne	80007932 <_realloc_r+0x20a>
80007926:	72 13       	ld.w	r3,r9[0x4]
80007928:	02 97       	mov	r7,r1
8000792a:	e0 13 ff fc 	andl	r3,0xfffc
8000792e:	00 03       	add	r3,r0
80007930:	c3 08       	rjmp	80007990 <_realloc_r+0x268>
80007932:	e0 ca 00 04 	sub	r10,r0,4
80007936:	e0 4a 00 24 	cp.w	r10,36
8000793a:	e0 8b 00 20 	brhi	8000797a <_realloc_r+0x252>
8000793e:	08 99       	mov	r9,r4
80007940:	18 98       	mov	r8,r12
80007942:	59 3a       	cp.w	r10,19
80007944:	e0 88 00 14 	brls	8000796c <_realloc_r+0x244>
80007948:	13 0b       	ld.w	r11,r9++
8000794a:	10 ab       	st.w	r8++,r11
8000794c:	13 0b       	ld.w	r11,r9++
8000794e:	10 ab       	st.w	r8++,r11
80007950:	59 ba       	cp.w	r10,27
80007952:	e0 88 00 0d 	brls	8000796c <_realloc_r+0x244>
80007956:	13 0b       	ld.w	r11,r9++
80007958:	10 ab       	st.w	r8++,r11
8000795a:	13 0b       	ld.w	r11,r9++
8000795c:	10 ab       	st.w	r8++,r11
8000795e:	e0 4a 00 24 	cp.w	r10,36
80007962:	c0 51       	brne	8000796c <_realloc_r+0x244>
80007964:	13 0a       	ld.w	r10,r9++
80007966:	10 aa       	st.w	r8++,r10
80007968:	13 0a       	ld.w	r10,r9++
8000796a:	10 aa       	st.w	r8++,r10
8000796c:	13 0a       	ld.w	r10,r9++
8000796e:	10 aa       	st.w	r8++,r10
80007970:	72 0a       	ld.w	r10,r9[0x0]
80007972:	91 0a       	st.w	r8[0x0],r10
80007974:	72 19       	ld.w	r9,r9[0x4]
80007976:	91 19       	st.w	r8[0x4],r9
80007978:	c0 48       	rjmp	80007980 <_realloc_r+0x258>
8000797a:	08 9b       	mov	r11,r4
8000797c:	fe b0 fb c3 	rcall	80007102 <memmove>
80007980:	08 9b       	mov	r11,r4
80007982:	04 9c       	mov	r12,r2
80007984:	fe b0 f6 f6 	rcall	80006770 <_free_r>
80007988:	04 9c       	mov	r12,r2
8000798a:	c2 a8       	rjmp	800079de <_realloc_r+0x2b6>
8000798c:	00 93       	mov	r3,r0
8000798e:	02 97       	mov	r7,r1
80007990:	e6 06 01 09 	sub	r9,r3,r6
80007994:	6e 18       	ld.w	r8,r7[0x4]
80007996:	58 f9       	cp.w	r9,15
80007998:	e0 88 00 16 	brls	800079c4 <_realloc_r+0x29c>
8000799c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079a0:	ed e8 10 08 	or	r8,r6,r8
800079a4:	8f 18       	st.w	r7[0x4],r8
800079a6:	12 98       	mov	r8,r9
800079a8:	a1 a8       	sbr	r8,0x0
800079aa:	ee 06 00 0b 	add	r11,r7,r6
800079ae:	f6 09 00 09 	add	r9,r11,r9
800079b2:	97 18       	st.w	r11[0x4],r8
800079b4:	72 18       	ld.w	r8,r9[0x4]
800079b6:	a1 a8       	sbr	r8,0x0
800079b8:	2f 8b       	sub	r11,-8
800079ba:	93 18       	st.w	r9[0x4],r8
800079bc:	04 9c       	mov	r12,r2
800079be:	fe b0 f6 d9 	rcall	80006770 <_free_r>
800079c2:	c0 b8       	rjmp	800079d8 <_realloc_r+0x2b0>
800079c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800079c8:	e7 e8 10 08 	or	r8,r3,r8
800079cc:	8f 18       	st.w	r7[0x4],r8
800079ce:	ee 03 00 03 	add	r3,r7,r3
800079d2:	66 18       	ld.w	r8,r3[0x4]
800079d4:	a1 a8       	sbr	r8,0x0
800079d6:	87 18       	st.w	r3[0x4],r8
800079d8:	04 9c       	mov	r12,r2
800079da:	ee c5 ff f8 	sub	r5,r7,-8
800079de:	fe b0 fb b9 	rcall	80007150 <__malloc_unlock>
800079e2:	0a 9c       	mov	r12,r5
800079e4:	2f fd       	sub	sp,-4
800079e6:	d8 32       	popm	r0-r7,pc

800079e8 <__isinfd>:
800079e8:	14 98       	mov	r8,r10
800079ea:	fc 19 7f f0 	movh	r9,0x7ff0
800079ee:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800079f2:	f0 0b 11 00 	rsub	r11,r8,0
800079f6:	f7 e8 10 08 	or	r8,r11,r8
800079fa:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800079fe:	f2 08 01 08 	sub	r8,r9,r8
80007a02:	f0 0c 11 00 	rsub	r12,r8,0
80007a06:	f9 e8 10 08 	or	r8,r12,r8
80007a0a:	f0 0c 14 1f 	asr	r12,r8,0x1f
80007a0e:	2f fc       	sub	r12,-1
80007a10:	5e fc       	retal	r12

80007a12 <__isnand>:
80007a12:	14 98       	mov	r8,r10
80007a14:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80007a18:	f0 0c 11 00 	rsub	r12,r8,0
80007a1c:	10 4c       	or	r12,r8
80007a1e:	fc 18 7f f0 	movh	r8,0x7ff0
80007a22:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80007a26:	f0 0c 01 0c 	sub	r12,r8,r12
80007a2a:	bf 9c       	lsr	r12,0x1f
80007a2c:	5e fc       	retal	r12
80007a2e:	d7 03       	nop

80007a30 <_sbrk_r>:
80007a30:	d4 21       	pushm	r4-r7,lr
80007a32:	30 08       	mov	r8,0
80007a34:	18 97       	mov	r7,r12
80007a36:	e0 66 06 70 	mov	r6,1648
80007a3a:	16 9c       	mov	r12,r11
80007a3c:	8d 08       	st.w	r6[0x0],r8
80007a3e:	ca fc       	rcall	80007b9c <_sbrk>
80007a40:	5b fc       	cp.w	r12,-1
80007a42:	c0 51       	brne	80007a4c <_sbrk_r+0x1c>
80007a44:	6c 08       	ld.w	r8,r6[0x0]
80007a46:	58 08       	cp.w	r8,0
80007a48:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007a4c:	d8 22       	popm	r4-r7,pc
80007a4e:	d7 03       	nop

80007a50 <__sclose>:
80007a50:	d4 01       	pushm	lr
80007a52:	96 7b       	ld.sh	r11,r11[0xe]
80007a54:	cf ec       	rcall	80007c50 <_close_r>
80007a56:	d8 02       	popm	pc

80007a58 <__sseek>:
80007a58:	d4 21       	pushm	r4-r7,lr
80007a5a:	16 97       	mov	r7,r11
80007a5c:	96 7b       	ld.sh	r11,r11[0xe]
80007a5e:	c8 5d       	rcall	80007d68 <_lseek_r>
80007a60:	8e 68       	ld.sh	r8,r7[0xc]
80007a62:	10 99       	mov	r9,r8
80007a64:	ad c8       	cbr	r8,0xc
80007a66:	ad a9       	sbr	r9,0xc
80007a68:	5b fc       	cp.w	r12,-1
80007a6a:	ef f8 0c 06 	st.heq	r7[0xc],r8
80007a6e:	ef f9 1c 06 	st.hne	r7[0xc],r9
80007a72:	ef fc 1a 15 	st.wne	r7[0x54],r12
80007a76:	d8 22       	popm	r4-r7,pc

80007a78 <__swrite>:
80007a78:	d4 21       	pushm	r4-r7,lr
80007a7a:	96 68       	ld.sh	r8,r11[0xc]
80007a7c:	16 97       	mov	r7,r11
80007a7e:	14 95       	mov	r5,r10
80007a80:	12 94       	mov	r4,r9
80007a82:	e2 18 01 00 	andl	r8,0x100,COH
80007a86:	18 96       	mov	r6,r12
80007a88:	c0 50       	breq	80007a92 <__swrite+0x1a>
80007a8a:	30 29       	mov	r9,2
80007a8c:	30 0a       	mov	r10,0
80007a8e:	96 7b       	ld.sh	r11,r11[0xe]
80007a90:	c6 cd       	rcall	80007d68 <_lseek_r>
80007a92:	8e 68       	ld.sh	r8,r7[0xc]
80007a94:	ad c8       	cbr	r8,0xc
80007a96:	08 99       	mov	r9,r4
80007a98:	0a 9a       	mov	r10,r5
80007a9a:	8e 7b       	ld.sh	r11,r7[0xe]
80007a9c:	0c 9c       	mov	r12,r6
80007a9e:	ae 68       	st.h	r7[0xc],r8
80007aa0:	c9 ac       	rcall	80007bd4 <_write_r>
80007aa2:	d8 22       	popm	r4-r7,pc

80007aa4 <__sread>:
80007aa4:	d4 21       	pushm	r4-r7,lr
80007aa6:	16 97       	mov	r7,r11
80007aa8:	96 7b       	ld.sh	r11,r11[0xe]
80007aaa:	c7 1d       	rcall	80007d8c <_read_r>
80007aac:	c0 65       	brlt	80007ab8 <__sread+0x14>
80007aae:	6f 58       	ld.w	r8,r7[0x54]
80007ab0:	18 08       	add	r8,r12
80007ab2:	ef 48 00 54 	st.w	r7[84],r8
80007ab6:	d8 22       	popm	r4-r7,pc
80007ab8:	8e 68       	ld.sh	r8,r7[0xc]
80007aba:	ad c8       	cbr	r8,0xc
80007abc:	ae 68       	st.h	r7[0xc],r8
80007abe:	d8 22       	popm	r4-r7,pc

80007ac0 <strlen>:
80007ac0:	30 09       	mov	r9,0
80007ac2:	18 98       	mov	r8,r12
80007ac4:	c0 28       	rjmp	80007ac8 <strlen+0x8>
80007ac6:	2f f8       	sub	r8,-1
80007ac8:	11 8a       	ld.ub	r10,r8[0x0]
80007aca:	f2 0a 18 00 	cp.b	r10,r9
80007ace:	cf c1       	brne	80007ac6 <strlen+0x6>
80007ad0:	f0 0c 01 0c 	sub	r12,r8,r12
80007ad4:	5e fc       	retal	r12
80007ad6:	d7 03       	nop

80007ad8 <_close>:
80007ad8:	30 28       	mov	r8,2
80007ada:	d6 73       	breakpoint
80007adc:	3f fc       	mov	r12,-1
80007ade:	35 8b       	mov	r11,88
80007ae0:	58 0c       	cp.w	r12,0
80007ae2:	5e 4c       	retge	r12
80007ae4:	e0 6a 06 70 	mov	r10,1648
80007ae8:	95 0b       	st.w	r10[0x0],r11
80007aea:	5e fc       	retal	r12

80007aec <_lseek>:
80007aec:	30 58       	mov	r8,5
80007aee:	d6 73       	breakpoint
80007af0:	3f fc       	mov	r12,-1
80007af2:	35 8b       	mov	r11,88
80007af4:	58 0c       	cp.w	r12,0
80007af6:	5e 4c       	retge	r12
80007af8:	e0 6a 06 70 	mov	r10,1648
80007afc:	95 0b       	st.w	r10[0x0],r11
80007afe:	5e fc       	retal	r12

80007b00 <_read>:
80007b00:	30 38       	mov	r8,3
80007b02:	d6 73       	breakpoint
80007b04:	3f fc       	mov	r12,-1
80007b06:	35 8b       	mov	r11,88
80007b08:	58 0c       	cp.w	r12,0
80007b0a:	5e 4c       	retge	r12
80007b0c:	e0 6a 06 70 	mov	r10,1648
80007b10:	95 0b       	st.w	r10[0x0],r11
80007b12:	5e fc       	retal	r12

80007b14 <_write>:
80007b14:	30 48       	mov	r8,4
80007b16:	d6 73       	breakpoint
80007b18:	3f fc       	mov	r12,-1
80007b1a:	35 8b       	mov	r11,88
80007b1c:	58 0c       	cp.w	r12,0
80007b1e:	5e 4c       	retge	r12
80007b20:	e0 6a 06 70 	mov	r10,1648
80007b24:	95 0b       	st.w	r10[0x0],r11
80007b26:	5e fc       	retal	r12

80007b28 <isatty>:
80007b28:	30 b8       	mov	r8,11
80007b2a:	d6 73       	breakpoint
80007b2c:	3f fc       	mov	r12,-1
80007b2e:	35 8b       	mov	r11,88
80007b30:	58 0c       	cp.w	r12,0
80007b32:	5e 4c       	retge	r12
80007b34:	e0 6a 06 70 	mov	r10,1648
80007b38:	95 0b       	st.w	r10[0x0],r11
80007b3a:	5e fc       	retal	r12

80007b3c <_fstat_host>:
80007b3c:	30 98       	mov	r8,9
80007b3e:	d6 73       	breakpoint
80007b40:	3f fc       	mov	r12,-1
80007b42:	35 8b       	mov	r11,88
80007b44:	58 0c       	cp.w	r12,0
80007b46:	5e 4c       	retge	r12
80007b48:	e0 6a 06 70 	mov	r10,1648
80007b4c:	95 0b       	st.w	r10[0x0],r11
80007b4e:	5e fc       	retal	r12

80007b50 <_fstat>:
80007b50:	d4 21       	pushm	r4-r7,lr
80007b52:	21 0d       	sub	sp,64
80007b54:	16 97       	mov	r7,r11
80007b56:	1a 9b       	mov	r11,sp
80007b58:	cf 2f       	rcall	80007b3c <_fstat_host>
80007b5a:	c0 34       	brge	80007b60 <_fstat+0x10>
80007b5c:	3f fc       	mov	r12,-1
80007b5e:	c1 c8       	rjmp	80007b96 <_fstat+0x46>
80007b60:	40 08       	lddsp	r8,sp[0x0]
80007b62:	ae 08       	st.h	r7[0x0],r8
80007b64:	40 18       	lddsp	r8,sp[0x4]
80007b66:	ae 18       	st.h	r7[0x2],r8
80007b68:	40 28       	lddsp	r8,sp[0x8]
80007b6a:	8f 18       	st.w	r7[0x4],r8
80007b6c:	40 38       	lddsp	r8,sp[0xc]
80007b6e:	ae 48       	st.h	r7[0x8],r8
80007b70:	40 48       	lddsp	r8,sp[0x10]
80007b72:	ae 58       	st.h	r7[0xa],r8
80007b74:	40 58       	lddsp	r8,sp[0x14]
80007b76:	ae 68       	st.h	r7[0xc],r8
80007b78:	40 68       	lddsp	r8,sp[0x18]
80007b7a:	ae 78       	st.h	r7[0xe],r8
80007b7c:	40 88       	lddsp	r8,sp[0x20]
80007b7e:	8f 48       	st.w	r7[0x10],r8
80007b80:	40 a8       	lddsp	r8,sp[0x28]
80007b82:	8f b8       	st.w	r7[0x2c],r8
80007b84:	40 c8       	lddsp	r8,sp[0x30]
80007b86:	8f c8       	st.w	r7[0x30],r8
80007b88:	40 d8       	lddsp	r8,sp[0x34]
80007b8a:	8f 58       	st.w	r7[0x14],r8
80007b8c:	40 e8       	lddsp	r8,sp[0x38]
80007b8e:	30 0c       	mov	r12,0
80007b90:	8f 78       	st.w	r7[0x1c],r8
80007b92:	40 f8       	lddsp	r8,sp[0x3c]
80007b94:	8f 98       	st.w	r7[0x24],r8
80007b96:	2f 0d       	sub	sp,-64
80007b98:	d8 22       	popm	r4-r7,pc
80007b9a:	d7 03       	nop

80007b9c <_sbrk>:
80007b9c:	d4 01       	pushm	lr
80007b9e:	e0 68 06 5c 	mov	r8,1628
80007ba2:	70 09       	ld.w	r9,r8[0x0]
80007ba4:	58 09       	cp.w	r9,0
80007ba6:	c0 41       	brne	80007bae <_sbrk+0x12>
80007ba8:	e0 69 06 78 	mov	r9,1656
80007bac:	91 09       	st.w	r8[0x0],r9
80007bae:	e0 69 06 5c 	mov	r9,1628
80007bb2:	e0 6a f0 00 	mov	r10,61440
80007bb6:	72 08       	ld.w	r8,r9[0x0]
80007bb8:	f0 0c 00 0c 	add	r12,r8,r12
80007bbc:	14 3c       	cp.w	r12,r10
80007bbe:	e0 8b 00 04 	brhi	80007bc6 <_sbrk+0x2a>
80007bc2:	93 0c       	st.w	r9[0x0],r12
80007bc4:	c0 58       	rjmp	80007bce <_sbrk+0x32>
80007bc6:	c5 5c       	rcall	80007c70 <__errno>
80007bc8:	30 c8       	mov	r8,12
80007bca:	99 08       	st.w	r12[0x0],r8
80007bcc:	3f f8       	mov	r8,-1
80007bce:	10 9c       	mov	r12,r8
80007bd0:	d8 02       	popm	pc
80007bd2:	d7 03       	nop

80007bd4 <_write_r>:
80007bd4:	d4 21       	pushm	r4-r7,lr
80007bd6:	16 98       	mov	r8,r11
80007bd8:	18 97       	mov	r7,r12
80007bda:	10 9c       	mov	r12,r8
80007bdc:	30 08       	mov	r8,0
80007bde:	14 9b       	mov	r11,r10
80007be0:	e0 66 06 70 	mov	r6,1648
80007be4:	12 9a       	mov	r10,r9
80007be6:	8d 08       	st.w	r6[0x0],r8
80007be8:	c9 6f       	rcall	80007b14 <_write>
80007bea:	5b fc       	cp.w	r12,-1
80007bec:	c0 51       	brne	80007bf6 <_write_r+0x22>
80007bee:	6c 08       	ld.w	r8,r6[0x0]
80007bf0:	58 08       	cp.w	r8,0
80007bf2:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007bf6:	d8 22       	popm	r4-r7,pc

80007bf8 <_calloc_r>:
80007bf8:	d4 21       	pushm	r4-r7,lr
80007bfa:	f4 0b 02 4b 	mul	r11,r10,r11
80007bfe:	fe b0 f8 5f 	rcall	80006cbc <_malloc_r>
80007c02:	18 97       	mov	r7,r12
80007c04:	c2 30       	breq	80007c4a <_calloc_r+0x52>
80007c06:	f8 fa ff fc 	ld.w	r10,r12[-4]
80007c0a:	e0 1a ff fc 	andl	r10,0xfffc
80007c0e:	20 4a       	sub	r10,4
80007c10:	e0 4a 00 24 	cp.w	r10,36
80007c14:	e0 8b 00 18 	brhi	80007c44 <_calloc_r+0x4c>
80007c18:	18 98       	mov	r8,r12
80007c1a:	59 3a       	cp.w	r10,19
80007c1c:	e0 88 00 0f 	brls	80007c3a <_calloc_r+0x42>
80007c20:	30 09       	mov	r9,0
80007c22:	10 a9       	st.w	r8++,r9
80007c24:	10 a9       	st.w	r8++,r9
80007c26:	59 ba       	cp.w	r10,27
80007c28:	e0 88 00 09 	brls	80007c3a <_calloc_r+0x42>
80007c2c:	10 a9       	st.w	r8++,r9
80007c2e:	10 a9       	st.w	r8++,r9
80007c30:	e0 4a 00 24 	cp.w	r10,36
80007c34:	c0 31       	brne	80007c3a <_calloc_r+0x42>
80007c36:	10 a9       	st.w	r8++,r9
80007c38:	10 a9       	st.w	r8++,r9
80007c3a:	30 09       	mov	r9,0
80007c3c:	10 a9       	st.w	r8++,r9
80007c3e:	91 19       	st.w	r8[0x4],r9
80007c40:	91 09       	st.w	r8[0x0],r9
80007c42:	c0 48       	rjmp	80007c4a <_calloc_r+0x52>
80007c44:	30 0b       	mov	r11,0
80007c46:	fe b0 fa 7d 	rcall	80007140 <memset>
80007c4a:	0e 9c       	mov	r12,r7
80007c4c:	d8 22       	popm	r4-r7,pc
80007c4e:	d7 03       	nop

80007c50 <_close_r>:
80007c50:	d4 21       	pushm	r4-r7,lr
80007c52:	30 08       	mov	r8,0
80007c54:	18 97       	mov	r7,r12
80007c56:	e0 66 06 70 	mov	r6,1648
80007c5a:	16 9c       	mov	r12,r11
80007c5c:	8d 08       	st.w	r6[0x0],r8
80007c5e:	c3 df       	rcall	80007ad8 <_close>
80007c60:	5b fc       	cp.w	r12,-1
80007c62:	c0 51       	brne	80007c6c <_close_r+0x1c>
80007c64:	6c 08       	ld.w	r8,r6[0x0]
80007c66:	58 08       	cp.w	r8,0
80007c68:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007c6c:	d8 22       	popm	r4-r7,pc
80007c6e:	d7 03       	nop

80007c70 <__errno>:
80007c70:	e0 68 01 00 	mov	r8,256
80007c74:	70 0c       	ld.w	r12,r8[0x0]
80007c76:	2f 4c       	sub	r12,-12
80007c78:	5e fc       	retal	r12
80007c7a:	d7 03       	nop

80007c7c <_fclose_r>:
80007c7c:	d4 21       	pushm	r4-r7,lr
80007c7e:	18 96       	mov	r6,r12
80007c80:	16 97       	mov	r7,r11
80007c82:	58 0b       	cp.w	r11,0
80007c84:	c0 31       	brne	80007c8a <_fclose_r+0xe>
80007c86:	16 95       	mov	r5,r11
80007c88:	c5 38       	rjmp	80007d2e <_fclose_r+0xb2>
80007c8a:	fe b0 f4 87 	rcall	80006598 <__sfp_lock_acquire>
80007c8e:	58 06       	cp.w	r6,0
80007c90:	c0 70       	breq	80007c9e <_fclose_r+0x22>
80007c92:	6c 68       	ld.w	r8,r6[0x18]
80007c94:	58 08       	cp.w	r8,0
80007c96:	c0 41       	brne	80007c9e <_fclose_r+0x22>
80007c98:	0c 9c       	mov	r12,r6
80007c9a:	fe b0 f4 d1 	rcall	8000663c <__sinit>
80007c9e:	fe c8 e8 f2 	sub	r8,pc,-5902
80007ca2:	10 37       	cp.w	r7,r8
80007ca4:	c0 31       	brne	80007caa <_fclose_r+0x2e>
80007ca6:	6c 07       	ld.w	r7,r6[0x0]
80007ca8:	c0 c8       	rjmp	80007cc0 <_fclose_r+0x44>
80007caa:	fe c8 e8 de 	sub	r8,pc,-5922
80007cae:	10 37       	cp.w	r7,r8
80007cb0:	c0 31       	brne	80007cb6 <_fclose_r+0x3a>
80007cb2:	6c 17       	ld.w	r7,r6[0x4]
80007cb4:	c0 68       	rjmp	80007cc0 <_fclose_r+0x44>
80007cb6:	fe c8 e8 ca 	sub	r8,pc,-5942
80007cba:	10 37       	cp.w	r7,r8
80007cbc:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007cc0:	8e 69       	ld.sh	r9,r7[0xc]
80007cc2:	30 08       	mov	r8,0
80007cc4:	f0 09 19 00 	cp.h	r9,r8
80007cc8:	c0 51       	brne	80007cd2 <_fclose_r+0x56>
80007cca:	fe b0 f4 68 	rcall	8000659a <__sfp_lock_release>
80007cce:	30 05       	mov	r5,0
80007cd0:	c2 f8       	rjmp	80007d2e <_fclose_r+0xb2>
80007cd2:	0e 9b       	mov	r11,r7
80007cd4:	0c 9c       	mov	r12,r6
80007cd6:	fe b0 f3 db 	rcall	8000648c <_fflush_r>
80007cda:	6e c8       	ld.w	r8,r7[0x30]
80007cdc:	18 95       	mov	r5,r12
80007cde:	58 08       	cp.w	r8,0
80007ce0:	c0 60       	breq	80007cec <_fclose_r+0x70>
80007ce2:	6e 8b       	ld.w	r11,r7[0x20]
80007ce4:	0c 9c       	mov	r12,r6
80007ce6:	5d 18       	icall	r8
80007ce8:	f9 b5 05 ff 	movlt	r5,-1
80007cec:	8e 68       	ld.sh	r8,r7[0xc]
80007cee:	ed b8 00 07 	bld	r8,0x7
80007cf2:	c0 51       	brne	80007cfc <_fclose_r+0x80>
80007cf4:	6e 4b       	ld.w	r11,r7[0x10]
80007cf6:	0c 9c       	mov	r12,r6
80007cf8:	fe b0 f5 3c 	rcall	80006770 <_free_r>
80007cfc:	6e db       	ld.w	r11,r7[0x34]
80007cfe:	58 0b       	cp.w	r11,0
80007d00:	c0 a0       	breq	80007d14 <_fclose_r+0x98>
80007d02:	ee c8 ff bc 	sub	r8,r7,-68
80007d06:	10 3b       	cp.w	r11,r8
80007d08:	c0 40       	breq	80007d10 <_fclose_r+0x94>
80007d0a:	0c 9c       	mov	r12,r6
80007d0c:	fe b0 f5 32 	rcall	80006770 <_free_r>
80007d10:	30 08       	mov	r8,0
80007d12:	8f d8       	st.w	r7[0x34],r8
80007d14:	6f 2b       	ld.w	r11,r7[0x48]
80007d16:	58 0b       	cp.w	r11,0
80007d18:	c0 70       	breq	80007d26 <_fclose_r+0xaa>
80007d1a:	0c 9c       	mov	r12,r6
80007d1c:	fe b0 f5 2a 	rcall	80006770 <_free_r>
80007d20:	30 08       	mov	r8,0
80007d22:	ef 48 00 48 	st.w	r7[72],r8
80007d26:	30 08       	mov	r8,0
80007d28:	ae 68       	st.h	r7[0xc],r8
80007d2a:	fe b0 f4 38 	rcall	8000659a <__sfp_lock_release>
80007d2e:	0a 9c       	mov	r12,r5
80007d30:	d8 22       	popm	r4-r7,pc
80007d32:	d7 03       	nop

80007d34 <fclose>:
80007d34:	d4 01       	pushm	lr
80007d36:	e0 68 01 00 	mov	r8,256
80007d3a:	18 9b       	mov	r11,r12
80007d3c:	70 0c       	ld.w	r12,r8[0x0]
80007d3e:	c9 ff       	rcall	80007c7c <_fclose_r>
80007d40:	d8 02       	popm	pc
80007d42:	d7 03       	nop

80007d44 <_fstat_r>:
80007d44:	d4 21       	pushm	r4-r7,lr
80007d46:	16 98       	mov	r8,r11
80007d48:	18 97       	mov	r7,r12
80007d4a:	10 9c       	mov	r12,r8
80007d4c:	30 08       	mov	r8,0
80007d4e:	e0 66 06 70 	mov	r6,1648
80007d52:	14 9b       	mov	r11,r10
80007d54:	8d 08       	st.w	r6[0x0],r8
80007d56:	cf de       	rcall	80007b50 <_fstat>
80007d58:	5b fc       	cp.w	r12,-1
80007d5a:	c0 51       	brne	80007d64 <_fstat_r+0x20>
80007d5c:	6c 08       	ld.w	r8,r6[0x0]
80007d5e:	58 08       	cp.w	r8,0
80007d60:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d64:	d8 22       	popm	r4-r7,pc
80007d66:	d7 03       	nop

80007d68 <_lseek_r>:
80007d68:	d4 21       	pushm	r4-r7,lr
80007d6a:	16 98       	mov	r8,r11
80007d6c:	18 97       	mov	r7,r12
80007d6e:	10 9c       	mov	r12,r8
80007d70:	30 08       	mov	r8,0
80007d72:	14 9b       	mov	r11,r10
80007d74:	e0 66 06 70 	mov	r6,1648
80007d78:	12 9a       	mov	r10,r9
80007d7a:	8d 08       	st.w	r6[0x0],r8
80007d7c:	cb 8e       	rcall	80007aec <_lseek>
80007d7e:	5b fc       	cp.w	r12,-1
80007d80:	c0 51       	brne	80007d8a <_lseek_r+0x22>
80007d82:	6c 08       	ld.w	r8,r6[0x0]
80007d84:	58 08       	cp.w	r8,0
80007d86:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007d8a:	d8 22       	popm	r4-r7,pc

80007d8c <_read_r>:
80007d8c:	d4 21       	pushm	r4-r7,lr
80007d8e:	16 98       	mov	r8,r11
80007d90:	18 97       	mov	r7,r12
80007d92:	10 9c       	mov	r12,r8
80007d94:	30 08       	mov	r8,0
80007d96:	14 9b       	mov	r11,r10
80007d98:	e0 66 06 70 	mov	r6,1648
80007d9c:	12 9a       	mov	r10,r9
80007d9e:	8d 08       	st.w	r6[0x0],r8
80007da0:	cb 0e       	rcall	80007b00 <_read>
80007da2:	5b fc       	cp.w	r12,-1
80007da4:	c0 51       	brne	80007dae <_read_r+0x22>
80007da6:	6c 08       	ld.w	r8,r6[0x0]
80007da8:	58 08       	cp.w	r8,0
80007daa:	ef f8 1a 03 	st.wne	r7[0xc],r8
80007dae:	d8 22       	popm	r4-r7,pc

80007db0 <__avr32_f64_mul>:
80007db0:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80007db4:	e0 80 00 dc 	breq	80007f6c <__avr32_f64_mul_op1_zero>
80007db8:	d4 21       	pushm	r4-r7,lr
80007dba:	f7 e9 20 0e 	eor	lr,r11,r9
80007dbe:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80007dc2:	30 15       	mov	r5,1
80007dc4:	c4 30       	breq	80007e4a <__avr32_f64_mul_op1_subnormal>
80007dc6:	ab 6b       	lsl	r11,0xa
80007dc8:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80007dcc:	ab 6a       	lsl	r10,0xa
80007dce:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80007dd2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80007dd6:	c5 c0       	breq	80007e8e <__avr32_f64_mul_op2_subnormal>
80007dd8:	a1 78       	lsl	r8,0x1
80007dda:	5c f9       	rol	r9
80007ddc:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80007de0:	e0 47 07 ff 	cp.w	r7,2047
80007de4:	c7 70       	breq	80007ed2 <__avr32_f64_mul_op_nan_or_inf>
80007de6:	e0 46 07 ff 	cp.w	r6,2047
80007dea:	c7 40       	breq	80007ed2 <__avr32_f64_mul_op_nan_or_inf>
80007dec:	ee 06 00 0c 	add	r12,r7,r6
80007df0:	e0 2c 03 fe 	sub	r12,1022
80007df4:	f6 08 06 44 	mulu.d	r4,r11,r8
80007df8:	f4 09 07 44 	macu.d	r4,r10,r9
80007dfc:	f4 08 06 46 	mulu.d	r6,r10,r8
80007e00:	f6 09 06 4a 	mulu.d	r10,r11,r9
80007e04:	08 07       	add	r7,r4
80007e06:	f4 05 00 4a 	adc	r10,r10,r5
80007e0a:	5c 0b       	acr	r11
80007e0c:	ed bb 00 14 	bld	r11,0x14
80007e10:	c0 50       	breq	80007e1a <__avr32_f64_mul+0x6a>
80007e12:	a1 77       	lsl	r7,0x1
80007e14:	5c fa       	rol	r10
80007e16:	5c fb       	rol	r11
80007e18:	20 1c       	sub	r12,1
80007e1a:	58 0c       	cp.w	r12,0
80007e1c:	e0 8a 00 6f 	brle	80007efa <__avr32_f64_mul_res_subnormal>
80007e20:	e0 4c 07 ff 	cp.w	r12,2047
80007e24:	e0 84 00 9c 	brge	80007f5c <__avr32_f64_mul_res_inf>
80007e28:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80007e2c:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80007e30:	ef e6 12 17 	or	r7,r7,r6>>0x1
80007e34:	ee 17 80 00 	eorh	r7,0x8000
80007e38:	f1 b7 04 20 	satu	r7,0x1
80007e3c:	0e 0a       	add	r10,r7
80007e3e:	5c 0b       	acr	r11
80007e40:	ed be 00 1f 	bld	lr,0x1f
80007e44:	ef bb 00 1f 	bst	r11,0x1f
80007e48:	d8 22       	popm	r4-r7,pc

80007e4a <__avr32_f64_mul_op1_subnormal>:
80007e4a:	e4 1b 00 0f 	andh	r11,0xf
80007e4e:	f4 0c 12 00 	clz	r12,r10
80007e52:	f6 06 12 00 	clz	r6,r11
80007e56:	f7 bc 03 e1 	sublo	r12,-31
80007e5a:	f8 06 17 30 	movlo	r6,r12
80007e5e:	f7 b6 02 01 	subhs	r6,1
80007e62:	e0 46 00 20 	cp.w	r6,32
80007e66:	c0 d4       	brge	80007e80 <__avr32_f64_mul_op1_subnormal+0x36>
80007e68:	ec 0c 11 20 	rsub	r12,r6,32
80007e6c:	f6 06 09 4b 	lsl	r11,r11,r6
80007e70:	f4 0c 0a 4c 	lsr	r12,r10,r12
80007e74:	18 4b       	or	r11,r12
80007e76:	f4 06 09 4a 	lsl	r10,r10,r6
80007e7a:	20 b6       	sub	r6,11
80007e7c:	0c 17       	sub	r7,r6
80007e7e:	ca ab       	rjmp	80007dd2 <__avr32_f64_mul+0x22>
80007e80:	f4 06 09 4b 	lsl	r11,r10,r6
80007e84:	c6 40       	breq	80007f4c <__avr32_f64_mul_res_zero>
80007e86:	30 0a       	mov	r10,0
80007e88:	20 b6       	sub	r6,11
80007e8a:	0c 17       	sub	r7,r6
80007e8c:	ca 3b       	rjmp	80007dd2 <__avr32_f64_mul+0x22>

80007e8e <__avr32_f64_mul_op2_subnormal>:
80007e8e:	e4 19 00 0f 	andh	r9,0xf
80007e92:	f0 0c 12 00 	clz	r12,r8
80007e96:	f2 05 12 00 	clz	r5,r9
80007e9a:	f7 bc 03 ea 	sublo	r12,-22
80007e9e:	f8 05 17 30 	movlo	r5,r12
80007ea2:	f7 b5 02 0a 	subhs	r5,10
80007ea6:	e0 45 00 20 	cp.w	r5,32
80007eaa:	c0 d4       	brge	80007ec4 <__avr32_f64_mul_op2_subnormal+0x36>
80007eac:	ea 0c 11 20 	rsub	r12,r5,32
80007eb0:	f2 05 09 49 	lsl	r9,r9,r5
80007eb4:	f0 0c 0a 4c 	lsr	r12,r8,r12
80007eb8:	18 49       	or	r9,r12
80007eba:	f0 05 09 48 	lsl	r8,r8,r5
80007ebe:	20 25       	sub	r5,2
80007ec0:	0a 16       	sub	r6,r5
80007ec2:	c8 fb       	rjmp	80007de0 <__avr32_f64_mul+0x30>
80007ec4:	f0 05 09 49 	lsl	r9,r8,r5
80007ec8:	c4 20       	breq	80007f4c <__avr32_f64_mul_res_zero>
80007eca:	30 08       	mov	r8,0
80007ecc:	20 25       	sub	r5,2
80007ece:	0a 16       	sub	r6,r5
80007ed0:	c8 8b       	rjmp	80007de0 <__avr32_f64_mul+0x30>

80007ed2 <__avr32_f64_mul_op_nan_or_inf>:
80007ed2:	e4 19 00 0f 	andh	r9,0xf
80007ed6:	e4 1b 00 0f 	andh	r11,0xf
80007eda:	14 4b       	or	r11,r10
80007edc:	10 49       	or	r9,r8
80007ede:	e0 47 07 ff 	cp.w	r7,2047
80007ee2:	c0 91       	brne	80007ef4 <__avr32_f64_mul_op1_not_naninf>
80007ee4:	58 0b       	cp.w	r11,0
80007ee6:	c3 81       	brne	80007f56 <__avr32_f64_mul_res_nan>
80007ee8:	e0 46 07 ff 	cp.w	r6,2047
80007eec:	c3 81       	brne	80007f5c <__avr32_f64_mul_res_inf>
80007eee:	58 09       	cp.w	r9,0
80007ef0:	c3 60       	breq	80007f5c <__avr32_f64_mul_res_inf>
80007ef2:	c3 28       	rjmp	80007f56 <__avr32_f64_mul_res_nan>

80007ef4 <__avr32_f64_mul_op1_not_naninf>:
80007ef4:	58 09       	cp.w	r9,0
80007ef6:	c3 30       	breq	80007f5c <__avr32_f64_mul_res_inf>
80007ef8:	c2 f8       	rjmp	80007f56 <__avr32_f64_mul_res_nan>

80007efa <__avr32_f64_mul_res_subnormal>:
80007efa:	5c 3c       	neg	r12
80007efc:	2f fc       	sub	r12,-1
80007efe:	f1 bc 04 c0 	satu	r12,0x6
80007f02:	e0 4c 00 20 	cp.w	r12,32
80007f06:	c1 14       	brge	80007f28 <__avr32_f64_mul_res_subnormal+0x2e>
80007f08:	f8 08 11 20 	rsub	r8,r12,32
80007f0c:	0e 46       	or	r6,r7
80007f0e:	ee 0c 0a 47 	lsr	r7,r7,r12
80007f12:	f4 08 09 49 	lsl	r9,r10,r8
80007f16:	12 47       	or	r7,r9
80007f18:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007f1c:	f6 08 09 49 	lsl	r9,r11,r8
80007f20:	12 4a       	or	r10,r9
80007f22:	f6 0c 0a 4b 	lsr	r11,r11,r12
80007f26:	c8 3b       	rjmp	80007e2c <__avr32_f64_mul+0x7c>
80007f28:	f8 08 11 20 	rsub	r8,r12,32
80007f2c:	f9 b9 00 00 	moveq	r9,0
80007f30:	c0 30       	breq	80007f36 <__avr32_f64_mul_res_subnormal+0x3c>
80007f32:	f6 08 09 49 	lsl	r9,r11,r8
80007f36:	0e 46       	or	r6,r7
80007f38:	ed ea 10 16 	or	r6,r6,r10<<0x1
80007f3c:	f4 0c 0a 4a 	lsr	r10,r10,r12
80007f40:	f3 ea 10 07 	or	r7,r9,r10
80007f44:	f6 0c 0a 4a 	lsr	r10,r11,r12
80007f48:	30 0b       	mov	r11,0
80007f4a:	c7 1b       	rjmp	80007e2c <__avr32_f64_mul+0x7c>

80007f4c <__avr32_f64_mul_res_zero>:
80007f4c:	1c 9b       	mov	r11,lr
80007f4e:	e6 1b 80 00 	andh	r11,0x8000,COH
80007f52:	30 0a       	mov	r10,0
80007f54:	d8 22       	popm	r4-r7,pc

80007f56 <__avr32_f64_mul_res_nan>:
80007f56:	3f fb       	mov	r11,-1
80007f58:	3f fa       	mov	r10,-1
80007f5a:	d8 22       	popm	r4-r7,pc

80007f5c <__avr32_f64_mul_res_inf>:
80007f5c:	f0 6b 00 00 	mov	r11,-1048576
80007f60:	ed be 00 1f 	bld	lr,0x1f
80007f64:	ef bb 00 1f 	bst	r11,0x1f
80007f68:	30 0a       	mov	r10,0
80007f6a:	d8 22       	popm	r4-r7,pc

80007f6c <__avr32_f64_mul_op1_zero>:
80007f6c:	f7 e9 20 0b 	eor	r11,r11,r9
80007f70:	e6 1b 80 00 	andh	r11,0x8000,COH
80007f74:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80007f78:	e0 4c 07 ff 	cp.w	r12,2047
80007f7c:	5e 1c       	retne	r12
80007f7e:	3f fa       	mov	r10,-1
80007f80:	3f fb       	mov	r11,-1
80007f82:	5e fc       	retal	r12

80007f84 <__avr32_f64_sub_from_add>:
80007f84:	ee 19 80 00 	eorh	r9,0x8000

80007f88 <__avr32_f64_sub>:
80007f88:	f7 e9 20 0c 	eor	r12,r11,r9
80007f8c:	e0 86 00 ca 	brmi	80008120 <__avr32_f64_add_from_sub>
80007f90:	eb cd 40 e0 	pushm	r5-r7,lr
80007f94:	16 9c       	mov	r12,r11
80007f96:	e6 1c 80 00 	andh	r12,0x8000,COH
80007f9a:	bf db       	cbr	r11,0x1f
80007f9c:	bf d9       	cbr	r9,0x1f
80007f9e:	10 3a       	cp.w	r10,r8
80007fa0:	f2 0b 13 00 	cpc	r11,r9
80007fa4:	c0 92       	brcc	80007fb6 <__avr32_f64_sub+0x2e>
80007fa6:	16 97       	mov	r7,r11
80007fa8:	12 9b       	mov	r11,r9
80007faa:	0e 99       	mov	r9,r7
80007fac:	14 97       	mov	r7,r10
80007fae:	10 9a       	mov	r10,r8
80007fb0:	0e 98       	mov	r8,r7
80007fb2:	ee 1c 80 00 	eorh	r12,0x8000
80007fb6:	f6 07 16 14 	lsr	r7,r11,0x14
80007fba:	ab 7b       	lsl	r11,0xb
80007fbc:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80007fc0:	ab 7a       	lsl	r10,0xb
80007fc2:	bf bb       	sbr	r11,0x1f
80007fc4:	f2 06 16 14 	lsr	r6,r9,0x14
80007fc8:	c4 40       	breq	80008050 <__avr32_f64_sub_opL_subnormal>
80007fca:	ab 79       	lsl	r9,0xb
80007fcc:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80007fd0:	ab 78       	lsl	r8,0xb
80007fd2:	bf b9       	sbr	r9,0x1f

80007fd4 <__avr32_f64_sub_opL_subnormal_done>:
80007fd4:	e0 47 07 ff 	cp.w	r7,2047
80007fd8:	c4 f0       	breq	80008076 <__avr32_f64_sub_opH_nan_or_inf>
80007fda:	0e 26       	rsub	r6,r7
80007fdc:	c1 20       	breq	80008000 <__avr32_f64_sub_shift_done>
80007fde:	ec 05 11 20 	rsub	r5,r6,32
80007fe2:	e0 46 00 20 	cp.w	r6,32
80007fe6:	c7 c2       	brcc	800080de <__avr32_f64_sub_longshift>
80007fe8:	f0 05 09 4e 	lsl	lr,r8,r5
80007fec:	f2 05 09 45 	lsl	r5,r9,r5
80007ff0:	f0 06 0a 48 	lsr	r8,r8,r6
80007ff4:	f2 06 0a 49 	lsr	r9,r9,r6
80007ff8:	0a 48       	or	r8,r5
80007ffa:	58 0e       	cp.w	lr,0
80007ffc:	5f 1e       	srne	lr
80007ffe:	1c 48       	or	r8,lr

80008000 <__avr32_f64_sub_shift_done>:
80008000:	10 1a       	sub	r10,r8
80008002:	f6 09 01 4b 	sbc	r11,r11,r9
80008006:	f6 06 12 00 	clz	r6,r11
8000800a:	c0 e0       	breq	80008026 <__avr32_f64_sub_longnormalize_done>
8000800c:	c7 83       	brcs	800080fc <__avr32_f64_sub_longnormalize>
8000800e:	ec 0e 11 20 	rsub	lr,r6,32
80008012:	f6 06 09 4b 	lsl	r11,r11,r6
80008016:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000801a:	1c 4b       	or	r11,lr
8000801c:	f4 06 09 4a 	lsl	r10,r10,r6
80008020:	0c 17       	sub	r7,r6
80008022:	e0 8a 00 39 	brle	80008094 <__avr32_f64_sub_subnormal_result>

80008026 <__avr32_f64_sub_longnormalize_done>:
80008026:	f4 09 15 15 	lsl	r9,r10,0x15
8000802a:	ab 9a       	lsr	r10,0xb
8000802c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008030:	ab 9b       	lsr	r11,0xb
80008032:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80008036:	18 4b       	or	r11,r12

80008038 <__avr32_f64_sub_round>:
80008038:	fc 17 80 00 	movh	r7,0x8000
8000803c:	ed ba 00 00 	bld	r10,0x0
80008040:	f7 b7 01 ff 	subne	r7,-1
80008044:	0e 39       	cp.w	r9,r7
80008046:	5f 29       	srhs	r9
80008048:	12 0a       	add	r10,r9
8000804a:	5c 0b       	acr	r11
8000804c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008050 <__avr32_f64_sub_opL_subnormal>:
80008050:	ab 79       	lsl	r9,0xb
80008052:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80008056:	ab 78       	lsl	r8,0xb
80008058:	f3 e8 10 0e 	or	lr,r9,r8
8000805c:	f9 b6 01 01 	movne	r6,1
80008060:	ee 0e 11 00 	rsub	lr,r7,0
80008064:	f9 b7 00 01 	moveq	r7,1
80008068:	ef bb 00 1f 	bst	r11,0x1f
8000806c:	f7 ea 10 0e 	or	lr,r11,r10
80008070:	f9 b7 00 00 	moveq	r7,0
80008074:	cb 0b       	rjmp	80007fd4 <__avr32_f64_sub_opL_subnormal_done>

80008076 <__avr32_f64_sub_opH_nan_or_inf>:
80008076:	bf db       	cbr	r11,0x1f
80008078:	f7 ea 10 0e 	or	lr,r11,r10
8000807c:	c0 81       	brne	8000808c <__avr32_f64_sub_return_nan>
8000807e:	e0 46 07 ff 	cp.w	r6,2047
80008082:	c0 50       	breq	8000808c <__avr32_f64_sub_return_nan>
80008084:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80008088:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000808c <__avr32_f64_sub_return_nan>:
8000808c:	3f fa       	mov	r10,-1
8000808e:	3f fb       	mov	r11,-1
80008090:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80008094 <__avr32_f64_sub_subnormal_result>:
80008094:	5c 37       	neg	r7
80008096:	2f f7       	sub	r7,-1
80008098:	f1 b7 04 c0 	satu	r7,0x6
8000809c:	e0 47 00 20 	cp.w	r7,32
800080a0:	c1 14       	brge	800080c2 <__avr32_f64_sub_subnormal_result+0x2e>
800080a2:	ee 08 11 20 	rsub	r8,r7,32
800080a6:	f4 08 09 49 	lsl	r9,r10,r8
800080aa:	5f 16       	srne	r6
800080ac:	f4 07 0a 4a 	lsr	r10,r10,r7
800080b0:	0c 4a       	or	r10,r6
800080b2:	f6 08 09 49 	lsl	r9,r11,r8
800080b6:	f5 e9 10 0a 	or	r10,r10,r9
800080ba:	f4 07 0a 4b 	lsr	r11,r10,r7
800080be:	30 07       	mov	r7,0
800080c0:	cb 3b       	rjmp	80008026 <__avr32_f64_sub_longnormalize_done>
800080c2:	ee 08 11 40 	rsub	r8,r7,64
800080c6:	f6 08 09 49 	lsl	r9,r11,r8
800080ca:	14 49       	or	r9,r10
800080cc:	5f 16       	srne	r6
800080ce:	f6 07 0a 4a 	lsr	r10,r11,r7
800080d2:	0c 4a       	or	r10,r6
800080d4:	30 0b       	mov	r11,0
800080d6:	30 07       	mov	r7,0
800080d8:	ca 7b       	rjmp	80008026 <__avr32_f64_sub_longnormalize_done>
800080da:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800080de <__avr32_f64_sub_longshift>:
800080de:	f1 b6 04 c0 	satu	r6,0x6
800080e2:	f0 0e 17 00 	moveq	lr,r8
800080e6:	c0 40       	breq	800080ee <__avr32_f64_sub_longshift+0x10>
800080e8:	f2 05 09 4e 	lsl	lr,r9,r5
800080ec:	10 4e       	or	lr,r8
800080ee:	f2 06 0a 48 	lsr	r8,r9,r6
800080f2:	30 09       	mov	r9,0
800080f4:	58 0e       	cp.w	lr,0
800080f6:	5f 1e       	srne	lr
800080f8:	1c 48       	or	r8,lr
800080fa:	c8 3b       	rjmp	80008000 <__avr32_f64_sub_shift_done>

800080fc <__avr32_f64_sub_longnormalize>:
800080fc:	f4 06 12 00 	clz	r6,r10
80008100:	f9 b7 03 00 	movlo	r7,0
80008104:	f9 b6 03 00 	movlo	r6,0
80008108:	f9 bc 03 00 	movlo	r12,0
8000810c:	f7 b6 02 e0 	subhs	r6,-32
80008110:	f4 06 09 4b 	lsl	r11,r10,r6
80008114:	30 0a       	mov	r10,0
80008116:	0c 17       	sub	r7,r6
80008118:	fe 9a ff be 	brle	80008094 <__avr32_f64_sub_subnormal_result>
8000811c:	c8 5b       	rjmp	80008026 <__avr32_f64_sub_longnormalize_done>
8000811e:	d7 03       	nop

80008120 <__avr32_f64_add_from_sub>:
80008120:	ee 19 80 00 	eorh	r9,0x8000

80008124 <__avr32_f64_add>:
80008124:	f7 e9 20 0c 	eor	r12,r11,r9
80008128:	fe 96 ff 2e 	brmi	80007f84 <__avr32_f64_sub_from_add>
8000812c:	eb cd 40 e0 	pushm	r5-r7,lr
80008130:	16 9c       	mov	r12,r11
80008132:	e6 1c 80 00 	andh	r12,0x8000,COH
80008136:	bf db       	cbr	r11,0x1f
80008138:	bf d9       	cbr	r9,0x1f
8000813a:	12 3b       	cp.w	r11,r9
8000813c:	c0 72       	brcc	8000814a <__avr32_f64_add+0x26>
8000813e:	16 97       	mov	r7,r11
80008140:	12 9b       	mov	r11,r9
80008142:	0e 99       	mov	r9,r7
80008144:	14 97       	mov	r7,r10
80008146:	10 9a       	mov	r10,r8
80008148:	0e 98       	mov	r8,r7
8000814a:	30 0e       	mov	lr,0
8000814c:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008150:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80008154:	b5 ab       	sbr	r11,0x14
80008156:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000815a:	c6 20       	breq	8000821e <__avr32_f64_add_op2_subnormal>
8000815c:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80008160:	b5 a9       	sbr	r9,0x14
80008162:	e0 47 07 ff 	cp.w	r7,2047
80008166:	c2 80       	breq	800081b6 <__avr32_f64_add_opH_nan_or_inf>
80008168:	0e 26       	rsub	r6,r7
8000816a:	c1 20       	breq	8000818e <__avr32_f64_add_shift_done>
8000816c:	e0 46 00 36 	cp.w	r6,54
80008170:	c1 52       	brcc	8000819a <__avr32_f64_add_res_of_done>
80008172:	ec 05 11 20 	rsub	r5,r6,32
80008176:	e0 46 00 20 	cp.w	r6,32
8000817a:	c3 52       	brcc	800081e4 <__avr32_f64_add_longshift>
8000817c:	f0 05 09 4e 	lsl	lr,r8,r5
80008180:	f2 05 09 45 	lsl	r5,r9,r5
80008184:	f0 06 0a 48 	lsr	r8,r8,r6
80008188:	f2 06 0a 49 	lsr	r9,r9,r6
8000818c:	0a 48       	or	r8,r5

8000818e <__avr32_f64_add_shift_done>:
8000818e:	10 0a       	add	r10,r8
80008190:	f6 09 00 4b 	adc	r11,r11,r9
80008194:	ed bb 00 15 	bld	r11,0x15
80008198:	c3 40       	breq	80008200 <__avr32_f64_add_res_of>

8000819a <__avr32_f64_add_res_of_done>:
8000819a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000819e:	18 4b       	or	r11,r12

800081a0 <__avr32_f64_add_round>:
800081a0:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
800081a4:	18 4e       	or	lr,r12
800081a6:	ee 1e 80 00 	eorh	lr,0x8000
800081aa:	f1 be 04 20 	satu	lr,0x1
800081ae:	1c 0a       	add	r10,lr
800081b0:	5c 0b       	acr	r11
800081b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081b6 <__avr32_f64_add_opH_nan_or_inf>:
800081b6:	b5 cb       	cbr	r11,0x14
800081b8:	f7 ea 10 0e 	or	lr,r11,r10
800081bc:	c1 01       	brne	800081dc <__avr32_f64_add_return_nan>
800081be:	e0 46 07 ff 	cp.w	r6,2047
800081c2:	c0 30       	breq	800081c8 <__avr32_f64_add_opL_nan_or_inf>
800081c4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081c8 <__avr32_f64_add_opL_nan_or_inf>:
800081c8:	b5 c9       	cbr	r9,0x14
800081ca:	f3 e8 10 0e 	or	lr,r9,r8
800081ce:	c0 71       	brne	800081dc <__avr32_f64_add_return_nan>
800081d0:	30 0a       	mov	r10,0
800081d2:	fc 1b 7f f0 	movh	r11,0x7ff0
800081d6:	18 4b       	or	r11,r12
800081d8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081dc <__avr32_f64_add_return_nan>:
800081dc:	3f fa       	mov	r10,-1
800081de:	3f fb       	mov	r11,-1
800081e0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800081e4 <__avr32_f64_add_longshift>:
800081e4:	f1 b6 04 c0 	satu	r6,0x6
800081e8:	f0 0e 17 00 	moveq	lr,r8
800081ec:	c0 60       	breq	800081f8 <__avr32_f64_add_longshift+0x14>
800081ee:	f2 05 09 4e 	lsl	lr,r9,r5
800081f2:	58 08       	cp.w	r8,0
800081f4:	5f 18       	srne	r8
800081f6:	10 4e       	or	lr,r8
800081f8:	f2 06 0a 48 	lsr	r8,r9,r6
800081fc:	30 09       	mov	r9,0
800081fe:	cc 8b       	rjmp	8000818e <__avr32_f64_add_shift_done>

80008200 <__avr32_f64_add_res_of>:
80008200:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80008204:	a1 9b       	lsr	r11,0x1
80008206:	5d 0a       	ror	r10
80008208:	5d 0e       	ror	lr
8000820a:	2f f7       	sub	r7,-1
8000820c:	e0 47 07 ff 	cp.w	r7,2047
80008210:	f9 ba 00 00 	moveq	r10,0
80008214:	f9 bb 00 00 	moveq	r11,0
80008218:	f9 be 00 00 	moveq	lr,0
8000821c:	cb fb       	rjmp	8000819a <__avr32_f64_add_res_of_done>

8000821e <__avr32_f64_add_op2_subnormal>:
8000821e:	30 16       	mov	r6,1
80008220:	58 07       	cp.w	r7,0
80008222:	ca 01       	brne	80008162 <__avr32_f64_add+0x3e>
80008224:	b5 cb       	cbr	r11,0x14
80008226:	10 0a       	add	r10,r8
80008228:	f6 09 00 4b 	adc	r11,r11,r9
8000822c:	18 4b       	or	r11,r12
8000822e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80008232:	d7 03       	nop

80008234 <__avr32_f64_to_u32>:
80008234:	58 0b       	cp.w	r11,0
80008236:	5e 6d       	retmi	0

80008238 <__avr32_f64_to_s32>:
80008238:	f6 0c 15 01 	lsl	r12,r11,0x1
8000823c:	b5 9c       	lsr	r12,0x15
8000823e:	e0 2c 03 ff 	sub	r12,1023
80008242:	5e 3d       	retlo	0
80008244:	f8 0c 11 1f 	rsub	r12,r12,31
80008248:	16 99       	mov	r9,r11
8000824a:	ab 7b       	lsl	r11,0xb
8000824c:	bf bb       	sbr	r11,0x1f
8000824e:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80008252:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008256:	a1 79       	lsl	r9,0x1
80008258:	5e 2b       	reths	r11
8000825a:	5c 3b       	neg	r11
8000825c:	5e fb       	retal	r11

8000825e <__avr32_u32_to_f64>:
8000825e:	f8 cb 00 00 	sub	r11,r12,0
80008262:	30 0c       	mov	r12,0
80008264:	c0 38       	rjmp	8000826a <__avr32_s32_to_f64+0x4>

80008266 <__avr32_s32_to_f64>:
80008266:	18 9b       	mov	r11,r12
80008268:	5c 4b       	abs	r11
8000826a:	30 0a       	mov	r10,0
8000826c:	5e 0b       	reteq	r11
8000826e:	d4 01       	pushm	lr
80008270:	e0 69 04 1e 	mov	r9,1054
80008274:	f6 08 12 00 	clz	r8,r11
80008278:	c1 70       	breq	800082a6 <__avr32_s32_to_f64+0x40>
8000827a:	c0 c3       	brcs	80008292 <__avr32_s32_to_f64+0x2c>
8000827c:	f0 0e 11 20 	rsub	lr,r8,32
80008280:	f6 08 09 4b 	lsl	r11,r11,r8
80008284:	f4 0e 0a 4e 	lsr	lr,r10,lr
80008288:	1c 4b       	or	r11,lr
8000828a:	f4 08 09 4a 	lsl	r10,r10,r8
8000828e:	10 19       	sub	r9,r8
80008290:	c0 b8       	rjmp	800082a6 <__avr32_s32_to_f64+0x40>
80008292:	f4 08 12 00 	clz	r8,r10
80008296:	f9 b8 03 00 	movlo	r8,0
8000829a:	f7 b8 02 e0 	subhs	r8,-32
8000829e:	f4 08 09 4b 	lsl	r11,r10,r8
800082a2:	30 0a       	mov	r10,0
800082a4:	10 19       	sub	r9,r8
800082a6:	58 09       	cp.w	r9,0
800082a8:	e0 89 00 30 	brgt	80008308 <__avr32_s32_to_f64+0xa2>
800082ac:	5c 39       	neg	r9
800082ae:	2f f9       	sub	r9,-1
800082b0:	e0 49 00 36 	cp.w	r9,54
800082b4:	c0 43       	brcs	800082bc <__avr32_s32_to_f64+0x56>
800082b6:	30 0b       	mov	r11,0
800082b8:	30 0a       	mov	r10,0
800082ba:	c2 68       	rjmp	80008306 <__avr32_s32_to_f64+0xa0>
800082bc:	2f 69       	sub	r9,-10
800082be:	f2 08 11 20 	rsub	r8,r9,32
800082c2:	e0 49 00 20 	cp.w	r9,32
800082c6:	c0 b2       	brcc	800082dc <__avr32_s32_to_f64+0x76>
800082c8:	f4 08 09 4e 	lsl	lr,r10,r8
800082cc:	f6 08 09 48 	lsl	r8,r11,r8
800082d0:	f4 09 0a 4a 	lsr	r10,r10,r9
800082d4:	f6 09 0a 4b 	lsr	r11,r11,r9
800082d8:	10 4b       	or	r11,r8
800082da:	c0 88       	rjmp	800082ea <__avr32_s32_to_f64+0x84>
800082dc:	f6 08 09 4e 	lsl	lr,r11,r8
800082e0:	14 4e       	or	lr,r10
800082e2:	16 9a       	mov	r10,r11
800082e4:	30 0b       	mov	r11,0
800082e6:	f4 09 0a 4a 	lsr	r10,r10,r9
800082ea:	ed ba 00 00 	bld	r10,0x0
800082ee:	c0 92       	brcc	80008300 <__avr32_s32_to_f64+0x9a>
800082f0:	1c 7e       	tst	lr,lr
800082f2:	c0 41       	brne	800082fa <__avr32_s32_to_f64+0x94>
800082f4:	ed ba 00 01 	bld	r10,0x1
800082f8:	c0 42       	brcc	80008300 <__avr32_s32_to_f64+0x9a>
800082fa:	2f fa       	sub	r10,-1
800082fc:	f7 bb 02 ff 	subhs	r11,-1
80008300:	5c fc       	rol	r12
80008302:	5d 0b       	ror	r11
80008304:	5d 0a       	ror	r10
80008306:	d8 02       	popm	pc
80008308:	e0 68 03 ff 	mov	r8,1023
8000830c:	ed ba 00 0b 	bld	r10,0xb
80008310:	f7 b8 00 ff 	subeq	r8,-1
80008314:	10 0a       	add	r10,r8
80008316:	5c 0b       	acr	r11
80008318:	f7 b9 03 fe 	sublo	r9,-2
8000831c:	e0 49 07 ff 	cp.w	r9,2047
80008320:	c0 55       	brlt	8000832a <__avr32_s32_to_f64+0xc4>
80008322:	30 0a       	mov	r10,0
80008324:	fc 1b ff e0 	movh	r11,0xffe0
80008328:	c0 c8       	rjmp	80008340 <__floatsidf_return_op1>
8000832a:	ed bb 00 1f 	bld	r11,0x1f
8000832e:	f7 b9 01 01 	subne	r9,1
80008332:	ab 9a       	lsr	r10,0xb
80008334:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80008338:	a1 7b       	lsl	r11,0x1
8000833a:	ab 9b       	lsr	r11,0xb
8000833c:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80008340 <__floatsidf_return_op1>:
80008340:	a1 7c       	lsl	r12,0x1
80008342:	5d 0b       	ror	r11
80008344:	d8 02       	popm	pc

80008346 <__avr32_f64_cmp_eq>:
80008346:	10 3a       	cp.w	r10,r8
80008348:	f2 0b 13 00 	cpc	r11,r9
8000834c:	c0 80       	breq	8000835c <__avr32_f64_cmp_eq+0x16>
8000834e:	a1 7b       	lsl	r11,0x1
80008350:	a1 79       	lsl	r9,0x1
80008352:	14 4b       	or	r11,r10
80008354:	12 4b       	or	r11,r9
80008356:	10 4b       	or	r11,r8
80008358:	5e 0f       	reteq	1
8000835a:	5e fd       	retal	0
8000835c:	a1 7b       	lsl	r11,0x1
8000835e:	fc 1c ff e0 	movh	r12,0xffe0
80008362:	58 0a       	cp.w	r10,0
80008364:	f8 0b 13 00 	cpc	r11,r12
80008368:	5e 8f       	retls	1
8000836a:	5e fd       	retal	0

8000836c <__avr32_f64_cmp_ge>:
8000836c:	1a de       	st.w	--sp,lr
8000836e:	1a d7       	st.w	--sp,r7
80008370:	a1 7b       	lsl	r11,0x1
80008372:	5f 3c       	srlo	r12
80008374:	a1 79       	lsl	r9,0x1
80008376:	5f 37       	srlo	r7
80008378:	5c fc       	rol	r12
8000837a:	fc 1e ff e0 	movh	lr,0xffe0
8000837e:	58 0a       	cp.w	r10,0
80008380:	fc 0b 13 00 	cpc	r11,lr
80008384:	e0 8b 00 1d 	brhi	800083be <__avr32_f64_cmp_ge+0x52>
80008388:	58 08       	cp.w	r8,0
8000838a:	fc 09 13 00 	cpc	r9,lr
8000838e:	e0 8b 00 18 	brhi	800083be <__avr32_f64_cmp_ge+0x52>
80008392:	58 0b       	cp.w	r11,0
80008394:	f5 ba 00 00 	subfeq	r10,0
80008398:	c1 50       	breq	800083c2 <__avr32_f64_cmp_ge+0x56>
8000839a:	1b 07       	ld.w	r7,sp++
8000839c:	1b 0e       	ld.w	lr,sp++
8000839e:	58 3c       	cp.w	r12,3
800083a0:	c0 a0       	breq	800083b4 <__avr32_f64_cmp_ge+0x48>
800083a2:	58 1c       	cp.w	r12,1
800083a4:	c0 33       	brcs	800083aa <__avr32_f64_cmp_ge+0x3e>
800083a6:	5e 0f       	reteq	1
800083a8:	5e 1d       	retne	0
800083aa:	10 3a       	cp.w	r10,r8
800083ac:	f2 0b 13 00 	cpc	r11,r9
800083b0:	5e 2f       	reths	1
800083b2:	5e 3d       	retlo	0
800083b4:	14 38       	cp.w	r8,r10
800083b6:	f6 09 13 00 	cpc	r9,r11
800083ba:	5e 2f       	reths	1
800083bc:	5e 3d       	retlo	0
800083be:	1b 07       	ld.w	r7,sp++
800083c0:	d8 0a       	popm	pc,r12=0
800083c2:	58 17       	cp.w	r7,1
800083c4:	5f 0c       	sreq	r12
800083c6:	58 09       	cp.w	r9,0
800083c8:	f5 b8 00 00 	subfeq	r8,0
800083cc:	1b 07       	ld.w	r7,sp++
800083ce:	1b 0e       	ld.w	lr,sp++
800083d0:	5e 0f       	reteq	1
800083d2:	5e fc       	retal	r12

800083d4 <__avr32_f64_cmp_lt>:
800083d4:	1a de       	st.w	--sp,lr
800083d6:	1a d7       	st.w	--sp,r7
800083d8:	a1 7b       	lsl	r11,0x1
800083da:	5f 3c       	srlo	r12
800083dc:	a1 79       	lsl	r9,0x1
800083de:	5f 37       	srlo	r7
800083e0:	5c fc       	rol	r12
800083e2:	fc 1e ff e0 	movh	lr,0xffe0
800083e6:	58 0a       	cp.w	r10,0
800083e8:	fc 0b 13 00 	cpc	r11,lr
800083ec:	e0 8b 00 1d 	brhi	80008426 <__avr32_f64_cmp_lt+0x52>
800083f0:	58 08       	cp.w	r8,0
800083f2:	fc 09 13 00 	cpc	r9,lr
800083f6:	e0 8b 00 18 	brhi	80008426 <__avr32_f64_cmp_lt+0x52>
800083fa:	58 0b       	cp.w	r11,0
800083fc:	f5 ba 00 00 	subfeq	r10,0
80008400:	c1 50       	breq	8000842a <__avr32_f64_cmp_lt+0x56>
80008402:	1b 07       	ld.w	r7,sp++
80008404:	1b 0e       	ld.w	lr,sp++
80008406:	58 3c       	cp.w	r12,3
80008408:	c0 a0       	breq	8000841c <__avr32_f64_cmp_lt+0x48>
8000840a:	58 1c       	cp.w	r12,1
8000840c:	c0 33       	brcs	80008412 <__avr32_f64_cmp_lt+0x3e>
8000840e:	5e 0d       	reteq	0
80008410:	5e 1f       	retne	1
80008412:	10 3a       	cp.w	r10,r8
80008414:	f2 0b 13 00 	cpc	r11,r9
80008418:	5e 2d       	reths	0
8000841a:	5e 3f       	retlo	1
8000841c:	14 38       	cp.w	r8,r10
8000841e:	f6 09 13 00 	cpc	r9,r11
80008422:	5e 2d       	reths	0
80008424:	5e 3f       	retlo	1
80008426:	1b 07       	ld.w	r7,sp++
80008428:	d8 0a       	popm	pc,r12=0
8000842a:	58 17       	cp.w	r7,1
8000842c:	5f 1c       	srne	r12
8000842e:	58 09       	cp.w	r9,0
80008430:	f5 b8 00 00 	subfeq	r8,0
80008434:	1b 07       	ld.w	r7,sp++
80008436:	1b 0e       	ld.w	lr,sp++
80008438:	5e 0d       	reteq	0
8000843a:	5e fc       	retal	r12

8000843c <__avr32_f64_div>:
8000843c:	eb cd 40 ff 	pushm	r0-r7,lr
80008440:	f7 e9 20 0e 	eor	lr,r11,r9
80008444:	f6 07 16 14 	lsr	r7,r11,0x14
80008448:	a9 7b       	lsl	r11,0x9
8000844a:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000844e:	a9 7a       	lsl	r10,0x9
80008450:	bd bb       	sbr	r11,0x1d
80008452:	e4 1b 3f ff 	andh	r11,0x3fff
80008456:	ab d7       	cbr	r7,0xb
80008458:	e0 80 00 cc 	breq	800085f0 <__avr32_f64_div_round_subnormal+0x54>
8000845c:	e0 47 07 ff 	cp.w	r7,2047
80008460:	e0 84 00 b5 	brge	800085ca <__avr32_f64_div_round_subnormal+0x2e>
80008464:	f2 06 16 14 	lsr	r6,r9,0x14
80008468:	a9 79       	lsl	r9,0x9
8000846a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000846e:	a9 78       	lsl	r8,0x9
80008470:	bd b9       	sbr	r9,0x1d
80008472:	e4 19 3f ff 	andh	r9,0x3fff
80008476:	ab d6       	cbr	r6,0xb
80008478:	e0 80 00 e2 	breq	8000863c <__avr32_f64_div_round_subnormal+0xa0>
8000847c:	e0 46 07 ff 	cp.w	r6,2047
80008480:	e0 84 00 b2 	brge	800085e4 <__avr32_f64_div_round_subnormal+0x48>
80008484:	0c 17       	sub	r7,r6
80008486:	fe 37 fc 01 	sub	r7,-1023
8000848a:	fc 1c 80 00 	movh	r12,0x8000
8000848e:	f8 03 16 01 	lsr	r3,r12,0x1
80008492:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80008496:	5c d4       	com	r4
80008498:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000849c:	e6 09 06 44 	mulu.d	r4,r3,r9
800084a0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800084a4:	e6 05 06 44 	mulu.d	r4,r3,r5
800084a8:	ea 03 15 02 	lsl	r3,r5,0x2
800084ac:	e6 09 06 44 	mulu.d	r4,r3,r9
800084b0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800084b4:	e6 05 06 44 	mulu.d	r4,r3,r5
800084b8:	ea 03 15 02 	lsl	r3,r5,0x2
800084bc:	e6 09 06 44 	mulu.d	r4,r3,r9
800084c0:	f8 05 01 25 	sub	r5,r12,r5<<0x2
800084c4:	e6 05 06 44 	mulu.d	r4,r3,r5
800084c8:	ea 03 15 02 	lsl	r3,r5,0x2
800084cc:	e6 08 06 40 	mulu.d	r0,r3,r8
800084d0:	e4 09 07 40 	macu.d	r0,r2,r9
800084d4:	e6 09 06 44 	mulu.d	r4,r3,r9
800084d8:	02 04       	add	r4,r1
800084da:	5c 05       	acr	r5
800084dc:	a3 65       	lsl	r5,0x2
800084de:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800084e2:	a3 64       	lsl	r4,0x2
800084e4:	5c 34       	neg	r4
800084e6:	f8 05 01 45 	sbc	r5,r12,r5
800084ea:	e6 04 06 40 	mulu.d	r0,r3,r4
800084ee:	e4 05 07 40 	macu.d	r0,r2,r5
800084f2:	e6 05 06 44 	mulu.d	r4,r3,r5
800084f6:	02 04       	add	r4,r1
800084f8:	5c 05       	acr	r5
800084fa:	ea 03 15 02 	lsl	r3,r5,0x2
800084fe:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80008502:	e8 02 15 02 	lsl	r2,r4,0x2
80008506:	e6 08 06 40 	mulu.d	r0,r3,r8
8000850a:	e4 09 07 40 	macu.d	r0,r2,r9
8000850e:	e6 09 06 44 	mulu.d	r4,r3,r9
80008512:	02 04       	add	r4,r1
80008514:	5c 05       	acr	r5
80008516:	a3 65       	lsl	r5,0x2
80008518:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000851c:	a3 64       	lsl	r4,0x2
8000851e:	5c 34       	neg	r4
80008520:	f8 05 01 45 	sbc	r5,r12,r5
80008524:	e6 04 06 40 	mulu.d	r0,r3,r4
80008528:	e4 05 07 40 	macu.d	r0,r2,r5
8000852c:	e6 05 06 44 	mulu.d	r4,r3,r5
80008530:	02 04       	add	r4,r1
80008532:	5c 05       	acr	r5
80008534:	ea 03 15 02 	lsl	r3,r5,0x2
80008538:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000853c:	e8 02 15 02 	lsl	r2,r4,0x2
80008540:	e6 0a 06 40 	mulu.d	r0,r3,r10
80008544:	e4 0b 07 40 	macu.d	r0,r2,r11
80008548:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000854c:	02 02       	add	r2,r1
8000854e:	5c 03       	acr	r3
80008550:	ed b3 00 1c 	bld	r3,0x1c
80008554:	c0 90       	breq	80008566 <__avr32_f64_div+0x12a>
80008556:	a1 72       	lsl	r2,0x1
80008558:	5c f3       	rol	r3
8000855a:	20 17       	sub	r7,1
8000855c:	a3 9a       	lsr	r10,0x3
8000855e:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80008562:	a3 9b       	lsr	r11,0x3
80008564:	c0 58       	rjmp	8000856e <__avr32_f64_div+0x132>
80008566:	a5 8a       	lsr	r10,0x4
80008568:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000856c:	a5 8b       	lsr	r11,0x4
8000856e:	58 07       	cp.w	r7,0
80008570:	e0 8a 00 8b 	brle	80008686 <__avr32_f64_div_res_subnormal>
80008574:	e0 12 ff 00 	andl	r2,0xff00
80008578:	e8 12 00 80 	orl	r2,0x80
8000857c:	e6 08 06 40 	mulu.d	r0,r3,r8
80008580:	e4 09 07 40 	macu.d	r0,r2,r9
80008584:	e4 08 06 44 	mulu.d	r4,r2,r8
80008588:	e6 09 06 48 	mulu.d	r8,r3,r9
8000858c:	00 05       	add	r5,r0
8000858e:	f0 01 00 48 	adc	r8,r8,r1
80008592:	5c 09       	acr	r9
80008594:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80008598:	58 04       	cp.w	r4,0
8000859a:	5c 25       	cpc	r5

8000859c <__avr32_f64_div_round_subnormal>:
8000859c:	f4 08 13 00 	cpc	r8,r10
800085a0:	f6 09 13 00 	cpc	r9,r11
800085a4:	5f 36       	srlo	r6
800085a6:	f8 06 17 00 	moveq	r6,r12
800085aa:	e4 0a 16 08 	lsr	r10,r2,0x8
800085ae:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
800085b2:	e6 0b 16 08 	lsr	r11,r3,0x8
800085b6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800085ba:	ed be 00 1f 	bld	lr,0x1f
800085be:	ef bb 00 1f 	bst	r11,0x1f
800085c2:	0c 0a       	add	r10,r6
800085c4:	5c 0b       	acr	r11
800085c6:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800085ca:	e4 1b 00 0f 	andh	r11,0xf
800085ce:	14 4b       	or	r11,r10
800085d0:	e0 81 00 a7 	brne	8000871e <__avr32_f64_div_res_subnormal+0x98>
800085d4:	f2 06 16 14 	lsr	r6,r9,0x14
800085d8:	ab d6       	cbr	r6,0xb
800085da:	e0 46 07 ff 	cp.w	r6,2047
800085de:	e0 81 00 a4 	brne	80008726 <__avr32_f64_div_res_subnormal+0xa0>
800085e2:	c9 e8       	rjmp	8000871e <__avr32_f64_div_res_subnormal+0x98>
800085e4:	e4 19 00 0f 	andh	r9,0xf
800085e8:	10 49       	or	r9,r8
800085ea:	e0 81 00 9a 	brne	8000871e <__avr32_f64_div_res_subnormal+0x98>
800085ee:	c9 28       	rjmp	80008712 <__avr32_f64_div_res_subnormal+0x8c>
800085f0:	a3 7b       	lsl	r11,0x3
800085f2:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
800085f6:	a3 7a       	lsl	r10,0x3
800085f8:	f5 eb 10 04 	or	r4,r10,r11
800085fc:	e0 80 00 a0 	breq	8000873c <__avr32_f64_div_op1_zero>
80008600:	f6 04 12 00 	clz	r4,r11
80008604:	c1 70       	breq	80008632 <__avr32_f64_div_round_subnormal+0x96>
80008606:	c0 c3       	brcs	8000861e <__avr32_f64_div_round_subnormal+0x82>
80008608:	e8 05 11 20 	rsub	r5,r4,32
8000860c:	f6 04 09 4b 	lsl	r11,r11,r4
80008610:	f4 05 0a 45 	lsr	r5,r10,r5
80008614:	0a 4b       	or	r11,r5
80008616:	f4 04 09 4a 	lsl	r10,r10,r4
8000861a:	08 17       	sub	r7,r4
8000861c:	c0 b8       	rjmp	80008632 <__avr32_f64_div_round_subnormal+0x96>
8000861e:	f4 04 12 00 	clz	r4,r10
80008622:	f9 b4 03 00 	movlo	r4,0
80008626:	f7 b4 02 e0 	subhs	r4,-32
8000862a:	f4 04 09 4b 	lsl	r11,r10,r4
8000862e:	30 0a       	mov	r10,0
80008630:	08 17       	sub	r7,r4
80008632:	a3 8a       	lsr	r10,0x2
80008634:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80008638:	a3 8b       	lsr	r11,0x2
8000863a:	c1 1b       	rjmp	8000845c <__avr32_f64_div+0x20>
8000863c:	a3 79       	lsl	r9,0x3
8000863e:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80008642:	a3 78       	lsl	r8,0x3
80008644:	f3 e8 10 04 	or	r4,r9,r8
80008648:	c6 f0       	breq	80008726 <__avr32_f64_div_res_subnormal+0xa0>
8000864a:	f2 04 12 00 	clz	r4,r9
8000864e:	c1 70       	breq	8000867c <__avr32_f64_div_round_subnormal+0xe0>
80008650:	c0 c3       	brcs	80008668 <__avr32_f64_div_round_subnormal+0xcc>
80008652:	e8 05 11 20 	rsub	r5,r4,32
80008656:	f2 04 09 49 	lsl	r9,r9,r4
8000865a:	f0 05 0a 45 	lsr	r5,r8,r5
8000865e:	0a 49       	or	r9,r5
80008660:	f0 04 09 48 	lsl	r8,r8,r4
80008664:	08 16       	sub	r6,r4
80008666:	c0 b8       	rjmp	8000867c <__avr32_f64_div_round_subnormal+0xe0>
80008668:	f0 04 12 00 	clz	r4,r8
8000866c:	f9 b4 03 00 	movlo	r4,0
80008670:	f7 b4 02 e0 	subhs	r4,-32
80008674:	f0 04 09 49 	lsl	r9,r8,r4
80008678:	30 08       	mov	r8,0
8000867a:	08 16       	sub	r6,r4
8000867c:	a3 88       	lsr	r8,0x2
8000867e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80008682:	a3 89       	lsr	r9,0x2
80008684:	cf ca       	rjmp	8000847c <__avr32_f64_div+0x40>

80008686 <__avr32_f64_div_res_subnormal>:
80008686:	5c 37       	neg	r7
80008688:	2f f7       	sub	r7,-1
8000868a:	f1 b7 04 c0 	satu	r7,0x6
8000868e:	e0 47 00 20 	cp.w	r7,32
80008692:	c1 54       	brge	800086bc <__avr32_f64_div_res_subnormal+0x36>
80008694:	ee 06 11 20 	rsub	r6,r7,32
80008698:	e4 07 0a 42 	lsr	r2,r2,r7
8000869c:	e6 06 09 4c 	lsl	r12,r3,r6
800086a0:	18 42       	or	r2,r12
800086a2:	e6 07 0a 43 	lsr	r3,r3,r7
800086a6:	f4 06 09 41 	lsl	r1,r10,r6
800086aa:	f4 07 0a 4a 	lsr	r10,r10,r7
800086ae:	f6 06 09 4c 	lsl	r12,r11,r6
800086b2:	18 4a       	or	r10,r12
800086b4:	f6 07 0a 4b 	lsr	r11,r11,r7
800086b8:	30 00       	mov	r0,0
800086ba:	c1 58       	rjmp	800086e4 <__avr32_f64_div_res_subnormal+0x5e>
800086bc:	ee 06 11 20 	rsub	r6,r7,32
800086c0:	f9 b0 00 00 	moveq	r0,0
800086c4:	f9 bc 00 00 	moveq	r12,0
800086c8:	c0 50       	breq	800086d2 <__avr32_f64_div_res_subnormal+0x4c>
800086ca:	f4 06 09 40 	lsl	r0,r10,r6
800086ce:	f6 06 09 4c 	lsl	r12,r11,r6
800086d2:	e6 07 0a 42 	lsr	r2,r3,r7
800086d6:	30 03       	mov	r3,0
800086d8:	f4 07 0a 41 	lsr	r1,r10,r7
800086dc:	18 41       	or	r1,r12
800086de:	f6 07 0a 4a 	lsr	r10,r11,r7
800086e2:	30 0b       	mov	r11,0
800086e4:	e0 12 ff 00 	andl	r2,0xff00
800086e8:	e8 12 00 80 	orl	r2,0x80
800086ec:	e6 08 06 46 	mulu.d	r6,r3,r8
800086f0:	e4 09 07 46 	macu.d	r6,r2,r9
800086f4:	e4 08 06 44 	mulu.d	r4,r2,r8
800086f8:	e6 09 06 48 	mulu.d	r8,r3,r9
800086fc:	0c 05       	add	r5,r6
800086fe:	f0 07 00 48 	adc	r8,r8,r7
80008702:	5c 09       	acr	r9
80008704:	30 07       	mov	r7,0
80008706:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000870a:	00 34       	cp.w	r4,r0
8000870c:	e2 05 13 00 	cpc	r5,r1
80008710:	c4 6b       	rjmp	8000859c <__avr32_f64_div_round_subnormal>
80008712:	1c 9b       	mov	r11,lr
80008714:	e6 1b 80 00 	andh	r11,0x8000,COH
80008718:	30 0a       	mov	r10,0
8000871a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000871e:	3f fb       	mov	r11,-1
80008720:	30 0a       	mov	r10,0
80008722:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80008726:	f5 eb 10 04 	or	r4,r10,r11
8000872a:	c0 90       	breq	8000873c <__avr32_f64_div_op1_zero>
8000872c:	1c 9b       	mov	r11,lr
8000872e:	e6 1b 80 00 	andh	r11,0x8000,COH
80008732:	ea 1b 7f f0 	orh	r11,0x7ff0
80008736:	30 0a       	mov	r10,0
80008738:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000873c <__avr32_f64_div_op1_zero>:
8000873c:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80008740:	ce f0       	breq	8000871e <__avr32_f64_div_res_subnormal+0x98>
80008742:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80008746:	e0 44 07 ff 	cp.w	r4,2047
8000874a:	ce 41       	brne	80008712 <__avr32_f64_div_res_subnormal+0x8c>
8000874c:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80008750:	ce 10       	breq	80008712 <__avr32_f64_div_res_subnormal+0x8c>
80008752:	ce 6b       	rjmp	8000871e <__avr32_f64_div_res_subnormal+0x98>

80008754 <__avr32_udiv64>:
80008754:	d4 31       	pushm	r0-r7,lr
80008756:	1a 97       	mov	r7,sp
80008758:	20 3d       	sub	sp,12
8000875a:	10 9c       	mov	r12,r8
8000875c:	12 9e       	mov	lr,r9
8000875e:	14 93       	mov	r3,r10
80008760:	58 09       	cp.w	r9,0
80008762:	e0 81 00 bd 	brne	800088dc <__avr32_udiv64+0x188>
80008766:	16 38       	cp.w	r8,r11
80008768:	e0 88 00 40 	brls	800087e8 <__avr32_udiv64+0x94>
8000876c:	f0 08 12 00 	clz	r8,r8
80008770:	c0 d0       	breq	8000878a <__avr32_udiv64+0x36>
80008772:	f6 08 09 4b 	lsl	r11,r11,r8
80008776:	f0 09 11 20 	rsub	r9,r8,32
8000877a:	f8 08 09 4c 	lsl	r12,r12,r8
8000877e:	f4 09 0a 49 	lsr	r9,r10,r9
80008782:	f4 08 09 43 	lsl	r3,r10,r8
80008786:	f3 eb 10 0b 	or	r11,r9,r11
8000878a:	f8 0e 16 10 	lsr	lr,r12,0x10
8000878e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008792:	f6 0e 0d 00 	divu	r0,r11,lr
80008796:	e6 0b 16 10 	lsr	r11,r3,0x10
8000879a:	00 99       	mov	r9,r0
8000879c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800087a0:	e0 0a 02 48 	mul	r8,r0,r10
800087a4:	10 3b       	cp.w	r11,r8
800087a6:	c0 a2       	brcc	800087ba <__avr32_udiv64+0x66>
800087a8:	20 19       	sub	r9,1
800087aa:	18 0b       	add	r11,r12
800087ac:	18 3b       	cp.w	r11,r12
800087ae:	c0 63       	brcs	800087ba <__avr32_udiv64+0x66>
800087b0:	10 3b       	cp.w	r11,r8
800087b2:	f7 b9 03 01 	sublo	r9,1
800087b6:	f7 dc e3 0b 	addcs	r11,r11,r12
800087ba:	f6 08 01 01 	sub	r1,r11,r8
800087be:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800087c2:	e2 0e 0d 00 	divu	r0,r1,lr
800087c6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800087ca:	00 98       	mov	r8,r0
800087cc:	e0 0a 02 4a 	mul	r10,r0,r10
800087d0:	14 33       	cp.w	r3,r10
800087d2:	c0 82       	brcc	800087e2 <__avr32_udiv64+0x8e>
800087d4:	20 18       	sub	r8,1
800087d6:	18 03       	add	r3,r12
800087d8:	18 33       	cp.w	r3,r12
800087da:	c0 43       	brcs	800087e2 <__avr32_udiv64+0x8e>
800087dc:	14 33       	cp.w	r3,r10
800087de:	f7 b8 03 01 	sublo	r8,1
800087e2:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800087e6:	cd f8       	rjmp	800089a4 <__avr32_udiv64+0x250>
800087e8:	58 08       	cp.w	r8,0
800087ea:	c0 51       	brne	800087f4 <__avr32_udiv64+0xa0>
800087ec:	30 19       	mov	r9,1
800087ee:	f2 08 0d 08 	divu	r8,r9,r8
800087f2:	10 9c       	mov	r12,r8
800087f4:	f8 06 12 00 	clz	r6,r12
800087f8:	c0 41       	brne	80008800 <__avr32_udiv64+0xac>
800087fa:	18 1b       	sub	r11,r12
800087fc:	30 19       	mov	r9,1
800087fe:	c4 08       	rjmp	8000887e <__avr32_udiv64+0x12a>
80008800:	ec 01 11 20 	rsub	r1,r6,32
80008804:	f4 01 0a 49 	lsr	r9,r10,r1
80008808:	f8 06 09 4c 	lsl	r12,r12,r6
8000880c:	f6 06 09 48 	lsl	r8,r11,r6
80008810:	f6 01 0a 41 	lsr	r1,r11,r1
80008814:	f3 e8 10 08 	or	r8,r9,r8
80008818:	f8 03 16 10 	lsr	r3,r12,0x10
8000881c:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008820:	e2 03 0d 00 	divu	r0,r1,r3
80008824:	f0 0b 16 10 	lsr	r11,r8,0x10
80008828:	00 9e       	mov	lr,r0
8000882a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000882e:	e0 05 02 49 	mul	r9,r0,r5
80008832:	12 3b       	cp.w	r11,r9
80008834:	c0 a2       	brcc	80008848 <__avr32_udiv64+0xf4>
80008836:	20 1e       	sub	lr,1
80008838:	18 0b       	add	r11,r12
8000883a:	18 3b       	cp.w	r11,r12
8000883c:	c0 63       	brcs	80008848 <__avr32_udiv64+0xf4>
8000883e:	12 3b       	cp.w	r11,r9
80008840:	f7 be 03 01 	sublo	lr,1
80008844:	f7 dc e3 0b 	addcs	r11,r11,r12
80008848:	12 1b       	sub	r11,r9
8000884a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000884e:	f6 03 0d 02 	divu	r2,r11,r3
80008852:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80008856:	04 99       	mov	r9,r2
80008858:	e4 05 02 4b 	mul	r11,r2,r5
8000885c:	16 38       	cp.w	r8,r11
8000885e:	c0 a2       	brcc	80008872 <__avr32_udiv64+0x11e>
80008860:	20 19       	sub	r9,1
80008862:	18 08       	add	r8,r12
80008864:	18 38       	cp.w	r8,r12
80008866:	c0 63       	brcs	80008872 <__avr32_udiv64+0x11e>
80008868:	16 38       	cp.w	r8,r11
8000886a:	f7 b9 03 01 	sublo	r9,1
8000886e:	f1 dc e3 08 	addcs	r8,r8,r12
80008872:	f4 06 09 43 	lsl	r3,r10,r6
80008876:	f0 0b 01 0b 	sub	r11,r8,r11
8000887a:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000887e:	f8 06 16 10 	lsr	r6,r12,0x10
80008882:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80008886:	f6 06 0d 00 	divu	r0,r11,r6
8000888a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000888e:	00 9a       	mov	r10,r0
80008890:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008894:	e0 0e 02 48 	mul	r8,r0,lr
80008898:	10 3b       	cp.w	r11,r8
8000889a:	c0 a2       	brcc	800088ae <__avr32_udiv64+0x15a>
8000889c:	20 1a       	sub	r10,1
8000889e:	18 0b       	add	r11,r12
800088a0:	18 3b       	cp.w	r11,r12
800088a2:	c0 63       	brcs	800088ae <__avr32_udiv64+0x15a>
800088a4:	10 3b       	cp.w	r11,r8
800088a6:	f7 ba 03 01 	sublo	r10,1
800088aa:	f7 dc e3 0b 	addcs	r11,r11,r12
800088ae:	f6 08 01 01 	sub	r1,r11,r8
800088b2:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
800088b6:	e2 06 0d 00 	divu	r0,r1,r6
800088ba:	e7 e1 11 03 	or	r3,r3,r1<<0x10
800088be:	00 98       	mov	r8,r0
800088c0:	e0 0e 02 4b 	mul	r11,r0,lr
800088c4:	16 33       	cp.w	r3,r11
800088c6:	c0 82       	brcc	800088d6 <__avr32_udiv64+0x182>
800088c8:	20 18       	sub	r8,1
800088ca:	18 03       	add	r3,r12
800088cc:	18 33       	cp.w	r3,r12
800088ce:	c0 43       	brcs	800088d6 <__avr32_udiv64+0x182>
800088d0:	16 33       	cp.w	r3,r11
800088d2:	f7 b8 03 01 	sublo	r8,1
800088d6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800088da:	c6 98       	rjmp	800089ac <__avr32_udiv64+0x258>
800088dc:	16 39       	cp.w	r9,r11
800088de:	e0 8b 00 65 	brhi	800089a8 <__avr32_udiv64+0x254>
800088e2:	f2 09 12 00 	clz	r9,r9
800088e6:	c0 b1       	brne	800088fc <__avr32_udiv64+0x1a8>
800088e8:	10 3a       	cp.w	r10,r8
800088ea:	5f 2a       	srhs	r10
800088ec:	1c 3b       	cp.w	r11,lr
800088ee:	5f b8       	srhi	r8
800088f0:	10 4a       	or	r10,r8
800088f2:	f2 0a 18 00 	cp.b	r10,r9
800088f6:	c5 90       	breq	800089a8 <__avr32_udiv64+0x254>
800088f8:	30 18       	mov	r8,1
800088fa:	c5 98       	rjmp	800089ac <__avr32_udiv64+0x258>
800088fc:	f0 09 09 46 	lsl	r6,r8,r9
80008900:	f2 03 11 20 	rsub	r3,r9,32
80008904:	fc 09 09 4e 	lsl	lr,lr,r9
80008908:	f0 03 0a 48 	lsr	r8,r8,r3
8000890c:	f6 09 09 4c 	lsl	r12,r11,r9
80008910:	f4 03 0a 42 	lsr	r2,r10,r3
80008914:	ef 46 ff f4 	st.w	r7[-12],r6
80008918:	f6 03 0a 43 	lsr	r3,r11,r3
8000891c:	18 42       	or	r2,r12
8000891e:	f1 ee 10 0c 	or	r12,r8,lr
80008922:	f8 01 16 10 	lsr	r1,r12,0x10
80008926:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000892a:	e6 01 0d 04 	divu	r4,r3,r1
8000892e:	e4 03 16 10 	lsr	r3,r2,0x10
80008932:	08 9e       	mov	lr,r4
80008934:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80008938:	e8 06 02 48 	mul	r8,r4,r6
8000893c:	10 33       	cp.w	r3,r8
8000893e:	c0 a2       	brcc	80008952 <__avr32_udiv64+0x1fe>
80008940:	20 1e       	sub	lr,1
80008942:	18 03       	add	r3,r12
80008944:	18 33       	cp.w	r3,r12
80008946:	c0 63       	brcs	80008952 <__avr32_udiv64+0x1fe>
80008948:	10 33       	cp.w	r3,r8
8000894a:	f7 be 03 01 	sublo	lr,1
8000894e:	e7 dc e3 03 	addcs	r3,r3,r12
80008952:	10 13       	sub	r3,r8
80008954:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80008958:	e6 01 0d 00 	divu	r0,r3,r1
8000895c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80008960:	00 98       	mov	r8,r0
80008962:	e0 06 02 46 	mul	r6,r0,r6
80008966:	0c 3b       	cp.w	r11,r6
80008968:	c0 a2       	brcc	8000897c <__avr32_udiv64+0x228>
8000896a:	20 18       	sub	r8,1
8000896c:	18 0b       	add	r11,r12
8000896e:	18 3b       	cp.w	r11,r12
80008970:	c0 63       	brcs	8000897c <__avr32_udiv64+0x228>
80008972:	0c 3b       	cp.w	r11,r6
80008974:	f7 dc e3 0b 	addcs	r11,r11,r12
80008978:	f7 b8 03 01 	sublo	r8,1
8000897c:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80008980:	ee f4 ff f4 	ld.w	r4,r7[-12]
80008984:	0c 1b       	sub	r11,r6
80008986:	f0 04 06 42 	mulu.d	r2,r8,r4
8000898a:	06 95       	mov	r5,r3
8000898c:	16 35       	cp.w	r5,r11
8000898e:	e0 8b 00 0a 	brhi	800089a2 <__avr32_udiv64+0x24e>
80008992:	5f 0b       	sreq	r11
80008994:	f4 09 09 49 	lsl	r9,r10,r9
80008998:	12 32       	cp.w	r2,r9
8000899a:	5f b9       	srhi	r9
8000899c:	f7 e9 00 09 	and	r9,r11,r9
800089a0:	c0 60       	breq	800089ac <__avr32_udiv64+0x258>
800089a2:	20 18       	sub	r8,1
800089a4:	30 09       	mov	r9,0
800089a6:	c0 38       	rjmp	800089ac <__avr32_udiv64+0x258>
800089a8:	30 09       	mov	r9,0
800089aa:	12 98       	mov	r8,r9
800089ac:	10 9a       	mov	r10,r8
800089ae:	12 93       	mov	r3,r9
800089b0:	10 92       	mov	r2,r8
800089b2:	12 9b       	mov	r11,r9
800089b4:	2f dd       	sub	sp,-12
800089b6:	d8 32       	popm	r0-r7,pc

800089b8 <__avr32_umod64>:
800089b8:	d4 31       	pushm	r0-r7,lr
800089ba:	1a 97       	mov	r7,sp
800089bc:	20 3d       	sub	sp,12
800089be:	10 9c       	mov	r12,r8
800089c0:	12 95       	mov	r5,r9
800089c2:	14 9e       	mov	lr,r10
800089c4:	16 91       	mov	r1,r11
800089c6:	16 96       	mov	r6,r11
800089c8:	58 09       	cp.w	r9,0
800089ca:	e0 81 00 81 	brne	80008acc <__avr32_umod64+0x114>
800089ce:	16 38       	cp.w	r8,r11
800089d0:	e0 88 00 12 	brls	800089f4 <__avr32_umod64+0x3c>
800089d4:	f0 08 12 00 	clz	r8,r8
800089d8:	c4 e0       	breq	80008a74 <__avr32_umod64+0xbc>
800089da:	f6 08 09 46 	lsl	r6,r11,r8
800089de:	f8 08 09 4c 	lsl	r12,r12,r8
800089e2:	f0 0b 11 20 	rsub	r11,r8,32
800089e6:	f4 08 09 4e 	lsl	lr,r10,r8
800089ea:	f4 0b 0a 4b 	lsr	r11,r10,r11
800089ee:	f7 e6 10 06 	or	r6,r11,r6
800089f2:	c4 18       	rjmp	80008a74 <__avr32_umod64+0xbc>
800089f4:	58 08       	cp.w	r8,0
800089f6:	c0 51       	brne	80008a00 <__avr32_umod64+0x48>
800089f8:	30 19       	mov	r9,1
800089fa:	f2 08 0d 08 	divu	r8,r9,r8
800089fe:	10 9c       	mov	r12,r8
80008a00:	f8 08 12 00 	clz	r8,r12
80008a04:	c0 31       	brne	80008a0a <__avr32_umod64+0x52>
80008a06:	18 16       	sub	r6,r12
80008a08:	c3 68       	rjmp	80008a74 <__avr32_umod64+0xbc>
80008a0a:	f0 03 11 20 	rsub	r3,r8,32
80008a0e:	f4 03 0a 4b 	lsr	r11,r10,r3
80008a12:	f8 08 09 4c 	lsl	r12,r12,r8
80008a16:	ec 08 09 49 	lsl	r9,r6,r8
80008a1a:	ec 03 0a 43 	lsr	r3,r6,r3
80008a1e:	f7 e9 10 09 	or	r9,r11,r9
80008a22:	f8 05 16 10 	lsr	r5,r12,0x10
80008a26:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80008a2a:	e6 05 0d 02 	divu	r2,r3,r5
80008a2e:	f2 0e 16 10 	lsr	lr,r9,0x10
80008a32:	ec 02 02 4b 	mul	r11,r6,r2
80008a36:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80008a3a:	16 3e       	cp.w	lr,r11
80008a3c:	c0 72       	brcc	80008a4a <__avr32_umod64+0x92>
80008a3e:	18 0e       	add	lr,r12
80008a40:	18 3e       	cp.w	lr,r12
80008a42:	c0 43       	brcs	80008a4a <__avr32_umod64+0x92>
80008a44:	16 3e       	cp.w	lr,r11
80008a46:	fd dc e3 0e 	addcs	lr,lr,r12
80008a4a:	fc 0b 01 03 	sub	r3,lr,r11
80008a4e:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
80008a52:	e6 05 0d 02 	divu	r2,r3,r5
80008a56:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008a5a:	a5 36       	mul	r6,r2
80008a5c:	0c 39       	cp.w	r9,r6
80008a5e:	c0 72       	brcc	80008a6c <__avr32_umod64+0xb4>
80008a60:	18 09       	add	r9,r12
80008a62:	18 39       	cp.w	r9,r12
80008a64:	c0 43       	brcs	80008a6c <__avr32_umod64+0xb4>
80008a66:	0c 39       	cp.w	r9,r6
80008a68:	f3 dc e3 09 	addcs	r9,r9,r12
80008a6c:	f2 06 01 06 	sub	r6,r9,r6
80008a70:	f4 08 09 4e 	lsl	lr,r10,r8
80008a74:	f8 0a 16 10 	lsr	r10,r12,0x10
80008a78:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80008a7c:	ec 0a 0d 02 	divu	r2,r6,r10
80008a80:	fc 09 16 10 	lsr	r9,lr,0x10
80008a84:	ea 02 02 4b 	mul	r11,r5,r2
80008a88:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80008a8c:	16 39       	cp.w	r9,r11
80008a8e:	c0 72       	brcc	80008a9c <__avr32_umod64+0xe4>
80008a90:	18 09       	add	r9,r12
80008a92:	18 39       	cp.w	r9,r12
80008a94:	c0 43       	brcs	80008a9c <__avr32_umod64+0xe4>
80008a96:	16 39       	cp.w	r9,r11
80008a98:	f3 dc e3 09 	addcs	r9,r9,r12
80008a9c:	f2 0b 01 0b 	sub	r11,r9,r11
80008aa0:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008aa4:	f6 0a 0d 0a 	divu	r10,r11,r10
80008aa8:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80008aac:	ea 0a 02 4a 	mul	r10,r5,r10
80008ab0:	14 3e       	cp.w	lr,r10
80008ab2:	c0 72       	brcc	80008ac0 <__avr32_umod64+0x108>
80008ab4:	18 0e       	add	lr,r12
80008ab6:	18 3e       	cp.w	lr,r12
80008ab8:	c0 43       	brcs	80008ac0 <__avr32_umod64+0x108>
80008aba:	14 3e       	cp.w	lr,r10
80008abc:	fd dc e3 0e 	addcs	lr,lr,r12
80008ac0:	fc 0a 01 0a 	sub	r10,lr,r10
80008ac4:	30 0b       	mov	r11,0
80008ac6:	f4 08 0a 4a 	lsr	r10,r10,r8
80008aca:	c7 b8       	rjmp	80008bc0 <__avr32_umod64+0x208>
80008acc:	16 39       	cp.w	r9,r11
80008ace:	e0 8b 00 79 	brhi	80008bc0 <__avr32_umod64+0x208>
80008ad2:	f2 09 12 00 	clz	r9,r9
80008ad6:	c1 21       	brne	80008afa <__avr32_umod64+0x142>
80008ad8:	10 3a       	cp.w	r10,r8
80008ada:	5f 2b       	srhs	r11
80008adc:	0a 31       	cp.w	r1,r5
80008ade:	5f ba       	srhi	r10
80008ae0:	f7 ea 10 0a 	or	r10,r11,r10
80008ae4:	f2 0a 18 00 	cp.b	r10,r9
80008ae8:	c0 60       	breq	80008af4 <__avr32_umod64+0x13c>
80008aea:	fc 08 01 0c 	sub	r12,lr,r8
80008aee:	e2 05 01 46 	sbc	r6,r1,r5
80008af2:	18 9e       	mov	lr,r12
80008af4:	0c 9b       	mov	r11,r6
80008af6:	1c 9a       	mov	r10,lr
80008af8:	c6 48       	rjmp	80008bc0 <__avr32_umod64+0x208>
80008afa:	ea 09 09 4c 	lsl	r12,r5,r9
80008afe:	f2 06 11 20 	rsub	r6,r9,32
80008b02:	f6 09 09 4b 	lsl	r11,r11,r9
80008b06:	f0 09 09 42 	lsl	r2,r8,r9
80008b0a:	ef 46 ff f4 	st.w	r7[-12],r6
80008b0e:	f0 06 0a 48 	lsr	r8,r8,r6
80008b12:	18 48       	or	r8,r12
80008b14:	e2 06 0a 4c 	lsr	r12,r1,r6
80008b18:	f4 09 09 43 	lsl	r3,r10,r9
80008b1c:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80008b20:	f4 06 0a 4a 	lsr	r10,r10,r6
80008b24:	16 4a       	or	r10,r11
80008b26:	f0 0b 16 10 	lsr	r11,r8,0x10
80008b2a:	f8 0b 0d 04 	divu	r4,r12,r11
80008b2e:	f4 0c 16 10 	lsr	r12,r10,0x10
80008b32:	08 91       	mov	r1,r4
80008b34:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80008b38:	e8 0e 02 46 	mul	r6,r4,lr
80008b3c:	0c 3c       	cp.w	r12,r6
80008b3e:	c0 a2       	brcc	80008b52 <__avr32_umod64+0x19a>
80008b40:	20 11       	sub	r1,1
80008b42:	10 0c       	add	r12,r8
80008b44:	10 3c       	cp.w	r12,r8
80008b46:	c0 63       	brcs	80008b52 <__avr32_umod64+0x19a>
80008b48:	0c 3c       	cp.w	r12,r6
80008b4a:	f7 b1 03 01 	sublo	r1,1
80008b4e:	f9 d8 e3 0c 	addcs	r12,r12,r8
80008b52:	0c 1c       	sub	r12,r6
80008b54:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80008b58:	f8 0b 0d 04 	divu	r4,r12,r11
80008b5c:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80008b60:	08 96       	mov	r6,r4
80008b62:	e8 0e 02 4e 	mul	lr,r4,lr
80008b66:	1c 3b       	cp.w	r11,lr
80008b68:	c0 a2       	brcc	80008b7c <__avr32_umod64+0x1c4>
80008b6a:	20 16       	sub	r6,1
80008b6c:	10 0b       	add	r11,r8
80008b6e:	10 3b       	cp.w	r11,r8
80008b70:	c0 63       	brcs	80008b7c <__avr32_umod64+0x1c4>
80008b72:	1c 3b       	cp.w	r11,lr
80008b74:	f7 b6 03 01 	sublo	r6,1
80008b78:	f7 d8 e3 0b 	addcs	r11,r11,r8
80008b7c:	ed e1 11 01 	or	r1,r6,r1<<0x10
80008b80:	1c 1b       	sub	r11,lr
80008b82:	e2 02 06 40 	mulu.d	r0,r1,r2
80008b86:	00 9e       	mov	lr,r0
80008b88:	02 9c       	mov	r12,r1
80008b8a:	16 3c       	cp.w	r12,r11
80008b8c:	e0 8b 00 08 	brhi	80008b9c <__avr32_umod64+0x1e4>
80008b90:	5f 06       	sreq	r6
80008b92:	06 30       	cp.w	r0,r3
80008b94:	5f ba       	srhi	r10
80008b96:	ed ea 00 0a 	and	r10,r6,r10
80008b9a:	c0 60       	breq	80008ba6 <__avr32_umod64+0x1ee>
80008b9c:	fc 02 01 04 	sub	r4,lr,r2
80008ba0:	f8 08 01 4c 	sbc	r12,r12,r8
80008ba4:	08 9e       	mov	lr,r4
80008ba6:	e6 0e 01 0a 	sub	r10,r3,lr
80008baa:	f6 0c 01 4c 	sbc	r12,r11,r12
80008bae:	ee f1 ff f4 	ld.w	r1,r7[-12]
80008bb2:	f8 09 0a 4b 	lsr	r11,r12,r9
80008bb6:	f4 09 0a 4a 	lsr	r10,r10,r9
80008bba:	f8 01 09 4c 	lsl	r12,r12,r1
80008bbe:	18 4a       	or	r10,r12
80008bc0:	2f dd       	sub	sp,-12
80008bc2:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80008c00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008c00:	c0 08       	rjmp	80008c00 <_evba>
	...

80008c04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008c04:	c0 08       	rjmp	80008c04 <_handle_TLB_Multiple_Hit>
	...

80008c08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008c08:	c0 08       	rjmp	80008c08 <_handle_Bus_Error_Data_Fetch>
	...

80008c0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80008c0c:	c0 08       	rjmp	80008c0c <_handle_Bus_Error_Instruction_Fetch>
	...

80008c10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008c10:	c0 08       	rjmp	80008c10 <_handle_NMI>
	...

80008c14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008c14:	c0 08       	rjmp	80008c14 <_handle_Instruction_Address>
	...

80008c18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008c18:	c0 08       	rjmp	80008c18 <_handle_ITLB_Protection>
	...

80008c1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80008c1c:	c0 08       	rjmp	80008c1c <_handle_Breakpoint>
	...

80008c20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008c20:	c0 08       	rjmp	80008c20 <_handle_Illegal_Opcode>
	...

80008c24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008c24:	c0 08       	rjmp	80008c24 <_handle_Unimplemented_Instruction>
	...

80008c28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008c28:	c0 08       	rjmp	80008c28 <_handle_Privilege_Violation>
	...

80008c2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80008c2c:	c0 08       	rjmp	80008c2c <_handle_Floating_Point>
	...

80008c30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008c30:	c0 08       	rjmp	80008c30 <_handle_Coprocessor_Absent>
	...

80008c34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008c34:	c0 08       	rjmp	80008c34 <_handle_Data_Address_Read>
	...

80008c38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008c38:	c0 08       	rjmp	80008c38 <_handle_Data_Address_Write>
	...

80008c3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80008c3c:	c0 08       	rjmp	80008c3c <_handle_DTLB_Protection_Read>
	...

80008c40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008c40:	c0 08       	rjmp	80008c40 <_handle_DTLB_Protection_Write>
	...

80008c44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008c44:	c0 08       	rjmp	80008c44 <_handle_DTLB_Modified>
	...

80008c50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008c50:	c0 08       	rjmp	80008c50 <_handle_ITLB_Miss>
	...

80008c60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008c60:	c0 08       	rjmp	80008c60 <_handle_DTLB_Miss_Read>
	...

80008c70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008c70:	c0 08       	rjmp	80008c70 <_handle_DTLB_Miss_Write>
	...

80008d00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008d00:	c0 08       	rjmp	80008d00 <_handle_Supervisor_Call>
80008d02:	d7 03       	nop

80008d04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d04:	30 0c       	mov	r12,0
80008d06:	fe b0 d1 15 	rcall	80002f30 <_get_interrupt_handler>
80008d0a:	58 0c       	cp.w	r12,0
80008d0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d10:	d6 03       	rete

80008d12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d12:	30 1c       	mov	r12,1
80008d14:	fe b0 d1 0e 	rcall	80002f30 <_get_interrupt_handler>
80008d18:	58 0c       	cp.w	r12,0
80008d1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d1e:	d6 03       	rete

80008d20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d20:	30 2c       	mov	r12,2
80008d22:	fe b0 d1 07 	rcall	80002f30 <_get_interrupt_handler>
80008d26:	58 0c       	cp.w	r12,0
80008d28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d2c:	d6 03       	rete

80008d2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008d2e:	30 3c       	mov	r12,3
80008d30:	fe b0 d1 00 	rcall	80002f30 <_get_interrupt_handler>
80008d34:	58 0c       	cp.w	r12,0
80008d36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008d3a:	d6 03       	rete
80008d3c:	d7 03       	nop
80008d3e:	d7 03       	nop
80008d40:	d7 03       	nop
80008d42:	d7 03       	nop
80008d44:	d7 03       	nop
80008d46:	d7 03       	nop
80008d48:	d7 03       	nop
80008d4a:	d7 03       	nop
80008d4c:	d7 03       	nop
80008d4e:	d7 03       	nop
80008d50:	d7 03       	nop
80008d52:	d7 03       	nop
80008d54:	d7 03       	nop
80008d56:	d7 03       	nop
80008d58:	d7 03       	nop
80008d5a:	d7 03       	nop
80008d5c:	d7 03       	nop
80008d5e:	d7 03       	nop
80008d60:	d7 03       	nop
80008d62:	d7 03       	nop
80008d64:	d7 03       	nop
80008d66:	d7 03       	nop
80008d68:	d7 03       	nop
80008d6a:	d7 03       	nop
80008d6c:	d7 03       	nop
80008d6e:	d7 03       	nop
80008d70:	d7 03       	nop
80008d72:	d7 03       	nop
80008d74:	d7 03       	nop
80008d76:	d7 03       	nop
80008d78:	d7 03       	nop
80008d7a:	d7 03       	nop
80008d7c:	d7 03       	nop
80008d7e:	d7 03       	nop
80008d80:	d7 03       	nop
80008d82:	d7 03       	nop
80008d84:	d7 03       	nop
80008d86:	d7 03       	nop
80008d88:	d7 03       	nop
80008d8a:	d7 03       	nop
80008d8c:	d7 03       	nop
80008d8e:	d7 03       	nop
80008d90:	d7 03       	nop
80008d92:	d7 03       	nop
80008d94:	d7 03       	nop
80008d96:	d7 03       	nop
80008d98:	d7 03       	nop
80008d9a:	d7 03       	nop
80008d9c:	d7 03       	nop
80008d9e:	d7 03       	nop
80008da0:	d7 03       	nop
80008da2:	d7 03       	nop
80008da4:	d7 03       	nop
80008da6:	d7 03       	nop
80008da8:	d7 03       	nop
80008daa:	d7 03       	nop
80008dac:	d7 03       	nop
80008dae:	d7 03       	nop
80008db0:	d7 03       	nop
80008db2:	d7 03       	nop
80008db4:	d7 03       	nop
80008db6:	d7 03       	nop
80008db8:	d7 03       	nop
80008dba:	d7 03       	nop
80008dbc:	d7 03       	nop
80008dbe:	d7 03       	nop
80008dc0:	d7 03       	nop
80008dc2:	d7 03       	nop
80008dc4:	d7 03       	nop
80008dc6:	d7 03       	nop
80008dc8:	d7 03       	nop
80008dca:	d7 03       	nop
80008dcc:	d7 03       	nop
80008dce:	d7 03       	nop
80008dd0:	d7 03       	nop
80008dd2:	d7 03       	nop
80008dd4:	d7 03       	nop
80008dd6:	d7 03       	nop
80008dd8:	d7 03       	nop
80008dda:	d7 03       	nop
80008ddc:	d7 03       	nop
80008dde:	d7 03       	nop
80008de0:	d7 03       	nop
80008de2:	d7 03       	nop
80008de4:	d7 03       	nop
80008de6:	d7 03       	nop
80008de8:	d7 03       	nop
80008dea:	d7 03       	nop
80008dec:	d7 03       	nop
80008dee:	d7 03       	nop
80008df0:	d7 03       	nop
80008df2:	d7 03       	nop
80008df4:	d7 03       	nop
80008df6:	d7 03       	nop
80008df8:	d7 03       	nop
80008dfa:	d7 03       	nop
80008dfc:	d7 03       	nop
80008dfe:	d7 03       	nop
